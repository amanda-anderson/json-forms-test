import React, { PureComponent, MouseEvent, ButtonHTMLAttributes } from 'react';
import { Props as IconProps } from '../Icon';
import { Locale } from '../../utils/typings';
import { BoxMarginProps, BoxPaddingProps, BoxPositionProps, BoxWidthProps, BoxHeightProps } from '../Box';
export declare type ButtonStyles = 'primary' | 'primary-inverse' | 'primary-outlined' | 'secondary' | 'secondary-outlined' | 'white' | 'success' | 'text' | 'cl-blue' | 'cl-blue-outlined' | 'admin-dark' | 'admin-dark-outlined' | 'admin-dark-text' | 'delete';
declare type Size = '1' | '2' | '3' | '4' | undefined;
export declare type ButtonContainerProps = {
    buttonStyle?: ButtonStyles;
    size?: Size;
    width?: string;
    height?: string;
    fullWidth?: boolean;
    padding?: string;
    justify?: 'left' | 'center' | 'right' | 'space-between';
    justifyWrapper?: 'left' | 'center' | 'right' | 'space-between';
    iconSize?: string;
    processing?: boolean;
    disabled?: boolean;
    iconColor?: string;
    iconHoverColor?: string;
    textColor?: string;
    textHoverColor?: string;
    textDisabledColor?: string;
    bgColor?: string;
    bgHoverColor?: string;
    bgDisabledColor?: string;
    borderColor?: string;
    borderHoverColor?: string;
    borderDisabledColor?: string;
    borderThickness?: string;
    boxShadow?: string;
    boxShadowHover?: string;
    borderRadius?: string;
    fontWeight?: string;
    lineHeight?: string;
    textDecoration?: string;
    textDecorationHover?: string;
    whiteSpace?: string;
    minWidth?: string;
    fontSize?: string;
    opacityDisabled?: string;
    onClick?: (arg: MouseEvent) => void;
} & BoxMarginProps & BoxPaddingProps & BoxPositionProps & BoxWidthProps & BoxHeightProps & React.HTMLAttributes<HTMLDivElement>;
export interface Props extends ButtonContainerProps {
    children?: any;
    className?: string;
    locale: Locale;
    form?: string;
    hiddenText?: string | JSX.Element;
    icon?: IconProps['name'];
    iconPos?: 'left' | 'right';
    iconTitle?: IconProps['title'];
    linkTo?: string;
    setSubmitButtonRef?: (value: any) => void;
    text?: string | JSX.Element;
    theme?: Record<string, any> | undefined;
    type?: ButtonHTMLAttributes<HTMLButtonElement>['type'];
    spinnerColor?: string;
    role?: string;
    ariaLabel?: string;
    autoFocus?: boolean;
    fontSize?: string;
    ariaExpanded?: boolean;
    ariaDescribedby?: string;
    iconAriaHidden?: boolean;
    ariaDisabled?: boolean;
    openLinkInNewTab?: boolean;
}
declare class Button extends PureComponent<Props> {
    handleOnClick: (event: any) => void;
    removeFocus: (event: MouseEvent<HTMLElement>) => void;
    getSpinnerSize: (size: Size) => "26px" | "24px" | "28px" | "30px";
    render(): JSX.Element;
}
export default Button;
