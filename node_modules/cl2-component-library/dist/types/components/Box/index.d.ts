/// <reference types="react" />
declare type Overflow = 'visible' | 'hidden' | 'scroll' | 'auto' | 'initial' | 'inherit';
declare type FlexContent = 'flex-start' | 'flex-end' | 'center' | 'space-between' | 'space-around' | 'space-evenly' | 'initial' | 'inherit';
declare type FlexAlign = 'flex-start' | 'flex-end' | 'center' | 'baseline' | 'stretch' | 'initial' | 'inherit';
export declare type BoxColorProps = {
    color?: string;
    bgColor?: string;
    opacity?: number;
};
export declare type BoxBackgroundProps = {
    bg?: string;
    background?: string;
};
export declare type BoxPaddingProps = {
    padding?: string;
    p?: string;
    paddingLeft?: string;
    pl?: string;
    paddingRight?: string;
    pr?: string;
    paddingTop?: string;
    pt?: string;
    paddingBottom?: string;
    pb?: string;
    paddingX?: string;
    px?: string;
    paddingY?: string;
    py?: string;
};
export declare type BoxMarginProps = {
    margin?: string;
    m?: string;
    marginLeft?: string;
    ml?: string;
    marginRight?: string;
    mr?: string;
    marginTop?: string;
    mt?: string;
    marginBottom?: string;
    mb?: string;
    marginX?: string;
    mx?: string;
    marginY?: string;
    my?: string;
};
export declare type BoxHeightProps = {
    height?: string;
    h?: string;
    maxHeight?: string;
    minHeight?: string;
};
export declare type BoxWidthProps = {
    width?: string;
    w?: string;
    maxWidth?: string;
    minWidth?: string;
};
export declare type BoxDisplayProps = {
    display?: 'block' | 'inline-block' | 'inline' | 'flex' | 'inline-flex' | 'none' | 'inherit';
};
export declare type BoxOverflowProps = {
    overflow?: Overflow;
    overflowX?: Overflow;
    overflowY?: Overflow;
};
export declare type BoxPositionProps = {
    position?: 'static' | 'relative' | 'fixed' | 'absolute' | 'sticky';
    top?: string;
    bottom?: string;
    left?: string;
    right?: string;
};
export declare type BoxFlexProps = {
    flexDirection?: 'row' | 'row-reverse' | 'column' | 'column-reverse' | 'initial' | 'inherit';
    flexWrap?: 'nowrap' | 'wrap' | 'wrap-reverse' | 'initial' | 'inherit';
    alignItems?: FlexAlign;
    justifyContent?: FlexContent;
    alignContent?: FlexContent;
    order?: number;
    flexGrow?: number;
    flexShrink?: number;
    flexBasis?: number;
    flex?: string;
    alignSelf?: 'auto' | FlexAlign;
};
export declare type BoxBorderProps = {
    border?: string;
    borderTop?: string;
    borderBottom?: string;
    borderLeft?: string;
    borderRight?: string;
    borderColor?: string;
    borderWidth?: string;
    borderRadius?: string;
    borderStyle?: 'dotted' | 'dashed' | 'solid' | 'double' | 'groove' | 'ridge' | 'inset' | 'outset' | 'none' | 'hidden' | 'initial';
};
export declare type BoxVisibilityProps = {
    visibility?: 'visible' | 'hidden' | 'initial' | 'inherit';
};
export declare type BoxZIndexProps = {
    zIndex?: string;
};
export declare type BoxProps = BoxColorProps & BoxBackgroundProps & BoxPaddingProps & BoxMarginProps & BoxHeightProps & BoxWidthProps & BoxDisplayProps & BoxOverflowProps & BoxPositionProps & BoxFlexProps & BoxBorderProps & BoxVisibilityProps & BoxZIndexProps & React.HTMLAttributes<HTMLDivElement>;
declare const Box: import("styled-components").StyledComponent<"div", any, BoxColorProps & BoxBackgroundProps & BoxPaddingProps & BoxMarginProps & BoxHeightProps & BoxWidthProps & BoxDisplayProps & BoxOverflowProps & BoxPositionProps & BoxFlexProps & BoxBorderProps & BoxVisibilityProps & BoxZIndexProps & import("react").HTMLAttributes<HTMLDivElement>, never>;
export default Box;
