import 'focus-visible';
import { InputSize } from './typings';
export declare const isRtl: (style: any, ...args: any[]) => import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
export declare const viewportWidths: {
    smallPhone: number;
    phone: number;
    largePhone: number;
    smallTablet: number;
    largeTablet: number;
};
export declare const media: {
    smallPhone: (style: any, ...args: any) => import("styled-components").FlattenSimpleInterpolation;
    phone: (style: any, ...args: any) => import("styled-components").FlattenSimpleInterpolation;
    largePhone: (style: any, ...args: any) => import("styled-components").FlattenSimpleInterpolation;
    biggerThanPhone: (style: any, ...args: any) => import("styled-components").FlattenSimpleInterpolation;
    biggerThanLargePhone: (style: any, ...args: any) => import("styled-components").FlattenSimpleInterpolation;
    tablet: (style: any, ...args: any) => import("styled-components").FlattenSimpleInterpolation;
    tabletLandscape: (style: any, ...args: any) => import("styled-components").FlattenSimpleInterpolation;
    tabletPortrait: (style: any, ...args: any) => import("styled-components").FlattenSimpleInterpolation;
    smallerThanMinTablet: (style: any, ...args: any) => import("styled-components").FlattenSimpleInterpolation;
    biggerThanMinTablet: (style: any, ...args: any) => import("styled-components").FlattenSimpleInterpolation;
    smallerThanMaxTablet: (style: any, ...args: any) => import("styled-components").FlattenSimpleInterpolation;
    biggerThanMaxTablet: (style: any, ...args: any) => import("styled-components").FlattenSimpleInterpolation;
    smallerThan1280px: (style: any, ...args: any) => import("styled-components").FlattenSimpleInterpolation;
    smallerThan1200px: (style: any, ...args: any) => import("styled-components").FlattenSimpleInterpolation;
    smallerThan1100px: (style: any, ...args: any) => import("styled-components").FlattenSimpleInterpolation;
    smallDesktop: (style: any, ...args: any) => import("styled-components").FlattenSimpleInterpolation;
    desktop: (style: any, ...args: any) => import("styled-components").FlattenSimpleInterpolation;
};
export declare const colors: {
    backgroundLightGrey: string;
    background: string;
    text: string;
    secondaryText: string;
    label: string;
    placeholder: string;
    separation: string;
    border: string;
    hoveredBorder: string;
    focussedBorder: string;
    /**
     * this is the first grey to get 3.0 contrast ratio on a white background, needed for non-text contrast such as button/label borders
     */
    separationDark: string;
    /**
     * first grey to get 3.0 contrast ratio on the beige/greyish background color we use (#F4F4F5)
     */
    separationDarkOnGreyBackground: string;
    /**
     * first grey to get 3.0 contrast ratio on the beige/greyish background color we use (#F4F4F5)
     */
    clGreyOnGreyBackground: string;
    /**
     * background color of dropdown items (e.g. in the navbar)
     */
    clDropdownHoverBackground: string;
    /**
     * Green that has a contrast ratio of >=4.5 on a white background
     */
    clGreen: string;
    clGreenDark: string;
    /**
     * darker green than clGreen for when we have a light green background (clGreenSuccessBackground)
     */
    clGreenSuccess: string;
    clGreenSuccessBackground: string;
    /**
     * Red that has a contrast ratio of >=4.5 on a white background
     */
    clRed: string;
    clRed2: string;
    /**
     * darker red than clRed for when we have a light red background (clRedErrorBackground)
     */
    clRedError: string;
    clRedErrorBackground: string;
    draftYellow: string;
    grey: string;
    mediumGrey: string;
    lightGreyishBlue: string;
    clBlue: string;
    clBlueDark: string;
    clBlueDarkBg: string;
    clBlueDarker: string;
    clBlueDarkest: string;
    clBlueLightest: string;
    clBlueLighter: string;
    clBlueLight: string;
    placeholderBg: string;
    /** Dark background color for popovers, tooltips, dropdown menus, ... */
    popoverDarkBg: string;
    /** Foreground (text) color for dark popovers, tooltip, dropdown menus , ... */
    popoverDarkFg: string;
    adminBackground: string;
    adminContentBackground: string;
    adminMenuBackground: string;
    adminDarkestBackground: string;
    adminTextColor: string;
    adminLightText: string;
    adminSecondaryTextColor: string;
    adminBorder: string;
    adminSeparation: string;
    adminOrangeIcons: string;
    clIconPrimary: string;
    clIconSecondary: string;
    clIconAccent: string;
    clIconBackground: string;
    facebook: string;
    facebookMessenger: string;
    twitter: string;
    emailText: string;
    emailBg: string;
    disabledPrimaryButtonBg: string;
    clBlueButtonText: string;
    tagBackgroundColor: string;
    tagHoverBackgroundColor: string;
};
export declare const fontSizes: {
    xs: number;
    small: number;
    base: number;
    medium: number;
    large: number;
    xl: number;
    xxl: number;
    xxxl: number;
    xxxxl: number;
    xxxxxl: number;
};
export declare const boxShadow: import("styled-components").FlattenSimpleInterpolation;
export declare const defaultStyles: {
    boxShadow: string;
    boxShadowHoverSmall: string;
    boxShadowHoverBig: string;
    boxShadowFocused: string;
    boxShadowError: string;
    inputPadding: string;
};
export declare const defaultCardStyle: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
export declare const defaultCardHoverStyle: import("styled-components").FlattenSimpleInterpolation;
export declare const defaultOutline: import("styled-components").FlattenSimpleInterpolation;
export declare const defaultInputStyle: import("styled-components").FlattenInterpolation<import("styled-components").ThemedStyledProps<{
    size?: InputSize | undefined;
}, any>>;
export declare const stylingConsts: {
    menuHeight: number;
    mobileMenuHeight: number;
    mobileTopBarHeight: number;
    footerHeight: number;
    maxPageWidth: number;
    bannerWidth: number;
    pageWidth: number;
    textWidth: number;
    borderRadius: string;
};
export declare function quillEditedContent(buttonColor?: string, linkColor?: string, textColor?: string, mentionColor?: string, fontSize?: 'small' | 'base' | 'medium' | 'large', fontWeight?: 300 | 400): string;
export declare function getTheme(tenant?: any): any;
export declare function invisibleA11yText(): string;
export declare function remCalc(desiredSize: number): string;
export declare function calculateContrastRatio(backgroundColor: number[], textColor: number[]): number;
export declare function hexToRgb(hex: any): {
    r: number;
    g: number;
    b: number;
} | null;
