/// <reference types="react" />
import * as React$1 from 'react';
import React__default, { PureComponent, FormEvent, MouseEvent, FC, ReactChild, FocusEvent, ChangeEvent, ButtonHTMLAttributes } from 'react';
import * as styled_components from 'styled-components';
import { ColorResult } from 'react-color';
import { Moment } from 'moment';

interface DefaultProps$3 {
    size: string;
    thickness: string;
    color: string;
}
interface Props$l extends DefaultProps$3 {
    className?: string;
}
declare class Spinner extends PureComponent<Props$l> {
    static defaultProps: DefaultProps$3;
    render(): JSX.Element;
}

/**
 * If we have a label, an id is required. Otherwise id is optional.
 */
declare type LabelProps = {
    label: string | JSX.Element | null;
    id: string;
} | {
    label?: undefined;
    id?: string | undefined;
};
declare type Props$k = LabelProps & {
    onChange?: (arg: any) => void;
    currentValue?: any;
    value: any;
    /**
     * Name should be a string that is the same for all radios of the same radio group and unique for each radio group.
     * E.g. if you have a poll with two questions and each question has four answers/radios,
     * radios of each question should have the same name, but it should be different from those
     * of the second question. See PollForm.tsx for a good example.
     */
    name: string | undefined;
    disabled?: boolean;
    buttonColor?: string | undefined;
    className?: string;
    isRequired?: boolean;
};
interface State$4 {
    inputFocused: boolean;
}
declare class Radio extends PureComponent<Props$k, State$4> {
    constructor(props: Props$k);
    handleOnChange: (event: FormEvent) => void;
    handleOnFocus: () => void;
    handleOnBlur: () => void;
    render(): JSX.Element;
}

declare type Props$j = {
    id?: string;
    value?: string | JSX.Element;
    htmlFor?: string;
    children?: any;
    hidden?: boolean;
    className?: string;
    onClick?: (event: MouseEvent) => void;
};
declare class Label extends PureComponent<Props$j> {
    handleOnClick: (event: MouseEvent) => void;
    render(): JSX.Element;
}

interface DefaultProps$2 {
    marginTop: string;
    marginBottom: string;
    showIcon: boolean;
    showBackground: boolean;
    className: string;
    animate: boolean | undefined;
}
interface Props$i extends DefaultProps$2 {
    text?: string | null;
}
interface State$3 {
    mounted: boolean;
}
declare class Error extends PureComponent<Props$i, State$3> {
    static defaultProps: DefaultProps$2;
    constructor(props: Props$i);
    componentDidMount(): void;
    componentWillUnmount(): void;
    render(): JSX.Element;
}

declare type IconNames = keyof typeof icons;
interface Props$h {
    name: IconNames;
    className?: string;
    title?: string | JSX.Element;
    ariaHidden?: boolean;
    'data-testid'?: string;
}
declare const icons: {
    close: (props: Props$h) => JSX.Element;
    copy: (props: Props$h) => JSX.Element;
    upload: (props: Props$h) => JSX.Element;
    'upload-file': (props: Props$h) => JSX.Element;
    error: (props: Props$h) => JSX.Element;
    eye: (props: Props$h) => JSX.Element;
    checkmark: (props: Props$h) => JSX.Element;
    'round-checkmark': (props: Props$h) => JSX.Element;
    halt: (props: Props$h) => JSX.Element;
    dropdown: (props: Props$h) => JSX.Element;
    'arrow-back': (props: Props$h) => JSX.Element;
    plus: (props: Props$h) => JSX.Element;
    'plus-circle': (props: Props$h) => JSX.Element;
    'minus-circle': (props: Props$h) => JSX.Element;
    delete: (props: Props$h) => JSX.Element;
    edit: (props: Props$h) => JSX.Element;
    'cancel-edit': (props: Props$h) => JSX.Element;
    upvote: (props: Props$h) => JSX.Element;
    downvote: (props: Props$h) => JSX.Element;
    'chevron-right': (props: Props$h) => JSX.Element;
    'chevron-left': (props: Props$h) => JSX.Element;
    'chevron-up': (props: Props$h) => JSX.Element;
    'chevron-down': (props: Props$h) => JSX.Element;
    'expand-all': (props: Props$h) => JSX.Element;
    'collapse-all': (props: Props$h) => JSX.Element;
    idea: (props: Props$h) => JSX.Element;
    'idea-filled': (props: Props$h) => JSX.Element;
    idea2: (props: Props$h) => JSX.Element;
    initiative: (props: Props$h) => JSX.Element;
    user: (props: Props$h) => JSX.Element;
    notification: (props: Props$h) => JSX.Element;
    search: (props: Props$h) => JSX.Element;
    lock: (props: Props$h) => JSX.Element;
    'lock-outlined': (props: Props$h) => JSX.Element;
    facebook: (props: Props$h) => JSX.Element;
    messenger: (props: Props$h) => JSX.Element;
    twitter: (props: Props$h) => JSX.Element;
    azureactivedirectory: (props: Props$h) => JSX.Element;
    google: (props: Props$h) => JSX.Element;
    comments: (props: Props$h) => JSX.Element;
    info: (props: Props$h) => JSX.Element;
    calendar: (props: Props$h) => JSX.Element;
    power: (props: Props$h) => JSX.Element;
    admin: (props: Props$h) => JSX.Element;
    settings: (props: Props$h) => JSX.Element;
    send: (props: Props$h) => JSX.Element;
    groups2: (props: Props$h) => JSX.Element;
    project: (props: Props$h) => JSX.Element;
    position: (props: Props$h) => JSX.Element;
    project2: (props: Props$h) => JSX.Element;
    notification_mention: (props: Props$h) => JSX.Element;
    'more-options': (props: Props$h) => JSX.Element;
    phase_arrow: (props: Props$h) => JSX.Element;
    save: (props: Props$h) => JSX.Element;
    saveAlt: (props: Props$h) => JSX.Element;
    map: (props: Props$h) => JSX.Element;
    mapCenter: (props: Props$h) => JSX.Element;
    mapmarker: (props: Props$h) => JSX.Element;
    point: (props: Props$h) => JSX.Element;
    line: (props: Props$h) => JSX.Element;
    rectangle: (props: Props$h) => JSX.Element;
    polygon: (props: Props$h) => JSX.Element;
    timeline: (props: Props$h) => JSX.Element;
    survey: (props: Props$h) => JSX.Element;
    download: (props: Props$h) => JSX.Element;
    notification_invitation_accepted: (props: Props$h) => JSX.Element;
    notification_status: (props: Props$h) => JSX.Element;
    arrowLeft: (props: Props$h) => JSX.Element;
    create: (props: Props$h) => JSX.Element;
    shield: (props: Props$h) => JSX.Element;
    shieldVerified: (props: Props$h) => JSX.Element;
    blankPage: (props: Props$h) => JSX.Element;
    mailBig: (props: Props$h) => JSX.Element;
    remove: (props: Props$h) => JSX.Element;
    circleInfo: (props: Props$h) => JSX.Element;
    paperclip: (props: Props$h) => JSX.Element;
    code: (props: Props$h) => JSX.Element;
    questionMark: (props: Props$h) => JSX.Element;
    questionMarkRoundedOutlined: (props: Props$h) => JSX.Element;
    noAvatar: (props: Props$h) => JSX.Element;
    completeProfile: (props: Props$h) => JSX.Element;
    setup: (props: Props$h) => JSX.Element;
    engage: (props: Props$h) => JSX.Element;
    manage: (props: Props$h) => JSX.Element;
    decide: (props: Props$h) => JSX.Element;
    showMore: (props: Props$h) => JSX.Element;
    translate: (props: Props$h) => JSX.Element;
    share: (props: Props$h) => JSX.Element;
    play: (props: Props$h) => JSX.Element;
    lightningBolt: (props: Props$h) => JSX.Element;
    database: (props: Props$h) => JSX.Element;
    menu: (props: Props$h) => JSX.Element;
    moveFolder: (props: Props$h) => JSX.Element;
    trash: (props: Props$h) => JSX.Element;
    userExport: (props: Props$h) => JSX.Element;
    setting: (props: Props$h) => JSX.Element;
    initiatives: (props: Props$h) => JSX.Element;
    initiativesAdminMenuIcon: (props: Props$h) => JSX.Element;
    folder: (props: Props$h) => JSX.Element;
    'folder-add': (props: Props$h) => JSX.Element;
    moderation: (props: Props$h) => JSX.Element;
    workshops: (props: Props$h) => JSX.Element;
    users: (props: Props$h) => JSX.Element;
    stats: (props: Props$h) => JSX.Element;
    charts: (props: Props$h) => JSX.Element;
    invitations: (props: Props$h) => JSX.Element;
    emails: (props: Props$h) => JSX.Element;
    email: (props: Props$h) => JSX.Element;
    moneybag: (props: Props$h) => JSX.Element;
    submit: (props: Props$h) => JSX.Element;
    homeFilled: (props: Props$h) => JSX.Element;
    info3: (props: Props$h) => JSX.Element;
    dot: (props: Props$h) => JSX.Element;
    pen: (props: Props$h) => JSX.Element;
    clShield: (props: Props$h) => JSX.Element;
    pencil: (props: Props$h) => JSX.Element;
    profile1: (props: Props$h) => JSX.Element;
    filter: (props: Props$h) => JSX.Element;
    successStory: (props: Props$h) => JSX.Element;
    clock: (props: Props$h) => JSX.Element;
    'clock-solid': (props: Props$h) => JSX.Element;
    bullseye: (props: Props$h) => JSX.Element;
    'envelope-check': (props: Props$h) => JSX.Element;
    'checkmark-full': (props: Props$h) => JSX.Element;
    verify_light: (props: Props$h) => JSX.Element;
    verify_dark: (props: Props$h) => JSX.Element;
    verify_manually: (props: Props$h) => JSX.Element;
    template: (props: Props$h) => JSX.Element;
    scratch: (props: Props$h) => JSX.Element;
    list: (props: Props$h) => JSX.Element;
    list2: (props: Props$h) => JSX.Element;
    link: (props: Props$h) => JSX.Element;
    purpose: (props: Props$h) => JSX.Element;
    participationLevel: (props: Props$h) => JSX.Element;
    key: (props: Props$h) => JSX.Element;
    indeterminate: (props: Props$h) => JSX.Element;
    inbox: (props: Props$h) => JSX.Element;
    label: (props: Props$h) => JSX.Element;
    labelOutlined: (props: Props$h) => JSX.Element;
    eyeOpened: (props: Props$h) => JSX.Element;
    eyeClosed: (props: Props$h) => JSX.Element;
    goTo: (props: Props$h) => JSX.Element;
    file: (props: Props$h) => JSX.Element;
    'file-add': (props: Props$h) => JSX.Element;
    simpleFolder: (props: Props$h) => JSX.Element;
    flag: (props: Props$h) => JSX.Element;
    finish_flag: (props: Props$h) => JSX.Element;
    person: (props: Props$h) => JSX.Element;
    event: (props: Props$h) => JSX.Element;
    basket: (props: Props$h) => JSX.Element;
    'basket-plus': (props: Props$h) => JSX.Element;
    'basket-minus': (props: Props$h) => JSX.Element;
    'basket-checkmark': (props: Props$h) => JSX.Element;
    'volunteer-hand': (props: Props$h) => JSX.Element;
    'unvolunteer-hand': (props: Props$h) => JSX.Element;
    'citizenlab-footer-logo': (props: Props$h) => JSX.Element;
    'circle-arrow-left': (props: Props$h) => JSX.Element;
    'share-arrow': (props: Props$h) => JSX.Element;
    whatsapp: (props: Props$h) => JSX.Element;
    processing: (props: Props$h) => JSX.Element;
    'exclamation-trapezium-strikethrough': (props: Props$h) => JSX.Element;
    'exclamation-trapezium': (props: Props$h) => JSX.Element;
    'eyeOpened-unfilled': (props: Props$h) => JSX.Element;
    'eyeClosed-unfilled': (props: Props$h) => JSX.Element;
    'filter-funnel': (props: Props$h) => JSX.Element;
    categories: (props: Props$h) => JSX.Element;
    tokens: (props: Props$h) => JSX.Element;
    'coin-stack': (props: Props$h) => JSX.Element;
    'circled-star': (props: Props$h) => JSX.Element;
};
declare const Icon: FC<Props$h>;

declare type Overflow = 'visible' | 'hidden' | 'scroll' | 'auto' | 'initial' | 'inherit';
declare type FlexContent = 'flex-start' | 'flex-end' | 'center' | 'space-between' | 'space-around' | 'space-evenly' | 'initial' | 'inherit';
declare type FlexAlign = 'flex-start' | 'flex-end' | 'center' | 'baseline' | 'stretch' | 'initial' | 'inherit';
declare type BoxColorProps = {
    color?: string;
    bgColor?: string;
    opacity?: number;
};
declare type BoxBackgroundProps = {
    bg?: string;
    background?: string;
};
declare type BoxPaddingProps = {
    padding?: string;
    p?: string;
    paddingLeft?: string;
    pl?: string;
    paddingRight?: string;
    pr?: string;
    paddingTop?: string;
    pt?: string;
    paddingBottom?: string;
    pb?: string;
    paddingX?: string;
    px?: string;
    paddingY?: string;
    py?: string;
};
declare type BoxMarginProps = {
    margin?: string;
    m?: string;
    marginLeft?: string;
    ml?: string;
    marginRight?: string;
    mr?: string;
    marginTop?: string;
    mt?: string;
    marginBottom?: string;
    mb?: string;
    marginX?: string;
    mx?: string;
    marginY?: string;
    my?: string;
};
declare type BoxHeightProps = {
    height?: string;
    h?: string;
    maxHeight?: string;
    minHeight?: string;
};
declare type BoxWidthProps = {
    width?: string;
    w?: string;
    maxWidth?: string;
    minWidth?: string;
};
declare type BoxDisplayProps = {
    display?: 'block' | 'inline-block' | 'inline' | 'flex' | 'inline-flex' | 'none' | 'inherit';
};
declare type BoxOverflowProps = {
    overflow?: Overflow;
    overflowX?: Overflow;
    overflowY?: Overflow;
};
declare type BoxPositionProps = {
    position?: 'static' | 'relative' | 'fixed' | 'absolute' | 'sticky';
    top?: string;
    bottom?: string;
    left?: string;
    right?: string;
};
declare type BoxFlexProps = {
    flexDirection?: 'row' | 'row-reverse' | 'column' | 'column-reverse' | 'initial' | 'inherit';
    flexWrap?: 'nowrap' | 'wrap' | 'wrap-reverse' | 'initial' | 'inherit';
    alignItems?: FlexAlign;
    justifyContent?: FlexContent;
    alignContent?: FlexContent;
    order?: number;
    flexGrow?: number;
    flexShrink?: number;
    flexBasis?: number;
    flex?: string;
    alignSelf?: 'auto' | FlexAlign;
};
declare type BoxBorderProps = {
    border?: string;
    borderTop?: string;
    borderBottom?: string;
    borderLeft?: string;
    borderRight?: string;
    borderColor?: string;
    borderWidth?: string;
    borderRadius?: string;
    borderStyle?: 'dotted' | 'dashed' | 'solid' | 'double' | 'groove' | 'ridge' | 'inset' | 'outset' | 'none' | 'hidden' | 'initial';
};
declare type BoxVisibilityProps = {
    visibility?: 'visible' | 'hidden' | 'initial' | 'inherit';
};
declare type BoxZIndexProps = {
    zIndex?: string;
};
declare type BoxProps = BoxColorProps & BoxBackgroundProps & BoxPaddingProps & BoxMarginProps & BoxHeightProps & BoxWidthProps & BoxDisplayProps & BoxOverflowProps & BoxPositionProps & BoxFlexProps & BoxBorderProps & BoxVisibilityProps & BoxZIndexProps & React.HTMLAttributes<HTMLDivElement>;
declare const Box: styled_components.StyledComponent<"div", any, BoxColorProps & BoxBackgroundProps & BoxPaddingProps & BoxMarginProps & BoxHeightProps & BoxWidthProps & BoxDisplayProps & BoxOverflowProps & BoxPositionProps & BoxFlexProps & BoxBorderProps & BoxVisibilityProps & BoxZIndexProps & React$1.HTMLAttributes<HTMLDivElement>, never>;

declare type Props$g = {
    className?: string;
    content: ReactChild;
    icon?: IconNames;
    placement?: 'auto-start' | 'auto' | 'auto-end' | 'top-start' | 'top' | 'top-end' | 'right-start' | 'right' | 'right-end' | 'bottom-end' | 'bottom' | 'bottom-start' | 'left-end' | 'left' | 'left-start';
    theme?: 'light';
    iconSize?: string;
    iconColor?: string;
    iconHoverColor?: string;
    maxTooltipWidth?: number;
    iconAriaTitle?: string;
} & BoxPositionProps & BoxMarginProps & BoxPaddingProps & BoxVisibilityProps & BoxDisplayProps & BoxZIndexProps;
declare const IconTooltip: FC<Props$g>;

interface Props$f {
    checked: boolean;
    disabled?: boolean | undefined;
    label?: string | JSX.Element | null | undefined;
    labelTextColor?: string;
    onChange: (event: FormEvent) => void;
    className?: string;
    id?: string;
}
declare class Toggle extends PureComponent<Props$f> {
    handleOnClick: (event: FormEvent) => void;
    render(): JSX.Element;
}

declare global {
    interface Function {
        displayName?: string;
    }
}
interface IOption {
    value: any;
    label: string;
    disabled?: boolean;
}
declare type Locale = string;
declare type Multiloc = {
    [key in Locale]?: string;
};
declare type MultilocFormValues = {
    [field: string]: Multiloc | null | undefined;
};
declare type IGraphPoint = {
    name: string;
    value: number;
    code: string;
};
declare type InputSize = 'small' | 'medium';

interface InputProps {
    ariaLabel?: string;
    id?: string;
    label?: string | JSX.Element | null;
    labelTooltipText?: string | JSX.Element | null;
    value?: string | null;
    locale?: Locale;
    type: 'text' | 'email' | 'password' | 'number' | 'date';
    placeholder?: string | null;
    error?: string | null;
    onChange?: (arg: string, locale: Locale | undefined) => void;
    onFocus?: (arg: FormEvent<HTMLInputElement>) => void;
    onBlur?: (arg: FormEvent<HTMLInputElement>) => void;
    setRef?: (arg: HTMLInputElement) => void | undefined;
    autoFocus?: boolean;
    min?: string;
    max?: string;
    name?: string;
    maxCharCount?: number;
    disabled?: boolean;
    spellCheck?: boolean;
    readOnly?: boolean;
    required?: boolean;
    autocomplete?: 'email' | 'given-name' | 'family-name' | 'current-password' | 'new-password' | 'off' | 'on';
    a11yCharactersLeftMessage?: string;
    className?: string;
    size?: InputSize;
    'data-testid'?: string;
}
declare class Input extends PureComponent<InputProps> {
    handleOnChange: (event: FormEvent<HTMLInputElement>) => void;
    handleOnBlur: (event: FormEvent<HTMLInputElement>) => void;
    handleRef: (element: HTMLInputElement) => void;
    render(): JSX.Element;
}

interface DefaultProps$1 {
    canBeEmpty?: boolean;
}
interface Props$e extends DefaultProps$1 {
    id?: string;
    disabled?: boolean;
    onChange: (arg: IOption) => void;
    onBlur?: (event: FocusEvent<HTMLSelectElement>) => void;
    value?: IOption | string | null;
    options: IOption[] | null;
    label?: string | JSX.Element | null;
    labelTooltipText?: string | JSX.Element | null;
    className?: string;
    size?: InputSize;
}
declare class Select extends PureComponent<Props$e> {
    static defaultProps: DefaultProps$1;
    handleOnChange: (event: ChangeEvent<HTMLSelectElement>) => void;
    handleOnBlur: (event: FocusEvent<HTMLSelectElement>) => void;
    render(): JSX.Element;
}

interface Props$d extends Omit<InputProps, 'value' | 'onChange' | 'error'> {
    valueMultiloc: Multiloc | null | undefined;
    locales: Locale[];
    errorMultiloc?: Multiloc | null;
    onChange?: (arg: Multiloc, locale: Locale) => void;
}
declare class InputMultiloc extends PureComponent<Props$d> {
    handleOnChange: (value: string, locale: Locale | undefined) => void;
    render(): JSX.Element | null;
}

interface Props$c extends Omit<InputProps, 'value' | 'onChange'> {
    valueMultiloc: Multiloc | null | undefined;
    locales: Locale[];
    onChange?: (value: Multiloc, locale?: Locale) => void;
    onSelectedLocaleChange?: (locale: Locale) => void;
    errorMultiloc?: Multiloc | null;
}
declare const InputMultilocWithLocaleSwitcher: React__default.NamedExoticComponent<Props$c>;

interface Props$b {
    value: string;
    placeholder: string;
    className?: string;
    onBlur?: () => void;
    onChange: (arg: string) => void;
    size?: InputSize;
}
declare class LocationInput extends PureComponent<Props$b> {
    handleSelect: (adress: string) => void;
    render(): JSX.Element;
}

interface Props$a {
    placeholder: string;
    ariaLabel: string;
    debounce?: number;
    i18nRemoveSearchTermMessage: string;
    i18nSearchTermMessage: string;
    i18nSearchTermBlankMessage: string;
    setClearButtonRef?: (arg: HTMLButtonElement) => void;
    onChange: (arg: string | null) => void;
    className?: string;
    size?: InputSize;
}
declare const SearchInput: FC<Props$a>;

interface Props$9 {
    onSelectedLocaleChange: (selectedLocale: Locale) => void;
    locales: Locale[];
    selectedLocale: Locale;
    values?: MultilocFormValues;
    className?: string;
}
declare class LocaleSwitcher extends PureComponent<Props$9> {
    isValueForLocaleNotEmpty: (locale: Locale) => boolean;
    removeFocus: (event: MouseEvent<HTMLButtonElement>) => void;
    handleOnClick: (locale: Locale) => (event: MouseEvent<HTMLButtonElement>) => void;
    render(): JSX.Element | null;
}

interface Props$8 {
    type: 'text';
    value: string;
    label?: string | JSX.Element | null;
    labelTooltipText?: string | JSX.Element | null;
    className?: string;
    onChange: (arg: string) => void;
}
interface State$2 {
    opened: boolean;
    value: string;
}
declare class ColorPickerInput extends PureComponent<Props$8, State$2> {
    constructor(props: Props$8);
    componentDidMount(): void;
    componentDidUpdate(prevProps: Props$8): void;
    open: (event: FormEvent) => void;
    close: (event: FormEvent) => void;
    change: (ColorDescription: ColorResult) => void;
    render(): JSX.Element;
}

interface Props$7 {
    id?: string | undefined;
    value: Moment | null;
    label?: string | JSX.Element | null | undefined;
    onChange: (arg: Moment | null) => void;
    openOnLeft?: boolean;
    className?: string;
    disabled?: boolean;
}
interface State$1 {
    focused: boolean;
    selectedDate: Moment | null;
}
declare class DateInput extends PureComponent<Props$7, State$1> {
    constructor(props: Props$7);
    componentDidUpdate(prevProps: Props$7): void;
    updateDateTime: (newMoment: Moment | null) => void;
    handleDateChange: (newMoment: Moment | null) => void;
    handleFocusChange: ({ focused }: {
        focused: boolean | null;
    }) => void;
    isOutsideRange: () => boolean;
    render(): JSX.Element;
}

declare const _default: styled_components.StyledComponent<"div", any, {}, never>;

declare const DropdownListItem: styled_components.StyledComponent<"button", any, {}, never>;
interface Props$6 {
    opened: boolean;
    width?: string;
    mobileWidth?: string;
    maxHeight?: string;
    mobileMaxHeight?: string;
    top?: string;
    left?: string;
    mobileLeft?: string;
    right?: string;
    mobileRight?: string;
    content: JSX.Element;
    footer?: JSX.Element;
    onClickOutside?: (event: FormEvent) => void;
    id?: string;
    className?: string;
}
declare class Dropdown extends PureComponent<Props$6> {
    dropdownElement: HTMLElement | null;
    static defaultProps: {
        width: string;
        mobileWidth: string;
        maxHeight: string;
        mobileMaxHeight: string;
        top: string;
        left: string;
        mobileLeft: string;
        right: string;
        mobileRight: string;
    };
    componentWillUnmount(): void;
    scrolling: (event: WheelEvent) => void;
    setRef: (element: HTMLDivElement | null) => void;
    close: (event: FormEvent) => void;
    render(): JSX.Element | null;
}

interface Props$5 {
    text: string | JSX.Element | null;
    showIcon?: boolean;
    showBackground?: boolean;
    animate: boolean;
    className?: string;
}
interface State {
    mounted: boolean;
}
declare class Success extends PureComponent<Props$5, State> {
    static defaultProps: {
        animate: boolean;
    };
    constructor(props: Props$5);
    componentDidMount(): void;
    componentWillUnmount(): void;
    render(): JSX.Element;
}

interface Props$4 {
    className?: string;
    text: JSX.Element | string;
    backgroundColor: string;
    icon?: Props$h['name'];
}
declare const StatusLabel: FC<Props$4>;

declare type Props$3 = {
    isAutoTag: boolean;
    isSelected: boolean;
    className?: string;
    text: JSX.Element | string;
    icon?: Props$h['name'];
    onIconClick?: (arg: FormEvent) => void;
    onTagClick?: (arg: FormEvent) => void;
} & BoxMarginProps & BoxWidthProps;
declare const Tag: FC<Props$3>;

interface Props$2 {
    className?: string;
}
declare class Table extends PureComponent<Props$2> {
    render(): JSX.Element;
}

declare type DefaultProps = {
    size?: string;
    disabled?: boolean;
    indeterminate?: boolean;
};
declare type Props$1 = DefaultProps & {
    checked: boolean;
    onChange: (event: React__default.ChangeEvent<HTMLInputElement>) => void;
    className?: string;
    label?: string | JSX.Element | null;
    id?: string;
    name?: string;
    stopLabelPropagation?: boolean;
};
declare const Checkbox: FC<Props$1>;

declare type ButtonStyles = 'primary' | 'primary-inverse' | 'primary-outlined' | 'secondary' | 'secondary-outlined' | 'white' | 'success' | 'text' | 'cl-blue' | 'cl-blue-outlined' | 'admin-dark' | 'admin-dark-outlined' | 'admin-dark-text' | 'delete';
declare type Size = '1' | '2' | '3' | '4' | undefined;
declare type ButtonContainerProps = {
    buttonStyle?: ButtonStyles;
    size?: Size;
    width?: string;
    height?: string;
    fullWidth?: boolean;
    padding?: string;
    justify?: 'left' | 'center' | 'right' | 'space-between';
    justifyWrapper?: 'left' | 'center' | 'right' | 'space-between';
    iconSize?: string;
    processing?: boolean;
    disabled?: boolean;
    iconColor?: string;
    iconHoverColor?: string;
    textColor?: string;
    textHoverColor?: string;
    textDisabledColor?: string;
    bgColor?: string;
    bgHoverColor?: string;
    bgDisabledColor?: string;
    borderColor?: string;
    borderHoverColor?: string;
    borderDisabledColor?: string;
    borderThickness?: string;
    boxShadow?: string;
    boxShadowHover?: string;
    borderRadius?: string;
    fontWeight?: string;
    lineHeight?: string;
    textDecoration?: string;
    textDecorationHover?: string;
    whiteSpace?: string;
    minWidth?: string;
    fontSize?: string;
    opacityDisabled?: string;
    onClick?: (arg: MouseEvent) => void;
} & BoxMarginProps & BoxPaddingProps & BoxPositionProps & BoxWidthProps & BoxHeightProps & React__default.HTMLAttributes<HTMLDivElement>;
interface Props extends ButtonContainerProps {
    children?: any;
    className?: string;
    locale: Locale;
    form?: string;
    hiddenText?: string | JSX.Element;
    icon?: Props$h['name'];
    iconPos?: 'left' | 'right';
    iconTitle?: Props$h['title'];
    linkTo?: string;
    setSubmitButtonRef?: (value: any) => void;
    text?: string | JSX.Element;
    theme?: Record<string, any> | undefined;
    type?: ButtonHTMLAttributes<HTMLButtonElement>['type'];
    spinnerColor?: string;
    role?: string;
    ariaLabel?: string;
    autoFocus?: boolean;
    fontSize?: string;
    ariaExpanded?: boolean;
    ariaDescribedby?: string;
    iconAriaHidden?: boolean;
    ariaDisabled?: boolean;
    openLinkInNewTab?: boolean;
}
declare class Button extends PureComponent<Props> {
    handleOnClick: (event: any) => void;
    removeFocus: (event: MouseEvent<HTMLElement>) => void;
    getSpinnerSize: (size: Size) => "26px" | "24px" | "28px" | "30px";
    render(): JSX.Element;
}

declare const viewportWidths: {
    smallPhone: number;
    phone: number;
    largePhone: number;
    smallTablet: number;
    largeTablet: number;
};
declare const media: {
    smallPhone: (style: any, ...args: any) => styled_components.FlattenSimpleInterpolation;
    phone: (style: any, ...args: any) => styled_components.FlattenSimpleInterpolation;
    largePhone: (style: any, ...args: any) => styled_components.FlattenSimpleInterpolation;
    biggerThanPhone: (style: any, ...args: any) => styled_components.FlattenSimpleInterpolation;
    biggerThanLargePhone: (style: any, ...args: any) => styled_components.FlattenSimpleInterpolation;
    tablet: (style: any, ...args: any) => styled_components.FlattenSimpleInterpolation;
    tabletLandscape: (style: any, ...args: any) => styled_components.FlattenSimpleInterpolation;
    tabletPortrait: (style: any, ...args: any) => styled_components.FlattenSimpleInterpolation;
    smallerThanMinTablet: (style: any, ...args: any) => styled_components.FlattenSimpleInterpolation;
    biggerThanMinTablet: (style: any, ...args: any) => styled_components.FlattenSimpleInterpolation;
    smallerThanMaxTablet: (style: any, ...args: any) => styled_components.FlattenSimpleInterpolation;
    biggerThanMaxTablet: (style: any, ...args: any) => styled_components.FlattenSimpleInterpolation;
    smallerThan1280px: (style: any, ...args: any) => styled_components.FlattenSimpleInterpolation;
    smallerThan1200px: (style: any, ...args: any) => styled_components.FlattenSimpleInterpolation;
    smallerThan1100px: (style: any, ...args: any) => styled_components.FlattenSimpleInterpolation;
    smallDesktop: (style: any, ...args: any) => styled_components.FlattenSimpleInterpolation;
    desktop: (style: any, ...args: any) => styled_components.FlattenSimpleInterpolation;
};
declare const colors: {
    backgroundLightGrey: string;
    background: string;
    text: string;
    secondaryText: string;
    label: string;
    placeholder: string;
    separation: string;
    border: string;
    hoveredBorder: string;
    focussedBorder: string;
    /**
     * this is the first grey to get 3.0 contrast ratio on a white background, needed for non-text contrast such as button/label borders
     */
    separationDark: string;
    /**
     * first grey to get 3.0 contrast ratio on the beige/greyish background color we use (#F4F4F5)
     */
    separationDarkOnGreyBackground: string;
    /**
     * first grey to get 3.0 contrast ratio on the beige/greyish background color we use (#F4F4F5)
     */
    clGreyOnGreyBackground: string;
    /**
     * background color of dropdown items (e.g. in the navbar)
     */
    clDropdownHoverBackground: string;
    /**
     * Green that has a contrast ratio of >=4.5 on a white background
     */
    clGreen: string;
    clGreenDark: string;
    /**
     * darker green than clGreen for when we have a light green background (clGreenSuccessBackground)
     */
    clGreenSuccess: string;
    clGreenSuccessBackground: string;
    /**
     * Red that has a contrast ratio of >=4.5 on a white background
     */
    clRed: string;
    clRed2: string;
    /**
     * darker red than clRed for when we have a light red background (clRedErrorBackground)
     */
    clRedError: string;
    clRedErrorBackground: string;
    draftYellow: string;
    grey: string;
    mediumGrey: string;
    lightGreyishBlue: string;
    clBlue: string;
    clBlueDark: string;
    clBlueDarkBg: string;
    clBlueDarker: string;
    clBlueDarkest: string;
    clBlueLightest: string;
    clBlueLighter: string;
    clBlueLight: string;
    placeholderBg: string;
    /** Dark background color for popovers, tooltips, dropdown menus, ... */
    popoverDarkBg: string;
    /** Foreground (text) color for dark popovers, tooltip, dropdown menus , ... */
    popoverDarkFg: string;
    adminBackground: string;
    adminContentBackground: string;
    adminMenuBackground: string;
    adminDarkestBackground: string;
    adminTextColor: string;
    adminLightText: string;
    adminSecondaryTextColor: string;
    adminBorder: string;
    adminSeparation: string;
    adminOrangeIcons: string;
    clIconPrimary: string;
    clIconSecondary: string;
    clIconAccent: string;
    clIconBackground: string;
    facebook: string;
    facebookMessenger: string;
    twitter: string;
    emailText: string;
    emailBg: string;
    disabledPrimaryButtonBg: string;
    clBlueButtonText: string;
    tagBackgroundColor: string;
    tagHoverBackgroundColor: string;
};
declare const fontSizes: {
    xs: number;
    small: number;
    base: number;
    medium: number;
    large: number;
    xl: number;
    xxl: number;
    xxxl: number;
    xxxxl: number;
    xxxxxl: number;
};
declare const defaultStyles: {
    boxShadow: string;
    boxShadowHoverSmall: string;
    boxShadowHoverBig: string;
    boxShadowFocused: string;
    boxShadowError: string;
    inputPadding: string;
};
declare const defaultCardStyle: styled_components.FlattenInterpolation<styled_components.ThemeProps<any>>;
declare const defaultCardHoverStyle: styled_components.FlattenSimpleInterpolation;
declare const defaultOutline: styled_components.FlattenSimpleInterpolation;
declare const defaultInputStyle: styled_components.FlattenInterpolation<styled_components.ThemedStyledProps<{
    size?: InputSize | undefined;
}, any>>;
declare const stylingConsts: {
    menuHeight: number;
    mobileMenuHeight: number;
    mobileTopBarHeight: number;
    footerHeight: number;
    maxPageWidth: number;
    bannerWidth: number;
    pageWidth: number;
    textWidth: number;
    borderRadius: string;
};
declare function quillEditedContent(buttonColor?: string, linkColor?: string, textColor?: string, mentionColor?: string, fontSize?: 'small' | 'base' | 'medium' | 'large', fontWeight?: 300 | 400): string;
declare function getTheme(tenant?: any): any;
declare function invisibleA11yText(): string;
declare function remCalc(desiredSize: number): string;
declare function calculateContrastRatio(backgroundColor: number[], textColor: number[]): number;
declare function hexToRgb(hex: any): {
    r: number;
    g: number;
    b: number;
} | null;

declare function useWindowSize(): {
    windowWidth: number;
    windowHeight: number;
};

declare const mediaQueries: {
    smallPhone: string;
    phone: string;
    largePhone: string;
    smallTablet: string;
    largeTablet: string;
};
declare type BreakpointType = keyof typeof mediaQueries;
declare const useBreakpoint: (breakpointType: BreakpointType) => boolean;

export { _default as Badge, Box, BoxBackgroundProps, BoxBorderProps, BoxColorProps, BoxDisplayProps, BoxFlexProps, BoxHeightProps, BoxMarginProps, BoxOverflowProps, BoxPaddingProps, BoxPositionProps, BoxProps, BoxVisibilityProps, BoxWidthProps, BoxZIndexProps, Button, ButtonContainerProps, Props as ButtonProps, ButtonStyles, Checkbox, ColorPickerInput, Props$8 as ColorPickerInputProps, DateInput, Dropdown, DropdownListItem, Error, IGraphPoint, IOption, Icon, IconNames, Props$h as IconProps, IconTooltip, Input, InputMultiloc, Props$d as InputMultilocProps, InputMultilocWithLocaleSwitcher, Props$c as InputMultilocWithLocaleSwitcherProps, InputProps, Label, Locale, LocaleSwitcher, LocationInput, Props$b as LocationInputProps, Radio, Props$k as RadioProps, SearchInput, Props$a as SearchInputProps, Select, Props$e as SelectProps, Spinner, StatusLabel, Success, Table, Tag, Toggle, calculateContrastRatio, colors, defaultCardHoverStyle, defaultCardStyle, defaultInputStyle, defaultOutline, defaultStyles, fontSizes, getTheme, hexToRgb, invisibleA11yText, media, quillEditedContent, remCalc, stylingConsts, useBreakpoint, useWindowSize, viewportWidths };
