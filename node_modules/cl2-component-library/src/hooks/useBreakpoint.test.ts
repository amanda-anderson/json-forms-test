import useBreakpoint from './useBreakpoint';
import { renderHook } from '@testing-library/react-hooks';
import mediaQuery from 'css-mediaquery';

function createMatchMedia(width: number) {
  return (query: any) => ({
    matches: mediaQuery.match(query, {
      width,
    }),
    media: query,
    onchange: null,
    addListener: () => jest.fn(),
    removeListener: () => jest.fn(),
    addEventListener: jest.fn(),
    removeEventListener: jest.fn(),
    dispatchEvent: jest.fn(),
  });
}

describe('useBreakpoint', () => {
  it('should return the correct breakpoints when  it is small phone', () => {
    window.matchMedia = createMatchMedia(300);
    const { result } = renderHook(() => useBreakpoint('smallPhone'));
    expect(result.current).toEqual(true);
  });
  it('should return the correct breakpoints when it is not small phone', () => {
    window.matchMedia = createMatchMedia(500);
    const { result } = renderHook(() => useBreakpoint('smallPhone'));
    expect(result.current).toEqual(false);
  });
  it('should return the correct breakpoints when it is phone', () => {
    window.matchMedia = createMatchMedia(350);
    const { result } = renderHook(() => useBreakpoint('phone'));
    expect(result.current).toEqual(true);
  });
  it('should return the correct breakpoints when it is not phone', () => {
    window.matchMedia = createMatchMedia(500);
    const { result } = renderHook(() => useBreakpoint('phone'));
    expect(result.current).toEqual(false);
  });
  it('should return the correct breakpoints when it is large phone', () => {
    window.matchMedia = createMatchMedia(400);
    const { result } = renderHook(() => useBreakpoint('largePhone'));
    expect(result.current).toEqual(true);
  });
  it('should return the correct breakpoints when it is not large phone', () => {
    window.matchMedia = createMatchMedia(600);
    const { result } = renderHook(() => useBreakpoint('largePhone'));
    expect(result.current).toEqual(false);
  });
  it('should return the correct breakpoints when it is small tablet', () => {
    window.matchMedia = createMatchMedia(700);
    const { result } = renderHook(() => useBreakpoint('smallTablet'));
    expect(result.current).toEqual(true);
  });
  it('should return the correct breakpoints when it is not small tablet', () => {
    window.matchMedia = createMatchMedia(900);
    const { result } = renderHook(() => useBreakpoint('smallTablet'));
    expect(result.current).toEqual(false);
  });
  it('should return the correct breakpoints when it is large tablet', () => {
    window.matchMedia = createMatchMedia(1000);
    const { result } = renderHook(() => useBreakpoint('largeTablet'));
    expect(result.current).toEqual(true);
  });
  it('should return the correct breakpoints when it is not large tablet', () => {
    window.matchMedia = createMatchMedia(1600);
    const { result } = renderHook(() => useBreakpoint('largeTablet'));
    expect(result.current).toEqual(false);
  });
});
