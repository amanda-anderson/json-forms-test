import React, { FC, memo, FormEvent, useCallback } from 'react';
import styled from 'styled-components';
import { darken } from 'polished';
import { fontSizes, colors } from '../../utils/styleUtils';
import Icon, { Props as IconProps } from '../Icon';
import Box, { BoxMarginProps, BoxWidthProps } from '../Box';

const Container = styled(Box)`
  height: 20px;
  white-space: nowrap;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  border-radius: ${(props: any) => props.theme.borderRadius};
  border: 1px solid rgba(50, 182, 122, 0.55);
  padding-left: 6px;
  padding-right: 6px;
  transition: all 50ms ease-out;
  background-color: #ebfaf3;
  &.clickable {
    cursor: pointer;
  }
  > *:not(:first-child) {
    margin-left: 4px;
  }
  &.autotag {
    background-color: #fff;
    border: 1px dashed rgba(184, 197, 208, 1);
  }

  &.selected {
    border-color: ${colors.clBlue};
  }

  &:hover {
    background-color: ${darken(0.1, 'rgba(184, 197, 208, 0.2)')};
    /* border-color: rgba(89, 107, 122, 0.4); */
  }
`;

const StyledIcon = styled(Icon)`
  height: 8px;
`;

const StyledTextLabel = styled.div`
  color: ${colors.adminTextColor};
  font-size: ${fontSizes.small}px;
  font-weight: 400;
  line-height: normal;
`;

type Props = {
  isAutoTag: boolean;
  isSelected: boolean;
  className?: string;
  text: JSX.Element | string;
  icon?: IconProps['name'];
  onIconClick?: (arg: FormEvent) => void;
  onTagClick?: (arg: FormEvent) => void;
} & BoxMarginProps &
  BoxWidthProps;

const Tag: FC<Props> = memo(
  ({
    className,
    icon,
    text,
    isAutoTag,
    isSelected,
    onIconClick,
    onTagClick,
    children,
    ...rest
  }) => {
    const handleOnIconClick = useCallback(
      (event: FormEvent) => {
        if (onIconClick) {
          event.preventDefault();
          event.stopPropagation();
          onIconClick(event);
        }
      },
      [onIconClick]
    );
    const handleOnTagClick = useCallback(
      (event: FormEvent) => {
        if (onTagClick) {
          event.preventDefault();
          event.stopPropagation();
          onTagClick(event);
        }
      },
      [onTagClick]
    );

    const getClassName = () => {
      let baseClass = '';
      if (isAutoTag) {
        baseClass = 'autotag';
      }
      if (isAutoTag && isSelected) {
        baseClass = 'selected autotag';
      }
      if (!isAutoTag && isSelected) {
        baseClass = 'selected';
      }

      return onTagClick ? baseClass + ' clickable' : baseClass;
    };

    return (
      <Container
        className={`${className} ${getClassName()}`}
        onClick={handleOnTagClick}
        {...rest}
      >
        {children}
        <StyledTextLabel>{text}</StyledTextLabel>
        {icon && (
          // eslint-disable-next-line
          <div onClick={handleOnIconClick}>
            <StyledIcon name={icon} />
          </div>
        )}
      </Container>
    );
  }
);

export default Tag;
