import React, {
  FC,
  memo,
  useState,
  useCallback,
  useEffect,
  MouseEvent,
} from 'react';
import { isEmpty } from 'lodash';
import { LiveMessage } from 'react-aria-live';

// components
import Input from '../Input';
import Icon from '../Icon';

// styling
import styled from 'styled-components';
import { colors, isRtl, defaultStyles } from '../../utils/styleUtils';
import { ScreenReaderOnly } from '../../utils/a11y';

// typings
import { InputSize } from '../../utils/typings';

// utils
import testEnv from '../../utils/testUtils/testEnv';

const Container = styled.div`
  position: relative;
`;

const StyledInput = styled(Input)`
  input {
    padding-right: 40px;
    width: 100%;

    &::-ms-clear {
      display: none;
    }
  }

  ${isRtl`
    input{
        padding-right: ${defaultStyles.inputPadding};
        padding-left: 40px;
    }
  `}
`;

const IconContainer = styled.div<{ inputSize?: InputSize }>`
  position: absolute;
  right: 10px;
  top: ${({ inputSize }) => (inputSize === 'small' ? '9px' : '13px')};

  ${isRtl`
    left: 10px;
    right: auto;
  `}
`;

const SearchIcon = styled(Icon)`
  flex: 0 0 20px;
  width: 20px;
  height: 20px;
  fill: ${colors.label};
`;

const ClearIcon = styled(Icon)`
  flex: 0 0 14px;
  width: 14px;
  height: 14px;
  fill: ${colors.label};
`;

const ClearButton = styled.button`
  width: 20px;
  height: 20px;
  padding: 0;
  margin: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  border: none;
  -webkit-appearance: none;
  -moz-appearance: none;
  cursor: pointer;

  &:hover {
    ${ClearIcon} {
      fill: #000;
    }
  }
`;

export interface Props {
  placeholder: string;
  ariaLabel: string;
  debounce?: number;
  i18nRemoveSearchTermMessage: string;
  i18nSearchTermMessage: string;
  i18nSearchTermBlankMessage: string;
  setClearButtonRef?: (arg: HTMLButtonElement) => void;
  onChange: (arg: string | null) => void;
  className?: string;
  size?: InputSize;
}

const SearchInput: FC<Props> = memo<Props>(
  ({
    placeholder,
    ariaLabel,
    debounce = 500,
    i18nRemoveSearchTermMessage,
    i18nSearchTermMessage,
    i18nSearchTermBlankMessage,
    setClearButtonRef,
    onChange,
    className,
    size,
  }) => {
    const [searchTerm, setSearchTerm] = useState<string | null>(null);

    const handleOnChange = useCallback((value: string) => {
      const newValue = !isEmpty(value) ? value : null;
      setSearchTerm(newValue);
    }, []);

    const handleOnReset = useCallback(
      (event?: MouseEvent<HTMLElement>) => {
        event?.preventDefault();

        if (!isEmpty(searchTerm)) {
          setSearchTerm(null);
        }
      },
      [searchTerm]
    );

    const handleClearButtonRef = useCallback(
      (element: HTMLButtonElement) => {
        setClearButtonRef?.(element);
      },
      [setClearButtonRef]
    );

    useEffect(() => {
      const handler = setTimeout(() => {
        onChange(searchTerm);
      }, debounce);

      return () => clearTimeout(handler);
    }, [searchTerm, onChange, debounce]);

    return (
      <Container className={className || ''}>
        <StyledInput
          className="e2e-search-input"
          type="text"
          aria-label={ariaLabel}
          placeholder={placeholder}
          value={searchTerm || ''}
          onChange={handleOnChange}
          size={size}
          data-testid={testEnv('input-field')}
        />

        <ScreenReaderOnly aria-live="polite">
          {i18nSearchTermMessage}
        </ScreenReaderOnly>

        <IconContainer inputSize={size}>
          {isEmpty(searchTerm) ? (
            <SearchIcon ariaHidden name="search" />
          ) : (
            <ClearButton onClick={handleOnReset} ref={handleClearButtonRef}>
              <ClearIcon title={i18nRemoveSearchTermMessage} name="close" />
            </ClearButton>
          )}
        </IconContainer>

        <LiveMessage
          message={
            searchTerm ? i18nSearchTermMessage : i18nSearchTermBlankMessage
          }
          aria-live="polite"
        />
      </Container>
    );
  }
);

export default SearchInput;
