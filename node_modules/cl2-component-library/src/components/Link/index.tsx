import React, { PureComponent } from 'react';
import { Link as RouterLink, LinkProps } from 'react-router';
import { LocationDescriptor } from 'history';
import { isNilOrError } from '../../utils/helperUtils';
import locales from '../../utils/locales';
import { isString, includes } from 'lodash';
import { Locale } from '../../utils/typings';

interface InputProps extends LinkProps {
  to: LocationDescriptor;
}

interface DataProps {
  locale: string | null | undefined;
}

interface Props extends InputProps, DataProps {}

function getUrlLocale(pathname: string) {
  const firstUrlSegment = pathname.replace(/^\/|\/$/g, '').split('/')[0];
  const isLocale = includes(locales, firstUrlSegment);
  return isLocale ? firstUrlSegment : null;
}

function setPathnameLocale(
  pathname: string,
  locale: Locale,
  search?: string
): string {
  return `/${locale}${pathname}${search || ''}`;
}

function replacePathnameLocale(
  pathname: string,
  locale: Locale,
  search?: string
) {
  const urlSegments = pathname.replace(/^\/|\/$/g, '').split('/');
  urlSegments[0] = locale;
  const newPathname = urlSegments.join('/');

  return urlSegments.length === 1
    ? `/${newPathname}/`
    : `/${newPathname}${search || ''}`;
}

function updateLocationDescriptor(
  location: LocationDescriptor,
  locale: Locale
): LocationDescriptor {
  const descriptor = isString(location) ? { pathname: location } : location;
  const urlLocale = descriptor.pathname
    ? getUrlLocale(descriptor.pathname)
    : null;

  if (descriptor.pathname) {
    if (!urlLocale && locale) {
      descriptor.pathname = setPathnameLocale(descriptor.pathname, locale);
    } else if (urlLocale && locale && urlLocale !== locale) {
      descriptor.pathname = replacePathnameLocale(descriptor.pathname, locale);
    }
  }

  descriptor.state = {
    ...(descriptor.state as any),
    locale,
  };

  return descriptor;
}

class Link extends PureComponent<Props> {
  render() {
    const { to, locale, ...otherProps } = this.props;

    return (
      <RouterLink
        to={!isNilOrError(locale) ? updateLocationDescriptor(to, locale) : '#'}
        {...otherProps}
      />
    );
  }
}

export default Link;
