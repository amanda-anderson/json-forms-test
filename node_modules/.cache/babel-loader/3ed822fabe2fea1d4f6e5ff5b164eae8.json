{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/home/aander-cl/Documents/jsonforms/jsonforms-react-seed/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\", \" \", \" \", \"\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\", \"(\", \")\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\", \".length\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"{limit: \", \"}\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"must NOT have \", \" than \", \" characters\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar codegen_1 = require(\"../../compile/codegen\");\n\nvar util_1 = require(\"../../compile/util\");\n\nvar ucs2length_1 = require(\"../../runtime/ucs2length\");\n\nvar error = {\n  message(_ref) {\n    var keyword = _ref.keyword,\n        schemaCode = _ref.schemaCode;\n    var comp = keyword === \"maxLength\" ? \"more\" : \"fewer\";\n    return (0, codegen_1.str)(_templateObject(), comp, schemaCode);\n  },\n\n  params: function params(_ref2) {\n    var schemaCode = _ref2.schemaCode;\n    return (0, codegen_1._)(_templateObject2(), schemaCode);\n  }\n};\nvar def = {\n  keyword: [\"maxLength\", \"minLength\"],\n  type: \"string\",\n  schemaType: \"number\",\n  $data: true,\n  error,\n\n  code(cxt) {\n    var keyword = cxt.keyword,\n        data = cxt.data,\n        schemaCode = cxt.schemaCode,\n        it = cxt.it;\n    var op = keyword === \"maxLength\" ? codegen_1.operators.GT : codegen_1.operators.LT;\n    var len = it.opts.unicode === false ? (0, codegen_1._)(_templateObject3(), data) : (0, codegen_1._)(_templateObject4(), (0, util_1.useFunc)(cxt.gen, ucs2length_1.default), data);\n    cxt.fail$data((0, codegen_1._)(_templateObject5(), len, op, schemaCode));\n  }\n\n};\nexports.default = def;","map":{"version":3,"sources":["../../../lib/vocabularies/validation/limitLength.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAA,SAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,0BAAA,CAAA;;AAEA,IAAM,KAAK,GAA2B;AACpC,EAAA,OAAO,OAAsB;AAAA,QAApB,OAAoB,QAApB,OAAoB;AAAA,QAAX,UAAW,QAAX,UAAW;AAC3B,QAAM,IAAI,GAAG,OAAO,KAAK,WAAZ,GAA0B,MAA1B,GAAmC,OAAhD;AACA,YAAO,GAAA,SAAA,CAAA,GAAP,qBAA2B,IAA3B,EAAwC,UAAxC;AACD,GAJmC;;AAKpC,EAAA,MAAM,EAAE;AAAA,QAAE,UAAF,SAAE,UAAF;AAAA,YAAkB,GAAA,SAAA,CAAA,CAAlB,sBAA8B,UAA9B;AAAA;AAL4B,CAAtC;AAQA,IAAM,GAAG,GAA0B;AACjC,EAAA,OAAO,EAAE,CAAC,WAAD,EAAc,WAAd,CADwB;AAEjC,EAAA,IAAI,EAAE,QAF2B;AAGjC,EAAA,UAAU,EAAE,QAHqB;AAIjC,EAAA,KAAK,EAAE,IAJ0B;AAKjC,EAAA,KALiC;;AAMjC,EAAA,IAAI,CAAC,GAAD,EAAgB;AAAA,QACX,OADW,GACsB,GADtB,CACX,OADW;AAAA,QACF,IADE,GACsB,GADtB,CACF,IADE;AAAA,QACI,UADJ,GACsB,GADtB,CACI,UADJ;AAAA,QACgB,EADhB,GACsB,GADtB,CACgB,EADhB;AAElB,QAAM,EAAE,GAAG,OAAO,KAAK,WAAZ,GAA0B,SAAA,CAAA,SAAA,CAAU,EAApC,GAAyC,SAAA,CAAA,SAAA,CAAU,EAA9D;AACA,QAAM,GAAG,GACP,EAAE,CAAC,IAAH,CAAQ,OAAR,KAAoB,KAApB,IAA4B,GAAA,SAAA,CAAA,CAA5B,sBAAgC,IAAhC,KAAgD,GAAA,SAAA,CAAA,CAAhD,sBAAoD,CAAA,GAAA,MAAA,CAAA,OAAA,EAAQ,GAAG,CAAC,GAAZ,EAAiB,YAAA,CAAA,OAAjB,CAApD,EAAoF,IAApF,CADF;AAEA,IAAA,GAAG,CAAC,SAAJ,EAAc,GAAA,SAAA,CAAA,CAAd,sBAAkB,GAAlB,EAAyB,EAAzB,EAA+B,UAA/B;AACD;;AAZgC,CAAnC;AAeA,OAAA,CAAA,OAAA,GAAe,GAAf","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst codegen_1 = require(\"../../compile/codegen\");\nconst util_1 = require(\"../../compile/util\");\nconst ucs2length_1 = require(\"../../runtime/ucs2length\");\nconst error = {\n    message({ keyword, schemaCode }) {\n        const comp = keyword === \"maxLength\" ? \"more\" : \"fewer\";\n        return (0, codegen_1.str) `must NOT have ${comp} than ${schemaCode} characters`;\n    },\n    params: ({ schemaCode }) => (0, codegen_1._) `{limit: ${schemaCode}}`,\n};\nconst def = {\n    keyword: [\"maxLength\", \"minLength\"],\n    type: \"string\",\n    schemaType: \"number\",\n    $data: true,\n    error,\n    code(cxt) {\n        const { keyword, data, schemaCode, it } = cxt;\n        const op = keyword === \"maxLength\" ? codegen_1.operators.GT : codegen_1.operators.LT;\n        const len = it.opts.unicode === false ? (0, codegen_1._) `${data}.length` : (0, codegen_1._) `${(0, util_1.useFunc)(cxt.gen, ucs2length_1.default)}(${data})`;\n        cxt.fail$data((0, codegen_1._) `${len} ${op} ${schemaCode}`);\n    },\n};\nexports.default = def;\n//# sourceMappingURL=limitLength.js.map"]},"metadata":{},"sourceType":"script"}