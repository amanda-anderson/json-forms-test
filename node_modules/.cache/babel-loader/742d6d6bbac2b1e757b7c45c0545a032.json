{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/home/aander-cl/Documents/jsonforms/jsonforms-react-seed/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"(\", \" === 0 || (\", \" = \", \"/\", \", \", \"))\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\", \" !== parseInt(\", \")\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"Math.abs(Math.round(\", \") - \", \") > 1e-\", \"\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"{multipleOf: \", \"}\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"must be multiple of \", \"\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar codegen_1 = require(\"../../compile/codegen\");\n\nvar error = {\n  message: function message(_ref) {\n    var schemaCode = _ref.schemaCode;\n    return (0, codegen_1.str)(_templateObject(), schemaCode);\n  },\n  params: function params(_ref2) {\n    var schemaCode = _ref2.schemaCode;\n    return (0, codegen_1._)(_templateObject2(), schemaCode);\n  }\n};\nvar def = {\n  keyword: \"multipleOf\",\n  type: \"number\",\n  schemaType: \"number\",\n  $data: true,\n  error,\n\n  code(cxt) {\n    var gen = cxt.gen,\n        data = cxt.data,\n        schemaCode = cxt.schemaCode,\n        it = cxt.it; // const bdt = bad$DataType(schemaCode, <string>def.schemaType, $data)\n\n    var prec = it.opts.multipleOfPrecision;\n    var res = gen.let(\"res\");\n    var invalid = prec ? (0, codegen_1._)(_templateObject3(), res, res, prec) : (0, codegen_1._)(_templateObject4(), res, res);\n    cxt.fail$data((0, codegen_1._)(_templateObject5(), schemaCode, res, data, schemaCode, invalid));\n  }\n\n};\nexports.default = def;","map":{"version":3,"sources":["../../../lib/vocabularies/validation/multipleOf.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAA,SAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AAQA,IAAM,KAAK,GAA2B;AACpC,EAAA,OAAO,EAAE;AAAA,QAAE,UAAF,QAAE,UAAF;AAAA,YAAkB,GAAA,SAAA,CAAA,GAAlB,qBAA4C,UAA5C;AAAA,GAD2B;AAEpC,EAAA,MAAM,EAAE;AAAA,QAAE,UAAF,SAAE,UAAF;AAAA,YAAkB,GAAA,SAAA,CAAA,CAAlB,sBAAmC,UAAnC;AAAA;AAF4B,CAAtC;AAKA,IAAM,GAAG,GAA0B;AACjC,EAAA,OAAO,EAAE,YADwB;AAEjC,EAAA,IAAI,EAAE,QAF2B;AAGjC,EAAA,UAAU,EAAE,QAHqB;AAIjC,EAAA,KAAK,EAAE,IAJ0B;AAKjC,EAAA,KALiC;;AAMjC,EAAA,IAAI,CAAC,GAAD,EAAgB;AAAA,QACX,GADW,GACkB,GADlB,CACX,GADW;AAAA,QACN,IADM,GACkB,GADlB,CACN,IADM;AAAA,QACA,UADA,GACkB,GADlB,CACA,UADA;AAAA,QACY,EADZ,GACkB,GADlB,CACY,EADZ,EAElB;;AACA,QAAM,IAAI,GAAG,EAAE,CAAC,IAAH,CAAQ,mBAArB;AACA,QAAM,GAAG,GAAG,GAAG,CAAC,GAAJ,CAAQ,KAAR,CAAZ;AACA,QAAM,OAAO,GAAG,IAAI,IAChB,GAAA,SAAA,CAAA,CADgB,sBACQ,GADR,EACkB,GADlB,EAC+B,IAD/B,KAEhB,GAAA,SAAA,CAAA,CAFgB,sBAEZ,GAFY,EAEQ,GAFR,CAApB;AAGA,IAAA,GAAG,CAAC,SAAJ,EAAc,GAAA,SAAA,CAAA,CAAd,sBAAmB,UAAnB,EAA2C,GAA3C,EAAoD,IAApD,EAA4D,UAA5D,EAA2E,OAA3E;AACD;;AAfgC,CAAnC;AAkBA,OAAA,CAAA,OAAA,GAAe,GAAf","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst codegen_1 = require(\"../../compile/codegen\");\nconst error = {\n    message: ({ schemaCode }) => (0, codegen_1.str) `must be multiple of ${schemaCode}`,\n    params: ({ schemaCode }) => (0, codegen_1._) `{multipleOf: ${schemaCode}}`,\n};\nconst def = {\n    keyword: \"multipleOf\",\n    type: \"number\",\n    schemaType: \"number\",\n    $data: true,\n    error,\n    code(cxt) {\n        const { gen, data, schemaCode, it } = cxt;\n        // const bdt = bad$DataType(schemaCode, <string>def.schemaType, $data)\n        const prec = it.opts.multipleOfPrecision;\n        const res = gen.let(\"res\");\n        const invalid = prec\n            ? (0, codegen_1._) `Math.abs(Math.round(${res}) - ${res}) > 1e-${prec}`\n            : (0, codegen_1._) `${res} !== parseInt(${res})`;\n        cxt.fail$data((0, codegen_1._) `(${schemaCode} === 0 || (${res} = ${data}/${schemaCode}, ${invalid}))`);\n    },\n};\nexports.default = def;\n//# sourceMappingURL=multipleOf.js.map"]},"metadata":{},"sourceType":"script"}