{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/home/aander-cl/Documents/jsonforms/jsonforms-react-seed/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"{propertyName: \", \"}\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar codegen_1 = require(\"../../compile/codegen\");\n\nvar util_1 = require(\"../../compile/util\");\n\nvar error = {\n  message: \"property name must be valid\",\n  params: function params(_ref) {\n    var _params = _ref.params;\n    return (0, codegen_1._)(_templateObject(), _params.propertyName);\n  }\n};\nvar def = {\n  keyword: \"propertyNames\",\n  type: \"object\",\n  schemaType: [\"object\", \"boolean\"],\n  error,\n\n  code(cxt) {\n    var gen = cxt.gen,\n        schema = cxt.schema,\n        data = cxt.data,\n        it = cxt.it;\n    if ((0, util_1.alwaysValidSchema)(it, schema)) return;\n    var valid = gen.name(\"valid\");\n    gen.forIn(\"key\", data, function (key) {\n      cxt.setParams({\n        propertyName: key\n      });\n      cxt.subschema({\n        keyword: \"propertyNames\",\n        data: key,\n        dataTypes: [\"string\"],\n        propertyName: key,\n        compositeRule: true\n      }, valid);\n      gen.if((0, codegen_1.not)(valid), function () {\n        cxt.error(true);\n        if (!it.allErrors) gen.break();\n      });\n    });\n    cxt.ok(valid);\n  }\n\n};\nexports.default = def;","map":{"version":3,"sources":["../../../lib/vocabularies/applicator/propertyNames.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAOA,IAAA,SAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AAIA,IAAM,KAAK,GAA2B;AACpC,EAAA,OAAO,EAAE,6BAD2B;AAEpC,EAAA,MAAM,EAAE;AAAA,QAAE,OAAF,QAAE,MAAF;AAAA,YAAc,GAAA,SAAA,CAAA,CAAd,qBAAiC,OAAM,CAAC,YAAxC;AAAA;AAF4B,CAAtC;AAKA,IAAM,GAAG,GAA0B;AACjC,EAAA,OAAO,EAAE,eADwB;AAEjC,EAAA,IAAI,EAAE,QAF2B;AAGjC,EAAA,UAAU,EAAE,CAAC,QAAD,EAAW,SAAX,CAHqB;AAIjC,EAAA,KAJiC;;AAKjC,EAAA,IAAI,CAAC,GAAD,EAAgB;AAAA,QACX,GADW,GACc,GADd,CACX,GADW;AAAA,QACN,MADM,GACc,GADd,CACN,MADM;AAAA,QACE,IADF,GACc,GADd,CACE,IADF;AAAA,QACQ,EADR,GACc,GADd,CACQ,EADR;AAElB,QAAI,CAAA,GAAA,MAAA,CAAA,iBAAA,EAAkB,EAAlB,EAAsB,MAAtB,CAAJ,EAAmC;AACnC,QAAM,KAAK,GAAG,GAAG,CAAC,IAAJ,CAAS,OAAT,CAAd;AAEA,IAAA,GAAG,CAAC,KAAJ,CAAU,KAAV,EAAiB,IAAjB,EAAuB,UAAC,GAAD,EAAQ;AAC7B,MAAA,GAAG,CAAC,SAAJ,CAAc;AAAC,QAAA,YAAY,EAAE;AAAf,OAAd;AACA,MAAA,GAAG,CAAC,SAAJ,CACE;AACE,QAAA,OAAO,EAAE,eADX;AAEE,QAAA,IAAI,EAAE,GAFR;AAGE,QAAA,SAAS,EAAE,CAAC,QAAD,CAHb;AAIE,QAAA,YAAY,EAAE,GAJhB;AAKE,QAAA,aAAa,EAAE;AALjB,OADF,EAQE,KARF;AAUA,MAAA,GAAG,CAAC,EAAJ,CAAO,CAAA,GAAA,SAAA,CAAA,GAAA,EAAI,KAAJ,CAAP,EAAmB,YAAK;AACtB,QAAA,GAAG,CAAC,KAAJ,CAAU,IAAV;AACA,YAAI,CAAC,EAAE,CAAC,SAAR,EAAmB,GAAG,CAAC,KAAJ;AACpB,OAHD;AAID,KAhBD;AAkBA,IAAA,GAAG,CAAC,EAAJ,CAAO,KAAP;AACD;;AA7BgC,CAAnC;AAgCA,OAAA,CAAA,OAAA,GAAe,GAAf","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst codegen_1 = require(\"../../compile/codegen\");\nconst util_1 = require(\"../../compile/util\");\nconst error = {\n    message: \"property name must be valid\",\n    params: ({ params }) => (0, codegen_1._) `{propertyName: ${params.propertyName}}`,\n};\nconst def = {\n    keyword: \"propertyNames\",\n    type: \"object\",\n    schemaType: [\"object\", \"boolean\"],\n    error,\n    code(cxt) {\n        const { gen, schema, data, it } = cxt;\n        if ((0, util_1.alwaysValidSchema)(it, schema))\n            return;\n        const valid = gen.name(\"valid\");\n        gen.forIn(\"key\", data, (key) => {\n            cxt.setParams({ propertyName: key });\n            cxt.subschema({\n                keyword: \"propertyNames\",\n                data: key,\n                dataTypes: [\"string\"],\n                propertyName: key,\n                compositeRule: true,\n            }, valid);\n            gen.if((0, codegen_1.not)(valid), () => {\n                cxt.error(true);\n                if (!it.allErrors)\n                    gen.break();\n            });\n        });\n        cxt.ok(valid);\n    },\n};\nexports.default = def;\n//# sourceMappingURL=propertyNames.js.map"]},"metadata":{},"sourceType":"script"}