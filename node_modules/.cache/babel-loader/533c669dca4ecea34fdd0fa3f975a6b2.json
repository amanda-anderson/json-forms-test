{"ast":null,"code":"import { Ono as OnoConstructor } from \"./constructor\";\nvar singleton = ono;\nexport { singleton as ono };\nono.error = new OnoConstructor(Error);\nono.eval = new OnoConstructor(EvalError);\nono.range = new OnoConstructor(RangeError);\nono.reference = new OnoConstructor(ReferenceError);\nono.syntax = new OnoConstructor(SyntaxError);\nono.type = new OnoConstructor(TypeError);\nono.uri = new OnoConstructor(URIError);\nvar onoMap = ono;\n/**\n * Creates a new error with the specified message, properties, and/or inner error.\n * If an inner error is provided, then the new error will match its type, if possible.\n */\n\nfunction ono() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var originalError = args[0]; // Is the first argument an Error-like object?\n\n  if (typeof originalError === \"object\" && typeof originalError.name === \"string\") {\n    // Try to find an Ono singleton method that matches this error type\n    for (var _i = 0, _Object$values = Object.values(onoMap); _i < _Object$values.length; _i++) {\n      var typedOno = _Object$values[_i];\n\n      if (typeof typedOno === \"function\" && typedOno.name === \"ono\") {\n        var species = typedOno[Symbol.species];\n\n        if (species && species !== Error && (originalError instanceof species || originalError.name === species.name)) {\n          // Create an error of the same type\n          return typedOno.apply(undefined, args);\n        }\n      }\n    }\n  } // By default, create a base Error object\n\n\n  return ono.error.apply(undefined, args);\n}","map":{"version":3,"sources":["../src/singleton.ts"],"names":[],"mappings":"AACA,SAAS,GAAG,IAAI,cAAhB,QAAsC,eAAtC;AAGA,IAAM,SAAS,GAAG,GAAlB;AACA,SAAS,SAAS,IAAI,GAAtB;AAEA,GAAG,CAAC,KAAJ,GAAY,IAAI,cAAJ,CAAmB,KAAnB,CAAZ;AACA,GAAG,CAAC,IAAJ,GAAW,IAAI,cAAJ,CAAmB,SAAnB,CAAX;AACA,GAAG,CAAC,KAAJ,GAAY,IAAI,cAAJ,CAAmB,UAAnB,CAAZ;AACA,GAAG,CAAC,SAAJ,GAAgB,IAAI,cAAJ,CAAmB,cAAnB,CAAhB;AACA,GAAG,CAAC,MAAJ,GAAa,IAAI,cAAJ,CAAmB,WAAnB,CAAb;AACA,GAAG,CAAC,IAAJ,GAAW,IAAI,cAAJ,CAAmB,SAAnB,CAAX;AACA,GAAG,CAAC,GAAJ,GAAU,IAAI,cAAJ,CAAmB,QAAnB,CAAV;AAEA,IAAM,MAAM,GAAG,GAAf;AAEA;;;AAGG;;AACH,SAAS,GAAT,GAAsE;AAAA,oCAAf,IAAe;AAAf,IAAA,IAAe;AAAA;;AACpE,MAAI,aAAa,GAAG,IAAI,CAAC,CAAD,CAAxB,CADoE,CAGpE;;AACA,MAAI,OAAO,aAAP,KAAyB,QAAzB,IAAqC,OAAO,aAAa,CAAC,IAArB,KAA8B,QAAvE,EAAiF;AAE/E;AACA,sCAAqB,MAAM,CAAC,MAAP,CAAc,MAAd,CAArB,oCAA4C;AAAvC,UAAI,QAAQ,qBAAZ;;AACH,UAAI,OAAO,QAAP,KAAoB,UAApB,IAAkC,QAAQ,CAAC,IAAT,KAAkB,KAAxD,EAA+D;AAC7D,YAAI,OAAO,GAAG,QAAQ,CAAC,MAAM,CAAC,OAAR,CAAtB;;AAEA,YAAI,OAAO,IAAI,OAAO,KAAK,KAAvB,KAAiC,aAAa,YAAY,OAAzB,IAAoC,aAAa,CAAC,IAAd,KAAuB,OAAO,CAAC,IAApG,CAAJ,EAA+G;AAC7G;AACA,iBAAO,QAAQ,CAAC,KAAT,CAAe,SAAf,EAA0B,IAA1B,CAAP;AACD;AACF;AACF;AACF,GAjBmE,CAmBpE;;;AACA,SAAO,GAAG,CAAC,KAAJ,CAAU,KAAV,CAAgB,SAAhB,EAA2B,IAA3B,CAAP;AACD","sourceRoot":"","sourcesContent":["import { Ono as OnoConstructor } from \"./constructor\";\nconst singleton = ono;\nexport { singleton as ono };\nono.error = new OnoConstructor(Error);\nono.eval = new OnoConstructor(EvalError);\nono.range = new OnoConstructor(RangeError);\nono.reference = new OnoConstructor(ReferenceError);\nono.syntax = new OnoConstructor(SyntaxError);\nono.type = new OnoConstructor(TypeError);\nono.uri = new OnoConstructor(URIError);\nconst onoMap = ono;\n/**\n * Creates a new error with the specified message, properties, and/or inner error.\n * If an inner error is provided, then the new error will match its type, if possible.\n */\nfunction ono(...args) {\n    let originalError = args[0];\n    // Is the first argument an Error-like object?\n    if (typeof originalError === \"object\" && typeof originalError.name === \"string\") {\n        // Try to find an Ono singleton method that matches this error type\n        for (let typedOno of Object.values(onoMap)) {\n            if (typeof typedOno === \"function\" && typedOno.name === \"ono\") {\n                let species = typedOno[Symbol.species];\n                if (species && species !== Error && (originalError instanceof species || originalError.name === species.name)) {\n                    // Create an error of the same type\n                    return typedOno.apply(undefined, args);\n                }\n            }\n        }\n    }\n    // By default, create a base Error object\n    return ono.error.apply(undefined, args);\n}\n//# sourceMappingURL=singleton.js.map"]},"metadata":{},"sourceType":"module"}