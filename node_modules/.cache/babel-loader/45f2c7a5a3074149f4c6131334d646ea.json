{"ast":null,"code":"\"use strict\";\n/*\n  The MIT License\n\n  Copyright (c) 2017-2019 EclipseSource Munich\n  https://github.com/eclipsesource/jsonforms\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in\n  all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  THE SOFTWARE.\n*/\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defaultMapDispatchToControlProps = exports.mapDispatchToCellProps = exports.mapStateToOneOfEnumCellProps = exports.defaultMapStateToEnumCellProps = exports.mapStateToDispatchCellProps = exports.mapStateToCellProps = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar isEmpty_1 = tslib_1.__importDefault(require(\"lodash/isEmpty\"));\n\nvar union_1 = tslib_1.__importDefault(require(\"lodash/union\"));\n\nvar reducers_1 = require(\"../reducers\");\n\nvar util_1 = require(\"./util\");\n\nvar runtime_1 = require(\"./runtime\");\n\nvar renderer_1 = require(\"./renderer\");\n\nvar i18n_1 = require(\"../i18n\");\n/**\n * Map state to cell props.\n *\n * @param state JSONForms state tree\n * @param ownProps any own props\n * @returns {StatePropsOfCell} state props of a cell\n */\n\n\nvar mapStateToCellProps = function mapStateToCellProps(state, ownProps) {\n  var id = ownProps.id,\n      schema = ownProps.schema,\n      path = ownProps.path,\n      uischema = ownProps.uischema,\n      renderers = ownProps.renderers,\n      cells = ownProps.cells;\n  var rootData = reducers_1.getData(state);\n  var visible = ownProps.visible !== undefined ? ownProps.visible : runtime_1.isVisible(uischema, rootData, undefined, reducers_1.getAjv(state));\n  var rootSchema = reducers_1.getSchema(state);\n  var config = reducers_1.getConfig(state);\n  /* When determining the enabled state of cells we take a shortcut: At the\n   * moment it's only possible to configure enablement and disablement at the\n   * control level. Therefore the renderer using the cell, for example a\n   * table renderer, determines whether a cell is enabled and should hand\n   * over the prop themselves. If that prop was given, we prefer it over\n   * anything else to save evaluation effort (except for the global readonly\n   * flag). For example it would be quite expensive to evaluate the same ui schema\n   * rule again and again for each cell of a table. */\n\n  var enabled;\n\n  if (state.jsonforms.readonly === true) {\n    enabled = false;\n  } else if (typeof ownProps.enabled === 'boolean') {\n    enabled = ownProps.enabled;\n  } else {\n    enabled = runtime_1.isInherentlyEnabled(state, ownProps, uischema, schema || rootSchema, rootData, config);\n  }\n\n  var errors = util_1.formatErrorMessage(union_1.default(reducers_1.getErrorAt(path, schema)(state).map(function (error) {\n    return error.message;\n  })));\n  var isValid = isEmpty_1.default(errors);\n  return {\n    data: util_1.Resolve.data(rootData, path),\n    visible: visible,\n    enabled: enabled,\n    id: id,\n    path: path,\n    errors: errors,\n    isValid: isValid,\n    schema: schema,\n    uischema: uischema,\n    config: reducers_1.getConfig(state),\n    rootSchema: rootSchema,\n    renderers: renderers,\n    cells: cells\n  };\n};\n\nexports.mapStateToCellProps = mapStateToCellProps;\n\nvar mapStateToDispatchCellProps = function mapStateToDispatchCellProps(state, ownProps) {\n  var props = exports.mapStateToCellProps(state, ownProps);\n\n  var renderers = ownProps.renderers,\n      cells = ownProps.cells,\n      otherOwnProps = tslib_1.__rest(ownProps, [\"renderers\", \"cells\"]);\n\n  return tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, props), otherOwnProps), {\n    cells: cells || state.jsonforms.cells || []\n  });\n};\n\nexports.mapStateToDispatchCellProps = mapStateToDispatchCellProps;\n/**\n * Default mapStateToCellProps for enum cell. Options is used for populating dropdown list\n * @param state\n * @param ownProps\n * @returns {StatePropsOfEnumCell}\n */\n\nvar defaultMapStateToEnumCellProps = function defaultMapStateToEnumCellProps(state, ownProps) {\n  var _a;\n\n  var props = exports.mapStateToCellProps(state, ownProps);\n  var options = ownProps.options || ((_a = props.schema.enum) === null || _a === void 0 ? void 0 : _a.map(function (e) {\n    return renderer_1.enumToEnumOptionMapper(e, reducers_1.getTranslator()(state), i18n_1.getI18nKeyPrefix(props.schema, props.uischema, props.path));\n  })) || props.schema.const && [renderer_1.enumToEnumOptionMapper(props.schema.const, reducers_1.getTranslator()(state), i18n_1.getI18nKeyPrefix(props.schema, props.uischema, props.path))];\n  return tslib_1.__assign(tslib_1.__assign({}, props), {\n    options: options\n  });\n};\n\nexports.defaultMapStateToEnumCellProps = defaultMapStateToEnumCellProps;\n/**\n * mapStateToOneOfEnumCellProps for one of enum cell. Options is used for populating dropdown list from oneOf\n * @param state\n * @param ownProps\n * @returns {StatePropsOfEnumCell}\n */\n\nvar mapStateToOneOfEnumCellProps = function mapStateToOneOfEnumCellProps(state, ownProps) {\n  var _a;\n\n  var props = exports.mapStateToCellProps(state, ownProps);\n  var options = ownProps.options || ((_a = props.schema.oneOf) === null || _a === void 0 ? void 0 : _a.map(function (oneOfSubSchema) {\n    return renderer_1.oneOfToEnumOptionMapper(oneOfSubSchema, reducers_1.getTranslator()(state), i18n_1.getI18nKeyPrefix(props.schema, props.uischema, props.path));\n  }));\n  return tslib_1.__assign(tslib_1.__assign({}, props), {\n    options: options\n  });\n};\n\nexports.mapStateToOneOfEnumCellProps = mapStateToOneOfEnumCellProps;\n/**\n * Synonym for mapDispatchToControlProps.\n *\n * @type {(dispatch) => {handleChange(path, value): void}}\n */\n\nexports.mapDispatchToCellProps = renderer_1.mapDispatchToControlProps;\n/**\n * Default dispatch to control props which can be customized to set handleChange action\n *\n */\n\nvar defaultMapDispatchToControlProps = // TODO: ownProps types\nfunction defaultMapDispatchToControlProps(dispatch, ownProps) {\n  var handleChange = exports.mapDispatchToCellProps(dispatch).handleChange;\n  return {\n    handleChange: ownProps.handleChange || handleChange\n  };\n};\n\nexports.defaultMapDispatchToControlProps = defaultMapDispatchToControlProps;","map":{"version":3,"sources":["../../src/util/cell.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;AAuBE;;;;;;;;;AAEF,IAAA,SAAA,GAAA,OAAA,CAAA,eAAA,CAAA,OAAA,CAAA,gBAAA,CAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,eAAA,CAAA,OAAA,CAAA,cAAA,CAAA,CAAA;;AACA,IAAA,UAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAUA,IAAA,MAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AAIA,IAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AAIA,IAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AAYA,IAAA,MAAA,GAAA,OAAA,CAAA,SAAA,CAAA;AAgDA;;;;;;AAMG;;;AACI,IAAM,mBAAmB,GAAG,SAAtB,mBAAsB,CACjC,KADiC,EAEjC,QAFiC,EAET;AAEhB,MAAA,EAAE,GAA+C,QAAQ,CAAvD,EAAF;AAAA,MAAI,MAAM,GAAuC,QAAQ,CAA/C,MAAV;AAAA,MAAY,IAAI,GAAiC,QAAQ,CAAzC,IAAhB;AAAA,MAAkB,QAAQ,GAAuB,QAAQ,CAA/B,QAA1B;AAAA,MAA4B,SAAS,GAAY,QAAQ,CAApB,SAArC;AAAA,MAAuC,KAAK,GAAK,QAAQ,CAAb,KAA5C;AACR,MAAM,QAAQ,GAAG,UAAA,CAAA,OAAA,CAAQ,KAAR,CAAjB;AACA,MAAM,OAAO,GACX,QAAQ,CAAC,OAAT,KAAqB,SAArB,GACI,QAAQ,CAAC,OADb,GAEI,SAAA,CAAA,SAAA,CAAU,QAAV,EAAoB,QAApB,EAA8B,SAA9B,EAAyC,UAAA,CAAA,MAAA,CAAO,KAAP,CAAzC,CAHN;AAKA,MAAM,UAAU,GAAG,UAAA,CAAA,SAAA,CAAU,KAAV,CAAnB;AACA,MAAM,MAAM,GAAG,UAAA,CAAA,SAAA,CAAU,KAAV,CAAf;AAEA;;;;;;;AAOoD;;AACpD,MAAI,OAAJ;;AACA,MAAI,KAAK,CAAC,SAAN,CAAgB,QAAhB,KAA6B,IAAjC,EAAuC;AACrC,IAAA,OAAO,GAAG,KAAV;AACD,GAFD,MAEO,IAAI,OAAO,QAAQ,CAAC,OAAhB,KAA4B,SAAhC,EAA2C;AAChD,IAAA,OAAO,GAAG,QAAQ,CAAC,OAAnB;AACD,GAFM,MAEA;AACL,IAAA,OAAO,GAAG,SAAA,CAAA,mBAAA,CACR,KADQ,EAER,QAFQ,EAGR,QAHQ,EAIR,MAAM,IAAI,UAJF,EAKR,QALQ,EAMR,MANQ,CAAV;AAQD;;AAED,MAAM,MAAM,GAAG,MAAA,CAAA,kBAAA,CACb,OAAA,CAAA,OAAA,CAAM,UAAA,CAAA,UAAA,CAAW,IAAX,EAAiB,MAAjB,EAAyB,KAAzB,EAAgC,GAAhC,CAAoC,UAAA,KAAA,EAAK;AAAI,WAAA,KAAK,CAAL,OAAA;AAAa,GAA1D,CAAN,CADa,CAAf;AAGA,MAAM,OAAO,GAAG,SAAA,CAAA,OAAA,CAAQ,MAAR,CAAhB;AAEA,SAAO;AACL,IAAA,IAAI,EAAE,MAAA,CAAA,OAAA,CAAQ,IAAR,CAAa,QAAb,EAAuB,IAAvB,CADD;AAEL,IAAA,OAAO,EAAA,OAFF;AAGL,IAAA,OAAO,EAAA,OAHF;AAIL,IAAA,EAAE,EAAA,EAJG;AAKL,IAAA,IAAI,EAAA,IALC;AAML,IAAA,MAAM,EAAA,MAND;AAOL,IAAA,OAAO,EAAA,OAPF;AAQL,IAAA,MAAM,EAAA,MARD;AASL,IAAA,QAAQ,EAAA,QATH;AAUL,IAAA,MAAM,EAAE,UAAA,CAAA,SAAA,CAAU,KAAV,CAVH;AAWL,IAAA,UAAU,EAAA,UAXL;AAYL,IAAA,SAAS,EAAA,SAZJ;AAaL,IAAA,KAAK,EAAA;AAbA,GAAP;AAeD,CA1DM;;AAAM,OAAA,CAAA,mBAAA,GAAmB,mBAAnB;;AA4DN,IAAM,2BAA2B,GAAG,SAA9B,2BAA8B,CACzC,KADyC,EAEzC,QAFyC,EAEjB;AAExB,MAAM,KAAK,GAAqB,OAAA,CAAA,mBAAA,CAAoB,KAApB,EAA2B,QAA3B,CAAhC;;AACQ,MAAA,SAAS,GAA8B,QAAQ,CAAtC,SAAT;AAAA,MAAW,KAAK,GAAuB,QAAQ,CAA/B,KAAhB;AAAA,MAAqB,aAAa,GAAA,OAAA,CAAA,MAAA,CAAK,QAAL,EAApC,CAAA,WAAA,EAAA,OAAA,CAAoC,CAAlC;;AACR,SAAA,OAAA,CAAA,QAAA,CAAA,OAAA,CAAA,QAAA,CAAA,OAAA,CAAA,QAAA,CAAA,EAAA,EACK,KADL,CAAA,EAEK,aAFL,CAAA,EAEkB;AAChB,IAAA,KAAK,EAAE,KAAK,IAAI,KAAK,CAAC,SAAN,CAAgB,KAAzB,IAAkC;AADzB,GAFlB,CAAA;AAKD,CAXM;;AAAM,OAAA,CAAA,2BAAA,GAA2B,2BAA3B;AAeb;;;;;AAKG;;AACI,IAAM,8BAA8B,GAAG,SAAjC,8BAAiC,CAC5C,KAD4C,EAE5C,QAF4C,EAEhB;;;AAE5B,MAAM,KAAK,GAAqB,OAAA,CAAA,mBAAA,CAAoB,KAApB,EAA2B,QAA3B,CAAhC;AACA,MAAM,OAAO,GACX,QAAQ,CAAC,OAAT,KACA,CAAA,EAAA,GAAA,KAAK,CAAC,MAAN,CAAa,IAAb,MAAiB,IAAjB,IAAiB,EAAA,KAAA,KAAA,CAAjB,GAAiB,KAAA,CAAjB,GAAiB,EAAA,CAAE,GAAF,CAAM,UAAA,CAAA,EAAC;AACtB,WAAA,UAAA,CAAA,sBAAA,CACE,CADF,EAEE,UAAA,CAAA,aAAA,GAAgB,KAAhB,CAFF,EAGE,MAAA,CAAA,gBAAA,CAAiB,KAAK,CAAC,MAAvB,EAA+B,KAAK,CAAC,QAArC,EAA+C,KAAK,CAAC,IAArD,CAHF,CAAA;AAIC,GALc,CADjB,KAQC,KAAK,CAAC,MAAN,CAAa,KAAb,IAAsB,CACrB,UAAA,CAAA,sBAAA,CACE,KAAK,CAAC,MAAN,CAAa,KADf,EAEE,UAAA,CAAA,aAAA,GAAgB,KAAhB,CAFF,EAGE,MAAA,CAAA,gBAAA,CAAiB,KAAK,CAAC,MAAvB,EAA+B,KAAK,CAAC,QAArC,EAA+C,KAAK,CAAC,IAArD,CAHF,CADqB,CATzB;AAgBA,SAAA,OAAA,CAAA,QAAA,CAAA,OAAA,CAAA,QAAA,CAAA,EAAA,EACK,KADL,CAAA,EACU;AACR,IAAA,OAAO,EAAA;AADC,GADV,CAAA;AAID,CAzBM;;AAAM,OAAA,CAAA,8BAAA,GAA8B,8BAA9B;AA2Bb;;;;;AAKG;;AACI,IAAM,4BAA4B,GAAG,SAA/B,4BAA+B,CAC1C,KAD0C,EAE1C,QAF0C,EAEd;;;AAE5B,MAAM,KAAK,GAAqB,OAAA,CAAA,mBAAA,CAAoB,KAApB,EAA2B,QAA3B,CAAhC;AACA,MAAM,OAAO,GACX,QAAQ,CAAC,OAAT,KACA,CAAA,EAAA,GAAC,KAAK,CAAC,MAAN,CAAa,KAAd,MAAoC,IAApC,IAAoC,EAAA,KAAA,KAAA,CAApC,GAAoC,KAAA,CAApC,GAAoC,EAAA,CAAE,GAAF,CAAM,UAAA,cAAA,EAAc;AACtD,WAAA,UAAA,CAAA,uBAAA,CACE,cADF,EAEE,UAAA,CAAA,aAAA,GAAgB,KAAhB,CAFF,EAGE,MAAA,CAAA,gBAAA,CAAiB,KAAK,CAAC,MAAvB,EAA+B,KAAK,CAAC,QAArC,EAA+C,KAAK,CAAC,IAArD,CAHF,CAAA;AAIC,GALiC,CADpC,CADF;AASA,SAAA,OAAA,CAAA,QAAA,CAAA,OAAA,CAAA,QAAA,CAAA,EAAA,EACK,KADL,CAAA,EACU;AACR,IAAA,OAAO,EAAA;AADC,GADV,CAAA;AAID,CAlBM;;AAAM,OAAA,CAAA,4BAAA,GAA4B,4BAA5B;AAqBb;;;;AAIG;;AACU,OAAA,CAAA,sBAAA,GAEiB,UAAA,CAAA,yBAFjB;AAIb;;;AAGG;;AACI,IAAM,gCAAgC,GAC3C;AACA,SAFW,gCAEX,CAAC,QAAD,EAAgC,QAAhC,EAA6C;AACnC,MAAA,YAAY,GAAK,OAAA,CAAA,sBAAA,CAAuB,QAAvB,EAAL,YAAZ;AAER,SAAO;AACL,IAAA,YAAY,EAAE,QAAQ,CAAC,YAAT,IAAyB;AADlC,GAAP;AAGD,CARI;;AAAM,OAAA,CAAA,gCAAA,GAAgC,gCAAhC","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n  The MIT License\n\n  Copyright (c) 2017-2019 EclipseSource Munich\n  https://github.com/eclipsesource/jsonforms\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in\n  all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  THE SOFTWARE.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.defaultMapDispatchToControlProps = exports.mapDispatchToCellProps = exports.mapStateToOneOfEnumCellProps = exports.defaultMapStateToEnumCellProps = exports.mapStateToDispatchCellProps = exports.mapStateToCellProps = void 0;\nvar tslib_1 = require(\"tslib\");\nvar isEmpty_1 = tslib_1.__importDefault(require(\"lodash/isEmpty\"));\nvar union_1 = tslib_1.__importDefault(require(\"lodash/union\"));\nvar reducers_1 = require(\"../reducers\");\nvar util_1 = require(\"./util\");\nvar runtime_1 = require(\"./runtime\");\nvar renderer_1 = require(\"./renderer\");\nvar i18n_1 = require(\"../i18n\");\n/**\n * Map state to cell props.\n *\n * @param state JSONForms state tree\n * @param ownProps any own props\n * @returns {StatePropsOfCell} state props of a cell\n */\nvar mapStateToCellProps = function (state, ownProps) {\n    var id = ownProps.id, schema = ownProps.schema, path = ownProps.path, uischema = ownProps.uischema, renderers = ownProps.renderers, cells = ownProps.cells;\n    var rootData = reducers_1.getData(state);\n    var visible = ownProps.visible !== undefined\n        ? ownProps.visible\n        : runtime_1.isVisible(uischema, rootData, undefined, reducers_1.getAjv(state));\n    var rootSchema = reducers_1.getSchema(state);\n    var config = reducers_1.getConfig(state);\n    /* When determining the enabled state of cells we take a shortcut: At the\n     * moment it's only possible to configure enablement and disablement at the\n     * control level. Therefore the renderer using the cell, for example a\n     * table renderer, determines whether a cell is enabled and should hand\n     * over the prop themselves. If that prop was given, we prefer it over\n     * anything else to save evaluation effort (except for the global readonly\n     * flag). For example it would be quite expensive to evaluate the same ui schema\n     * rule again and again for each cell of a table. */\n    var enabled;\n    if (state.jsonforms.readonly === true) {\n        enabled = false;\n    }\n    else if (typeof ownProps.enabled === 'boolean') {\n        enabled = ownProps.enabled;\n    }\n    else {\n        enabled = runtime_1.isInherentlyEnabled(state, ownProps, uischema, schema || rootSchema, rootData, config);\n    }\n    var errors = util_1.formatErrorMessage(union_1.default(reducers_1.getErrorAt(path, schema)(state).map(function (error) { return error.message; })));\n    var isValid = isEmpty_1.default(errors);\n    return {\n        data: util_1.Resolve.data(rootData, path),\n        visible: visible,\n        enabled: enabled,\n        id: id,\n        path: path,\n        errors: errors,\n        isValid: isValid,\n        schema: schema,\n        uischema: uischema,\n        config: reducers_1.getConfig(state),\n        rootSchema: rootSchema,\n        renderers: renderers,\n        cells: cells\n    };\n};\nexports.mapStateToCellProps = mapStateToCellProps;\nvar mapStateToDispatchCellProps = function (state, ownProps) {\n    var props = exports.mapStateToCellProps(state, ownProps);\n    var renderers = ownProps.renderers, cells = ownProps.cells, otherOwnProps = tslib_1.__rest(ownProps, [\"renderers\", \"cells\"]);\n    return tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, props), otherOwnProps), { cells: cells || state.jsonforms.cells || [] });\n};\nexports.mapStateToDispatchCellProps = mapStateToDispatchCellProps;\n/**\n * Default mapStateToCellProps for enum cell. Options is used for populating dropdown list\n * @param state\n * @param ownProps\n * @returns {StatePropsOfEnumCell}\n */\nvar defaultMapStateToEnumCellProps = function (state, ownProps) {\n    var _a;\n    var props = exports.mapStateToCellProps(state, ownProps);\n    var options = ownProps.options ||\n        ((_a = props.schema.enum) === null || _a === void 0 ? void 0 : _a.map(function (e) {\n            return renderer_1.enumToEnumOptionMapper(e, reducers_1.getTranslator()(state), i18n_1.getI18nKeyPrefix(props.schema, props.uischema, props.path));\n        })) ||\n        (props.schema.const && [\n            renderer_1.enumToEnumOptionMapper(props.schema.const, reducers_1.getTranslator()(state), i18n_1.getI18nKeyPrefix(props.schema, props.uischema, props.path))\n        ]);\n    return tslib_1.__assign(tslib_1.__assign({}, props), { options: options });\n};\nexports.defaultMapStateToEnumCellProps = defaultMapStateToEnumCellProps;\n/**\n * mapStateToOneOfEnumCellProps for one of enum cell. Options is used for populating dropdown list from oneOf\n * @param state\n * @param ownProps\n * @returns {StatePropsOfEnumCell}\n */\nvar mapStateToOneOfEnumCellProps = function (state, ownProps) {\n    var _a;\n    var props = exports.mapStateToCellProps(state, ownProps);\n    var options = ownProps.options ||\n        ((_a = props.schema.oneOf) === null || _a === void 0 ? void 0 : _a.map(function (oneOfSubSchema) {\n            return renderer_1.oneOfToEnumOptionMapper(oneOfSubSchema, reducers_1.getTranslator()(state), i18n_1.getI18nKeyPrefix(props.schema, props.uischema, props.path));\n        }));\n    return tslib_1.__assign(tslib_1.__assign({}, props), { options: options });\n};\nexports.mapStateToOneOfEnumCellProps = mapStateToOneOfEnumCellProps;\n/**\n * Synonym for mapDispatchToControlProps.\n *\n * @type {(dispatch) => {handleChange(path, value): void}}\n */\nexports.mapDispatchToCellProps = renderer_1.mapDispatchToControlProps;\n/**\n * Default dispatch to control props which can be customized to set handleChange action\n *\n */\nvar defaultMapDispatchToControlProps = \n// TODO: ownProps types\nfunction (dispatch, ownProps) {\n    var handleChange = exports.mapDispatchToCellProps(dispatch).handleChange;\n    return {\n        handleChange: ownProps.handleChange || handleChange\n    };\n};\nexports.defaultMapDispatchToControlProps = defaultMapDispatchToControlProps;\n//# sourceMappingURL=cell.js.map"]},"metadata":{},"sourceType":"script"}