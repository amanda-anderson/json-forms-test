{"ast":null,"code":"\"use strict\";\n/*\n  The MIT License\n  \n  Copyright (c) 2017-2019 EclipseSource Munich\n  https://github.com/eclipsesource/jsonforms\n  \n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n  \n  The above copyright notice and this permission notice shall be included in\n  all copies or substantial portions of the Software.\n  \n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  THE SOFTWARE.\n*/\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.composeWithUi = exports.toDataPath = exports.toDataPathSegments = exports.composePaths = exports.compose = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar isEmpty_1 = tslib_1.__importDefault(require(\"lodash/isEmpty\"));\n\nvar range_1 = tslib_1.__importDefault(require(\"lodash/range\"));\n\nvar compose = function compose(path1, path2) {\n  var p1 = path1;\n\n  if (!isEmpty_1.default(path1) && !isEmpty_1.default(path2) && !path2.startsWith('[')) {\n    p1 = path1 + '.';\n  }\n\n  if (isEmpty_1.default(p1)) {\n    return path2;\n  } else if (isEmpty_1.default(path2)) {\n    return p1;\n  } else {\n    return \"\" + p1 + path2;\n  }\n};\n\nexports.compose = compose;\nexports.composePaths = exports.compose;\n/**\n * Convert a schema path (i.e. JSON pointer) to an array by splitting\n * at the '/' character and removing all schema-specific keywords.\n *\n * The returned value can be used to de-reference a root object by folding over it\n * and de-referencing the single segments to obtain a new object.\n *\n *\n * @param {string} schemaPath the schema path to be converted\n * @returns {string[]} an array containing only non-schema-specific segments\n */\n\nvar toDataPathSegments = function toDataPathSegments(schemaPath) {\n  var s = schemaPath.replace(/anyOf\\/[\\d]\\//g, '').replace(/allOf\\/[\\d]\\//g, '').replace(/oneOf\\/[\\d]\\//g, '');\n  var segments = s.split('/');\n  var startFromRoot = segments[0] === '#' || segments[0] === '';\n  var startIndex = startFromRoot ? 2 : 1;\n  return range_1.default(startIndex, segments.length, 2).map(function (idx) {\n    return segments[idx];\n  });\n};\n\nexports.toDataPathSegments = toDataPathSegments;\n/**\n * Remove all schema-specific keywords (e.g. 'properties') from a given path.\n * @example\n * toDataPath('#/properties/foo/properties/bar') === '#/foo/bar')\n *\n * @param {string} schemaPath the schema path to be converted\n * @returns {string} the path without schema-specific keywords\n */\n\nvar toDataPath = function toDataPath(schemaPath) {\n  return exports.toDataPathSegments(schemaPath).join('.');\n};\n\nexports.toDataPath = toDataPath;\n\nvar composeWithUi = function composeWithUi(scopableUi, path) {\n  var segments = exports.toDataPathSegments(scopableUi.scope);\n\n  if (isEmpty_1.default(segments) && path === undefined) {\n    return '';\n  }\n\n  return isEmpty_1.default(segments) ? path : exports.compose(path, segments.join('.'));\n};\n\nexports.composeWithUi = composeWithUi;","map":{"version":3,"sources":["../../src/util/path.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;AAuBE;;;;;;;;;AAEF,IAAA,SAAA,GAAA,OAAA,CAAA,eAAA,CAAA,OAAA,CAAA,gBAAA,CAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,eAAA,CAAA,OAAA,CAAA,cAAA,CAAA,CAAA;;AAGO,IAAM,OAAO,GAAG,SAAV,OAAU,CAAC,KAAD,EAAgB,KAAhB,EAA6B;AAClD,MAAI,EAAE,GAAG,KAAT;;AACA,MAAI,CAAC,SAAA,CAAA,OAAA,CAAQ,KAAR,CAAD,IAAmB,CAAC,SAAA,CAAA,OAAA,CAAQ,KAAR,CAApB,IAAsC,CAAC,KAAK,CAAC,UAAN,CAAiB,GAAjB,CAA3C,EAAkE;AAChE,IAAA,EAAE,GAAG,KAAK,GAAG,GAAb;AACD;;AAED,MAAI,SAAA,CAAA,OAAA,CAAQ,EAAR,CAAJ,EAAiB;AACf,WAAO,KAAP;AACD,GAFD,MAEO,IAAI,SAAA,CAAA,OAAA,CAAQ,KAAR,CAAJ,EAAoB;AACzB,WAAO,EAAP;AACD,GAFM,MAEA;AACL,WAAO,KAAG,EAAH,GAAQ,KAAf;AACD;AACF,CAbM;;AAAM,OAAA,CAAA,OAAA,GAAO,OAAP;AAeO,OAAA,CAAA,YAAA,GAfP,OAAA,CAAA,OAeO;AAEpB;;;;;;;;;;AAUG;;AACI,IAAM,kBAAkB,GAAG,SAArB,kBAAqB,CAAC,UAAD,EAAmB;AACnD,MAAM,CAAC,GAAG,UAAU,CACjB,OADO,CACC,gBADD,EACmB,EADnB,EAEP,OAFO,CAEC,gBAFD,EAEmB,EAFnB,EAGP,OAHO,CAGC,gBAHD,EAGmB,EAHnB,CAAV;AAIA,MAAM,QAAQ,GAAG,CAAC,CAAC,KAAF,CAAQ,GAAR,CAAjB;AAEA,MAAM,aAAa,GAAG,QAAQ,CAAC,CAAD,CAAR,KAAgB,GAAhB,IAAuB,QAAQ,CAAC,CAAD,CAAR,KAAgB,EAA7D;AACA,MAAM,UAAU,GAAG,aAAa,GAAG,CAAH,GAAO,CAAvC;AACA,SAAO,OAAA,CAAA,OAAA,CAAM,UAAN,EAAkB,QAAQ,CAAC,MAA3B,EAAmC,CAAnC,EAAsC,GAAtC,CAA0C,UAAA,GAAA,EAAG;AAAI,WAAA,QAAQ,CAAR,GAAQ,CAAR;AAAa,GAA9D,CAAP;AACD,CAVM;;AAAM,OAAA,CAAA,kBAAA,GAAkB,kBAAlB;AAYb;;;;;;;AAOG;;AACI,IAAM,UAAU,GAAG,SAAb,UAAa,CAAC,UAAD,EAAmB;AAC3C,SAAO,OAAA,CAAA,kBAAA,CAAmB,UAAnB,EAA+B,IAA/B,CAAoC,GAApC,CAAP;AACD,CAFM;;AAAM,OAAA,CAAA,UAAA,GAAU,UAAV;;AAIN,IAAM,aAAa,GAAG,SAAhB,aAAgB,CAAC,UAAD,EAAuB,IAAvB,EAAmC;AAC9D,MAAM,QAAQ,GAAG,OAAA,CAAA,kBAAA,CAAmB,UAAU,CAAC,KAA9B,CAAjB;;AAEA,MAAI,SAAA,CAAA,OAAA,CAAQ,QAAR,KAAqB,IAAI,KAAK,SAAlC,EAA6C;AAC3C,WAAO,EAAP;AACD;;AAED,SAAO,SAAA,CAAA,OAAA,CAAQ,QAAR,IAAoB,IAApB,GAA2B,OAAA,CAAA,OAAA,CAAQ,IAAR,EAAc,QAAQ,CAAC,IAAT,CAAc,GAAd,CAAd,CAAlC;AACD,CARM;;AAAM,OAAA,CAAA,aAAA,GAAa,aAAb","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n  The MIT License\n  \n  Copyright (c) 2017-2019 EclipseSource Munich\n  https://github.com/eclipsesource/jsonforms\n  \n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n  \n  The above copyright notice and this permission notice shall be included in\n  all copies or substantial portions of the Software.\n  \n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  THE SOFTWARE.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.composeWithUi = exports.toDataPath = exports.toDataPathSegments = exports.composePaths = exports.compose = void 0;\nvar tslib_1 = require(\"tslib\");\nvar isEmpty_1 = tslib_1.__importDefault(require(\"lodash/isEmpty\"));\nvar range_1 = tslib_1.__importDefault(require(\"lodash/range\"));\nvar compose = function (path1, path2) {\n    var p1 = path1;\n    if (!isEmpty_1.default(path1) && !isEmpty_1.default(path2) && !path2.startsWith('[')) {\n        p1 = path1 + '.';\n    }\n    if (isEmpty_1.default(p1)) {\n        return path2;\n    }\n    else if (isEmpty_1.default(path2)) {\n        return p1;\n    }\n    else {\n        return \"\" + p1 + path2;\n    }\n};\nexports.compose = compose;\nexports.composePaths = exports.compose;\n/**\n * Convert a schema path (i.e. JSON pointer) to an array by splitting\n * at the '/' character and removing all schema-specific keywords.\n *\n * The returned value can be used to de-reference a root object by folding over it\n * and de-referencing the single segments to obtain a new object.\n *\n *\n * @param {string} schemaPath the schema path to be converted\n * @returns {string[]} an array containing only non-schema-specific segments\n */\nvar toDataPathSegments = function (schemaPath) {\n    var s = schemaPath\n        .replace(/anyOf\\/[\\d]\\//g, '')\n        .replace(/allOf\\/[\\d]\\//g, '')\n        .replace(/oneOf\\/[\\d]\\//g, '');\n    var segments = s.split('/');\n    var startFromRoot = segments[0] === '#' || segments[0] === '';\n    var startIndex = startFromRoot ? 2 : 1;\n    return range_1.default(startIndex, segments.length, 2).map(function (idx) { return segments[idx]; });\n};\nexports.toDataPathSegments = toDataPathSegments;\n/**\n * Remove all schema-specific keywords (e.g. 'properties') from a given path.\n * @example\n * toDataPath('#/properties/foo/properties/bar') === '#/foo/bar')\n *\n * @param {string} schemaPath the schema path to be converted\n * @returns {string} the path without schema-specific keywords\n */\nvar toDataPath = function (schemaPath) {\n    return exports.toDataPathSegments(schemaPath).join('.');\n};\nexports.toDataPath = toDataPath;\nvar composeWithUi = function (scopableUi, path) {\n    var segments = exports.toDataPathSegments(scopableUi.scope);\n    if (isEmpty_1.default(segments) && path === undefined) {\n        return '';\n    }\n    return isEmpty_1.default(segments) ? path : exports.compose(path, segments.join('.'));\n};\nexports.composeWithUi = composeWithUi;\n//# sourceMappingURL=path.js.map"]},"metadata":{},"sourceType":"script"}