{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/home/aander-cl/Documents/jsonforms/jsonforms-react-seed/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _taggedTemplateLiteral = require(\"/home/aander-cl/Documents/jsonforms/jsonforms-react-seed/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nfunction _templateObject17() {\n  var data = _taggedTemplateLiteral([\"\", \".test(\", \")\"]);\n\n  _templateObject17 = function _templateObject17() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject16() {\n  var data = _taggedTemplateLiteral([\"\", \"(\", \")\"]);\n\n  _templateObject16 = function _templateObject16() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject15() {\n  var data = _taggedTemplateLiteral([\"await \", \"(\", \")\"]);\n\n  _templateObject15 = function _templateObject15() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject14() {\n  var data = _taggedTemplateLiteral([\"\", \".validate\"]);\n\n  _templateObject14 = function _templateObject14() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject13() {\n  var data = _taggedTemplateLiteral([\"\", \"\", \"\"]);\n\n  _templateObject13 = function _templateObject13() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject12() {\n  var data = _taggedTemplateLiteral([\"\", \" && \", \" !== true && \", \" === \", \" && !\", \"\"]);\n\n  _templateObject12 = function _templateObject12() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject11() {\n  var data = _taggedTemplateLiteral([\"(typeof \", \" == \\\"function\\\" ? \", \" : \", \".test(\", \"))\"]);\n\n  _templateObject11 = function _templateObject11() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject10() {\n  var data = _taggedTemplateLiteral([\"\", \"(\", \")\"]);\n\n  _templateObject10 = function _templateObject10() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject9() {\n  var data = _taggedTemplateLiteral([\"(\", \".async ? await \", \"(\", \") : \", \"(\", \"))\"]);\n\n  _templateObject9 = function _templateObject9() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject8() {\n  var data = _taggedTemplateLiteral([\"\", \" && !\", \"\"]);\n\n  _templateObject8 = function _templateObject8() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject7() {\n  var data = _taggedTemplateLiteral([\"\\\"string\\\"\"]);\n\n  _templateObject7 = function _templateObject7() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject6() {\n  var data = _taggedTemplateLiteral([\"\", \".validate\"]);\n\n  _templateObject6 = function _templateObject6() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\", \".type || \\\"string\\\"\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"typeof \", \" == \\\"object\\\" && !(\", \" instanceof RegExp)\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\", \"[\", \"]\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"{format: \", \"}\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"must match format \\\"\", \"\\\"\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar codegen_1 = require(\"../../compile/codegen\");\n\nvar error = {\n  message: function message(_ref) {\n    var schemaCode = _ref.schemaCode;\n    return (0, codegen_1.str)(_templateObject(), schemaCode);\n  },\n  params: function params(_ref2) {\n    var schemaCode = _ref2.schemaCode;\n    return (0, codegen_1._)(_templateObject2(), schemaCode);\n  }\n};\nvar def = {\n  keyword: \"format\",\n  type: [\"number\", \"string\"],\n  schemaType: \"string\",\n  $data: true,\n  error,\n\n  code(cxt, ruleType) {\n    var gen = cxt.gen,\n        data = cxt.data,\n        $data = cxt.$data,\n        schema = cxt.schema,\n        schemaCode = cxt.schemaCode,\n        it = cxt.it;\n    var opts = it.opts,\n        errSchemaPath = it.errSchemaPath,\n        schemaEnv = it.schemaEnv,\n        self = it.self;\n    if (!opts.validateFormats) return;\n    if ($data) validate$DataFormat();else validateFormat();\n\n    function validate$DataFormat() {\n      var fmts = gen.scopeValue(\"formats\", {\n        ref: self.formats,\n        code: opts.code.formats\n      });\n      var fDef = gen.const(\"fDef\", (0, codegen_1._)(_templateObject3(), fmts, schemaCode));\n      var fType = gen.let(\"fType\");\n      var format = gen.let(\"format\"); // TODO simplify\n\n      gen.if((0, codegen_1._)(_templateObject4(), fDef, fDef), function () {\n        return gen.assign(fType, (0, codegen_1._)(_templateObject5(), fDef)).assign(format, (0, codegen_1._)(_templateObject6(), fDef));\n      }, function () {\n        return gen.assign(fType, (0, codegen_1._)(_templateObject7())).assign(format, fDef);\n      });\n      cxt.fail$data((0, codegen_1.or)(unknownFmt(), invalidFmt()));\n\n      function unknownFmt() {\n        if (opts.strictSchema === false) return codegen_1.nil;\n        return (0, codegen_1._)(_templateObject8(), schemaCode, format);\n      }\n\n      function invalidFmt() {\n        var callFormat = schemaEnv.$async ? (0, codegen_1._)(_templateObject9(), fDef, format, data, format, data) : (0, codegen_1._)(_templateObject10(), format, data);\n        var validData = (0, codegen_1._)(_templateObject11(), format, callFormat, format, data);\n        return (0, codegen_1._)(_templateObject12(), format, format, fType, ruleType, validData);\n      }\n    }\n\n    function validateFormat() {\n      var formatDef = self.formats[schema];\n\n      if (!formatDef) {\n        unknownFormat();\n        return;\n      }\n\n      if (formatDef === true) return;\n\n      var _getFormat = getFormat(formatDef),\n          _getFormat2 = _slicedToArray(_getFormat, 3),\n          fmtType = _getFormat2[0],\n          format = _getFormat2[1],\n          fmtRef = _getFormat2[2];\n\n      if (fmtType === ruleType) cxt.pass(validCondition());\n\n      function unknownFormat() {\n        if (opts.strictSchema === false) {\n          self.logger.warn(unknownMsg());\n          return;\n        }\n\n        throw new Error(unknownMsg());\n\n        function unknownMsg() {\n          return \"unknown format \\\"\".concat(schema, \"\\\" ignored in schema at path \\\"\").concat(errSchemaPath, \"\\\"\");\n        }\n      }\n\n      function getFormat(fmtDef) {\n        var code = fmtDef instanceof RegExp ? (0, codegen_1.regexpCode)(fmtDef) : opts.code.formats ? (0, codegen_1._)(_templateObject13(), opts.code.formats, (0, codegen_1.getProperty)(schema)) : undefined;\n        var fmt = gen.scopeValue(\"formats\", {\n          key: schema,\n          ref: fmtDef,\n          code\n        });\n\n        if (typeof fmtDef == \"object\" && !(fmtDef instanceof RegExp)) {\n          return [fmtDef.type || \"string\", fmtDef.validate, (0, codegen_1._)(_templateObject14(), fmt)];\n        }\n\n        return [\"string\", fmtDef, fmt];\n      }\n\n      function validCondition() {\n        if (typeof formatDef == \"object\" && !(formatDef instanceof RegExp) && formatDef.async) {\n          if (!schemaEnv.$async) throw new Error(\"async format in sync schema\");\n          return (0, codegen_1._)(_templateObject15(), fmtRef, data);\n        }\n\n        return typeof format == \"function\" ? (0, codegen_1._)(_templateObject16(), fmtRef, data) : (0, codegen_1._)(_templateObject17(), fmtRef, data);\n      }\n    }\n  }\n\n};\nexports.default = def;","map":{"version":3,"sources":["../../../lib/vocabularies/format/format.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst codegen_1 = require(\"../../compile/codegen\");\nconst error = {\n    message: ({ schemaCode }) => (0, codegen_1.str) `must match format \"${schemaCode}\"`,\n    params: ({ schemaCode }) => (0, codegen_1._) `{format: ${schemaCode}}`,\n};\nconst def = {\n    keyword: \"format\",\n    type: [\"number\", \"string\"],\n    schemaType: \"string\",\n    $data: true,\n    error,\n    code(cxt, ruleType) {\n        const { gen, data, $data, schema, schemaCode, it } = cxt;\n        const { opts, errSchemaPath, schemaEnv, self } = it;\n        if (!opts.validateFormats)\n            return;\n        if ($data)\n            validate$DataFormat();\n        else\n            validateFormat();\n        function validate$DataFormat() {\n            const fmts = gen.scopeValue(\"formats\", {\n                ref: self.formats,\n                code: opts.code.formats,\n            });\n            const fDef = gen.const(\"fDef\", (0, codegen_1._) `${fmts}[${schemaCode}]`);\n            const fType = gen.let(\"fType\");\n            const format = gen.let(\"format\");\n            // TODO simplify\n            gen.if((0, codegen_1._) `typeof ${fDef} == \"object\" && !(${fDef} instanceof RegExp)`, () => gen.assign(fType, (0, codegen_1._) `${fDef}.type || \"string\"`).assign(format, (0, codegen_1._) `${fDef}.validate`), () => gen.assign(fType, (0, codegen_1._) `\"string\"`).assign(format, fDef));\n            cxt.fail$data((0, codegen_1.or)(unknownFmt(), invalidFmt()));\n            function unknownFmt() {\n                if (opts.strictSchema === false)\n                    return codegen_1.nil;\n                return (0, codegen_1._) `${schemaCode} && !${format}`;\n            }\n            function invalidFmt() {\n                const callFormat = schemaEnv.$async\n                    ? (0, codegen_1._) `(${fDef}.async ? await ${format}(${data}) : ${format}(${data}))`\n                    : (0, codegen_1._) `${format}(${data})`;\n                const validData = (0, codegen_1._) `(typeof ${format} == \"function\" ? ${callFormat} : ${format}.test(${data}))`;\n                return (0, codegen_1._) `${format} && ${format} !== true && ${fType} === ${ruleType} && !${validData}`;\n            }\n        }\n        function validateFormat() {\n            const formatDef = self.formats[schema];\n            if (!formatDef) {\n                unknownFormat();\n                return;\n            }\n            if (formatDef === true)\n                return;\n            const [fmtType, format, fmtRef] = getFormat(formatDef);\n            if (fmtType === ruleType)\n                cxt.pass(validCondition());\n            function unknownFormat() {\n                if (opts.strictSchema === false) {\n                    self.logger.warn(unknownMsg());\n                    return;\n                }\n                throw new Error(unknownMsg());\n                function unknownMsg() {\n                    return `unknown format \"${schema}\" ignored in schema at path \"${errSchemaPath}\"`;\n                }\n            }\n            function getFormat(fmtDef) {\n                const code = fmtDef instanceof RegExp\n                    ? (0, codegen_1.regexpCode)(fmtDef)\n                    : opts.code.formats\n                        ? (0, codegen_1._) `${opts.code.formats}${(0, codegen_1.getProperty)(schema)}`\n                        : undefined;\n                const fmt = gen.scopeValue(\"formats\", { key: schema, ref: fmtDef, code });\n                if (typeof fmtDef == \"object\" && !(fmtDef instanceof RegExp)) {\n                    return [fmtDef.type || \"string\", fmtDef.validate, (0, codegen_1._) `${fmt}.validate`];\n                }\n                return [\"string\", fmtDef, fmt];\n            }\n            function validCondition() {\n                if (typeof formatDef == \"object\" && !(formatDef instanceof RegExp) && formatDef.async) {\n                    if (!schemaEnv.$async)\n                        throw new Error(\"async format in sync schema\");\n                    return (0, codegen_1._) `await ${fmtRef}(${data})`;\n                }\n                return typeof format == \"function\" ? (0, codegen_1._) `${fmtRef}(${data})` : (0, codegen_1._) `${fmtRef}.test(${data})`;\n            }\n        }\n    },\n};\nexports.default = def;\n//# sourceMappingURL=format.js.map"]},"metadata":{},"sourceType":"script"}