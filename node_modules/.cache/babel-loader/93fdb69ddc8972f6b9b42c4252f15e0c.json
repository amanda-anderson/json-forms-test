{"ast":null,"code":"import { extendError } from \"./extend-error\";\nimport { normalizeArgs, normalizeOptions } from \"./normalize\";\nimport { toJSON as errorToJSON } from \"./to-json\";\nvar constructor = Ono;\nexport { constructor as Ono };\n/**\n * Returns an object containing all properties of the given Error object,\n * which can be used with `JSON.stringify()`.\n */\n\nOno.toJSON = function toJSON(error) {\n  return errorToJSON.call(error);\n};\n/**\n * Creates an `Ono` instance for a specifc error type.\n */\n// tslint:disable-next-line: variable-name\n\n\nfunction Ono(ErrorConstructor, options) {\n  options = normalizeOptions(options);\n\n  function ono() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var _normalizeArgs = normalizeArgs(args, options),\n        originalError = _normalizeArgs.originalError,\n        props = _normalizeArgs.props,\n        message = _normalizeArgs.message; // Create a new error of the specified type\n\n\n    var newError = new ErrorConstructor(message); // Extend the error with the properties of the original error and the `props` object\n\n    extendError(newError, originalError, props);\n    return newError;\n  }\n\n  ono[Symbol.species] = ErrorConstructor;\n  return ono;\n}","map":{"version":3,"sources":["../src/constructor.ts"],"names":[],"mappings":"AAAA,SAAS,WAAT,QAA4B,gBAA5B;AACA,SAAS,aAAT,EAAwB,gBAAxB,QAAgD,aAAhD;AACA,SAAS,MAAM,IAAI,WAAnB,QAAsC,WAAtC;AAGA,IAAM,WAAW,GAAG,GAApB;AACA,SAAS,WAAW,IAAI,GAAxB;AAEA;;;AAGG;;AACH,GAAG,CAAC,MAAJ,GAAa,SAAS,MAAT,CAAqC,KAArC,EAA6C;AACxD,SAAO,WAAW,CAAC,IAAZ,CAAiB,KAAjB,CAAP;AACD,CAFD;AAIA;;AAEG;AACH;;;AACA,SAAS,GAAT,CAAkC,gBAAlC,EAA6E,OAA7E,EAAiG;AAC/F,EAAA,OAAO,GAAG,gBAAgB,CAAC,OAAD,CAA1B;;AAEA,WAAS,GAAT,GAAsE;AAAA,sCAAf,IAAe;AAAf,MAAA,IAAe;AAAA;;AAAA,yBAC5B,aAAa,CAAO,IAAP,EAAa,OAAb,CADe;AAAA,QAC9D,aAD8D,kBAC9D,aAD8D;AAAA,QAC/C,KAD+C,kBAC/C,KAD+C;AAAA,QACxC,OADwC,kBACxC,OADwC,EAGpE;;;AACA,QAAI,QAAQ,GAAG,IAAK,gBAAL,CAAuD,OAAvD,CAAf,CAJoE,CAMpE;;AACA,IAAA,WAAW,CAAC,QAAD,EAAW,aAAX,EAA0B,KAA1B,CAAX;AAEA,WAAO,QAAP;AACD;;AAED,EAAA,GAAG,CAAC,MAAM,CAAC,OAAR,CAAH,GAAsB,gBAAtB;AACA,SAAO,GAAP;AACD","sourceRoot":"","sourcesContent":["import { extendError } from \"./extend-error\";\nimport { normalizeArgs, normalizeOptions } from \"./normalize\";\nimport { toJSON as errorToJSON } from \"./to-json\";\nconst constructor = Ono;\nexport { constructor as Ono };\n/**\n * Returns an object containing all properties of the given Error object,\n * which can be used with `JSON.stringify()`.\n */\nOno.toJSON = function toJSON(error) {\n    return errorToJSON.call(error);\n};\n/**\n * Creates an `Ono` instance for a specifc error type.\n */\n// tslint:disable-next-line: variable-name\nfunction Ono(ErrorConstructor, options) {\n    options = normalizeOptions(options);\n    function ono(...args) {\n        let { originalError, props, message } = normalizeArgs(args, options);\n        // Create a new error of the specified type\n        let newError = new ErrorConstructor(message);\n        // Extend the error with the properties of the original error and the `props` object\n        extendError(newError, originalError, props);\n        return newError;\n    }\n    ono[Symbol.species] = ErrorConstructor;\n    return ono;\n}\n//# sourceMappingURL=constructor.js.map"]},"metadata":{},"sourceType":"module"}