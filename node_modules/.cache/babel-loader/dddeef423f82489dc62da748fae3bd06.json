{"ast":null,"code":"\"use strict\";\n/*\n  The MIT License\n  \n  Copyright (c) 2017-2019 EclipseSource Munich\n  https://github.com/eclipsesource/jsonforms\n  \n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n  \n  The above copyright notice and this permission notice shall be included in\n  all copies or substantial portions of the Software.\n  \n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  THE SOFTWARE.\n*/\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Runtime = exports.Paths = exports.Resolve = exports.deriveTypes = exports.hasType = exports.formatErrorMessage = exports.convertToValidClassName = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar isEmpty_1 = tslib_1.__importDefault(require(\"lodash/isEmpty\"));\n\nvar isArray_1 = tslib_1.__importDefault(require(\"lodash/isArray\"));\n\nvar includes_1 = tslib_1.__importDefault(require(\"lodash/includes\"));\n\nvar find_1 = tslib_1.__importDefault(require(\"lodash/find\"));\n\nvar resolvers_1 = require(\"./resolvers\");\n\nvar path_1 = require(\"./path\");\n\nvar runtime_1 = require(\"./runtime\");\n/**\n * Escape the given string such that it can be used as a class name,\n * i.e. hashes and slashes will be replaced.\n *\n * @param {string} s the string that should be converted to a valid class name\n * @returns {string} the escaped string\n */\n\n\nvar convertToValidClassName = function convertToValidClassName(s) {\n  return s.replace('#', 'root').replace(new RegExp('/', 'g'), '_');\n};\n\nexports.convertToValidClassName = convertToValidClassName;\n\nvar formatErrorMessage = function formatErrorMessage(errors) {\n  if (errors === undefined || errors === null) {\n    return '';\n  }\n\n  return errors.join('\\n');\n};\n\nexports.formatErrorMessage = formatErrorMessage;\n\nvar hasType = function hasType(jsonSchema, expected) {\n  return includes_1.default(exports.deriveTypes(jsonSchema), expected);\n};\n\nexports.hasType = hasType;\n/**\n* Derives the type of the jsonSchema element\n*/\n\nvar deriveTypes = function deriveTypes(jsonSchema) {\n  if (isEmpty_1.default(jsonSchema)) {\n    return [];\n  }\n\n  if (!isEmpty_1.default(jsonSchema.type) && typeof jsonSchema.type === 'string') {\n    return [jsonSchema.type];\n  }\n\n  if (isArray_1.default(jsonSchema.type)) {\n    return jsonSchema.type;\n  }\n\n  if (!isEmpty_1.default(jsonSchema.properties) || !isEmpty_1.default(jsonSchema.additionalProperties)) {\n    return ['object'];\n  }\n\n  if (!isEmpty_1.default(jsonSchema.items)) {\n    return ['array'];\n  }\n\n  if (!isEmpty_1.default(jsonSchema.allOf)) {\n    var allOfType = find_1.default(jsonSchema.allOf, function (schema) {\n      return exports.deriveTypes(schema).length !== 0;\n    });\n\n    if (allOfType) {\n      return exports.deriveTypes(allOfType);\n    }\n  } // ignore all remaining cases\n\n\n  return [];\n};\n\nexports.deriveTypes = deriveTypes;\n/**\n* Convenience wrapper around resolveData and resolveSchema.\n*/\n\nexports.Resolve = {\n  schema: resolvers_1.resolveSchema,\n  data: resolvers_1.resolveData\n}; // Paths --\n\nvar fromScopable = function fromScopable(scopable) {\n  return path_1.toDataPathSegments(scopable.scope).join('.');\n};\n\nexports.Paths = {\n  compose: path_1.composePaths,\n  fromScopable: fromScopable\n}; // Runtime --\n\nexports.Runtime = {\n  isEnabled: function isEnabled(uischema, data, ajv) {\n    return runtime_1.isEnabled(uischema, data, undefined, ajv);\n  },\n  isVisible: function isVisible(uischema, data, ajv) {\n    return runtime_1.isVisible(uischema, data, undefined, ajv);\n  }\n};","map":{"version":3,"sources":["../../src/util/util.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n  The MIT License\n  \n  Copyright (c) 2017-2019 EclipseSource Munich\n  https://github.com/eclipsesource/jsonforms\n  \n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n  \n  The above copyright notice and this permission notice shall be included in\n  all copies or substantial portions of the Software.\n  \n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  THE SOFTWARE.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Runtime = exports.Paths = exports.Resolve = exports.deriveTypes = exports.hasType = exports.formatErrorMessage = exports.convertToValidClassName = void 0;\nvar tslib_1 = require(\"tslib\");\nvar isEmpty_1 = tslib_1.__importDefault(require(\"lodash/isEmpty\"));\nvar isArray_1 = tslib_1.__importDefault(require(\"lodash/isArray\"));\nvar includes_1 = tslib_1.__importDefault(require(\"lodash/includes\"));\nvar find_1 = tslib_1.__importDefault(require(\"lodash/find\"));\nvar resolvers_1 = require(\"./resolvers\");\nvar path_1 = require(\"./path\");\nvar runtime_1 = require(\"./runtime\");\n/**\n * Escape the given string such that it can be used as a class name,\n * i.e. hashes and slashes will be replaced.\n *\n * @param {string} s the string that should be converted to a valid class name\n * @returns {string} the escaped string\n */\nvar convertToValidClassName = function (s) {\n    return s.replace('#', 'root').replace(new RegExp('/', 'g'), '_');\n};\nexports.convertToValidClassName = convertToValidClassName;\nvar formatErrorMessage = function (errors) {\n    if (errors === undefined || errors === null) {\n        return '';\n    }\n    return errors.join('\\n');\n};\nexports.formatErrorMessage = formatErrorMessage;\nvar hasType = function (jsonSchema, expected) {\n    return includes_1.default(exports.deriveTypes(jsonSchema), expected);\n};\nexports.hasType = hasType;\n/**\n* Derives the type of the jsonSchema element\n*/\nvar deriveTypes = function (jsonSchema) {\n    if (isEmpty_1.default(jsonSchema)) {\n        return [];\n    }\n    if (!isEmpty_1.default(jsonSchema.type) && typeof jsonSchema.type === 'string') {\n        return [jsonSchema.type];\n    }\n    if (isArray_1.default(jsonSchema.type)) {\n        return jsonSchema.type;\n    }\n    if (!isEmpty_1.default(jsonSchema.properties) ||\n        !isEmpty_1.default(jsonSchema.additionalProperties)) {\n        return ['object'];\n    }\n    if (!isEmpty_1.default(jsonSchema.items)) {\n        return ['array'];\n    }\n    if (!isEmpty_1.default(jsonSchema.allOf)) {\n        var allOfType = find_1.default(jsonSchema.allOf, function (schema) { return exports.deriveTypes(schema).length !== 0; });\n        if (allOfType) {\n            return exports.deriveTypes(allOfType);\n        }\n    }\n    // ignore all remaining cases\n    return [];\n};\nexports.deriveTypes = deriveTypes;\n/**\n* Convenience wrapper around resolveData and resolveSchema.\n*/\nexports.Resolve = {\n    schema: resolvers_1.resolveSchema,\n    data: resolvers_1.resolveData\n};\n// Paths --\nvar fromScopable = function (scopable) {\n    return path_1.toDataPathSegments(scopable.scope).join('.');\n};\nexports.Paths = {\n    compose: path_1.composePaths,\n    fromScopable: fromScopable\n};\n// Runtime --\nexports.Runtime = {\n    isEnabled: function (uischema, data, ajv) {\n        return runtime_1.isEnabled(uischema, data, undefined, ajv);\n    },\n    isVisible: function (uischema, data, ajv) {\n        return runtime_1.isVisible(uischema, data, undefined, ajv);\n    }\n};\n//# sourceMappingURL=util.js.map"]},"metadata":{},"sourceType":"script"}