{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/home/aander-cl/Documents/jsonforms/jsonforms-react-seed/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\", \" \", \" \", \" || isNaN(\", \")\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"{comparison: \", \", limit: \", \"}\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"must be \", \" \", \"\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar codegen_1 = require(\"../../compile/codegen\");\n\nvar ops = codegen_1.operators;\nvar KWDs = {\n  maximum: {\n    okStr: \"<=\",\n    ok: ops.LTE,\n    fail: ops.GT\n  },\n  minimum: {\n    okStr: \">=\",\n    ok: ops.GTE,\n    fail: ops.LT\n  },\n  exclusiveMaximum: {\n    okStr: \"<\",\n    ok: ops.LT,\n    fail: ops.GTE\n  },\n  exclusiveMinimum: {\n    okStr: \">\",\n    ok: ops.GT,\n    fail: ops.LTE\n  }\n};\nvar error = {\n  message: function message(_ref) {\n    var keyword = _ref.keyword,\n        schemaCode = _ref.schemaCode;\n    return (0, codegen_1.str)(_templateObject(), KWDs[keyword].okStr, schemaCode);\n  },\n  params: function params(_ref2) {\n    var keyword = _ref2.keyword,\n        schemaCode = _ref2.schemaCode;\n    return (0, codegen_1._)(_templateObject2(), KWDs[keyword].okStr, schemaCode);\n  }\n};\nvar def = {\n  keyword: Object.keys(KWDs),\n  type: \"number\",\n  schemaType: \"number\",\n  $data: true,\n  error,\n\n  code(cxt) {\n    var keyword = cxt.keyword,\n        data = cxt.data,\n        schemaCode = cxt.schemaCode;\n    cxt.fail$data((0, codegen_1._)(_templateObject3(), data, KWDs[keyword].fail, schemaCode, data));\n  }\n\n};\nexports.default = def;","map":{"version":3,"sources":["../../../lib/vocabularies/validation/limitNumber.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAA,SAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AAEA,IAAM,GAAG,GAAG,SAAA,CAAA,SAAZ;AAMA,IAAM,IAAI,GAA4D;AACpE,EAAA,OAAO,EAAE;AAAC,IAAA,KAAK,EAAE,IAAR;AAAc,IAAA,EAAE,EAAE,GAAG,CAAC,GAAtB;AAA2B,IAAA,IAAI,EAAE,GAAG,CAAC;AAArC,GAD2D;AAEpE,EAAA,OAAO,EAAE;AAAC,IAAA,KAAK,EAAE,IAAR;AAAc,IAAA,EAAE,EAAE,GAAG,CAAC,GAAtB;AAA2B,IAAA,IAAI,EAAE,GAAG,CAAC;AAArC,GAF2D;AAGpE,EAAA,gBAAgB,EAAE;AAAC,IAAA,KAAK,EAAE,GAAR;AAAa,IAAA,EAAE,EAAE,GAAG,CAAC,EAArB;AAAyB,IAAA,IAAI,EAAE,GAAG,CAAC;AAAnC,GAHkD;AAIpE,EAAA,gBAAgB,EAAE;AAAC,IAAA,KAAK,EAAE,GAAR;AAAa,IAAA,EAAE,EAAE,GAAG,CAAC,EAArB;AAAyB,IAAA,IAAI,EAAE,GAAG,CAAC;AAAnC;AAJkD,CAAtE;AAaA,IAAM,KAAK,GAA2B;AACpC,EAAA,OAAO,EAAE;AAAA,QAAE,OAAF,QAAE,OAAF;AAAA,QAAW,UAAX,QAAW,UAAX;AAAA,YAA2B,GAAA,SAAA,CAAA,GAA3B,qBAAyC,IAAI,CAAC,OAAD,CAAJ,CAAqB,KAA9D,EAAuE,UAAvE;AAAA,GAD2B;AAEpC,EAAA,MAAM,EAAE;AAAA,QAAE,OAAF,SAAE,OAAF;AAAA,QAAW,UAAX,SAAW,UAAX;AAAA,YACN,GAAA,SAAA,CAAA,CADM,sBACW,IAAI,CAAC,OAAD,CAAJ,CAAqB,KADhC,EACiD,UADjD;AAAA;AAF4B,CAAtC;AAMA,IAAM,GAAG,GAA0B;AACjC,EAAA,OAAO,EAAE,MAAM,CAAC,IAAP,CAAY,IAAZ,CADwB;AAEjC,EAAA,IAAI,EAAE,QAF2B;AAGjC,EAAA,UAAU,EAAE,QAHqB;AAIjC,EAAA,KAAK,EAAE,IAJ0B;AAKjC,EAAA,KALiC;;AAMjC,EAAA,IAAI,CAAC,GAAD,EAAgB;AAAA,QACX,OADW,GACkB,GADlB,CACX,OADW;AAAA,QACF,IADE,GACkB,GADlB,CACF,IADE;AAAA,QACI,UADJ,GACkB,GADlB,CACI,UADJ;AAElB,IAAA,GAAG,CAAC,SAAJ,EAAc,GAAA,SAAA,CAAA,CAAd,sBAAkB,IAAlB,EAA0B,IAAI,CAAC,OAAD,CAAJ,CAAqB,IAA/C,EAAuD,UAAvD,EAA8E,IAA9E;AACD;;AATgC,CAAnC;AAYA,OAAA,CAAA,OAAA,GAAe,GAAf","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst codegen_1 = require(\"../../compile/codegen\");\nconst ops = codegen_1.operators;\nconst KWDs = {\n    maximum: { okStr: \"<=\", ok: ops.LTE, fail: ops.GT },\n    minimum: { okStr: \">=\", ok: ops.GTE, fail: ops.LT },\n    exclusiveMaximum: { okStr: \"<\", ok: ops.LT, fail: ops.GTE },\n    exclusiveMinimum: { okStr: \">\", ok: ops.GT, fail: ops.LTE },\n};\nconst error = {\n    message: ({ keyword, schemaCode }) => (0, codegen_1.str) `must be ${KWDs[keyword].okStr} ${schemaCode}`,\n    params: ({ keyword, schemaCode }) => (0, codegen_1._) `{comparison: ${KWDs[keyword].okStr}, limit: ${schemaCode}}`,\n};\nconst def = {\n    keyword: Object.keys(KWDs),\n    type: \"number\",\n    schemaType: \"number\",\n    $data: true,\n    error,\n    code(cxt) {\n        const { keyword, data, schemaCode } = cxt;\n        cxt.fail$data((0, codegen_1._) `${data} ${KWDs[keyword].fail} ${schemaCode} || isNaN(${data})`);\n    },\n};\nexports.default = def;\n//# sourceMappingURL=limitNumber.js.map"]},"metadata":{},"sourceType":"script"}