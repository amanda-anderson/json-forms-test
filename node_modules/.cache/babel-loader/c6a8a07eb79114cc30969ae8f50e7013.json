{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/home/aander-cl/Documents/jsonforms/jsonforms-react-seed/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _taggedTemplateLiteral = require(\"/home/aander-cl/Documents/jsonforms/jsonforms-react-seed/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\", \"\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\", \"\", \"\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\", \"\", \"\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\", \"\", \"\", \"\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\", \"\", \"\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.extendSubschemaMode = exports.extendSubschemaData = exports.getSubschema = void 0;\n\nvar codegen_1 = require(\"../codegen\");\n\nvar util_1 = require(\"../util\");\n\nfunction getSubschema(it, _ref) {\n  var keyword = _ref.keyword,\n      schemaProp = _ref.schemaProp,\n      schema = _ref.schema,\n      schemaPath = _ref.schemaPath,\n      errSchemaPath = _ref.errSchemaPath,\n      topSchemaRef = _ref.topSchemaRef;\n\n  if (keyword !== undefined && schema !== undefined) {\n    throw new Error('both \"keyword\" and \"schema\" passed, only one allowed');\n  }\n\n  if (keyword !== undefined) {\n    var sch = it.schema[keyword];\n    return schemaProp === undefined ? {\n      schema: sch,\n      schemaPath: (0, codegen_1._)(_templateObject(), it.schemaPath, (0, codegen_1.getProperty)(keyword)),\n      errSchemaPath: \"\".concat(it.errSchemaPath, \"/\").concat(keyword)\n    } : {\n      schema: sch[schemaProp],\n      schemaPath: (0, codegen_1._)(_templateObject2(), it.schemaPath, (0, codegen_1.getProperty)(keyword), (0, codegen_1.getProperty)(schemaProp)),\n      errSchemaPath: \"\".concat(it.errSchemaPath, \"/\").concat(keyword, \"/\").concat((0, util_1.escapeFragment)(schemaProp))\n    };\n  }\n\n  if (schema !== undefined) {\n    if (schemaPath === undefined || errSchemaPath === undefined || topSchemaRef === undefined) {\n      throw new Error('\"schemaPath\", \"errSchemaPath\" and \"topSchemaRef\" are required with \"schema\"');\n    }\n\n    return {\n      schema,\n      schemaPath,\n      topSchemaRef,\n      errSchemaPath\n    };\n  }\n\n  throw new Error('either \"keyword\" or \"schema\" must be passed');\n}\n\nexports.getSubschema = getSubschema;\n\nfunction extendSubschemaData(subschema, it, _ref2) {\n  var dataProp = _ref2.dataProp,\n      dpType = _ref2.dataPropType,\n      data = _ref2.data,\n      dataTypes = _ref2.dataTypes,\n      propertyName = _ref2.propertyName;\n\n  if (data !== undefined && dataProp !== undefined) {\n    throw new Error('both \"data\" and \"dataProp\" passed, only one allowed');\n  }\n\n  var gen = it.gen;\n\n  if (dataProp !== undefined) {\n    var errorPath = it.errorPath,\n        dataPathArr = it.dataPathArr,\n        opts = it.opts;\n    var nextData = gen.let(\"data\", (0, codegen_1._)(_templateObject3(), it.data, (0, codegen_1.getProperty)(dataProp)), true);\n    dataContextProps(nextData);\n    subschema.errorPath = (0, codegen_1.str)(_templateObject4(), errorPath, (0, util_1.getErrorPath)(dataProp, dpType, opts.jsPropertySyntax));\n    subschema.parentDataProperty = (0, codegen_1._)(_templateObject5(), dataProp);\n    subschema.dataPathArr = [].concat(_toConsumableArray(dataPathArr), [subschema.parentDataProperty]);\n  }\n\n  if (data !== undefined) {\n    var _nextData2 = data instanceof codegen_1.Name ? data : gen.let(\"data\", data, true); // replaceable if used once?\n\n\n    dataContextProps(_nextData2);\n    if (propertyName !== undefined) subschema.propertyName = propertyName; // TODO something is possibly wrong here with not changing parentDataProperty and not appending dataPathArr\n  }\n\n  if (dataTypes) subschema.dataTypes = dataTypes;\n\n  function dataContextProps(_nextData) {\n    subschema.data = _nextData;\n    subschema.dataLevel = it.dataLevel + 1;\n    subschema.dataTypes = [];\n    it.definedProperties = new Set();\n    subschema.parentData = it.data;\n    subschema.dataNames = [].concat(_toConsumableArray(it.dataNames), [_nextData]);\n  }\n}\n\nexports.extendSubschemaData = extendSubschemaData;\n\nfunction extendSubschemaMode(subschema, _ref3) {\n  var jtdDiscriminator = _ref3.jtdDiscriminator,\n      jtdMetadata = _ref3.jtdMetadata,\n      compositeRule = _ref3.compositeRule,\n      createErrors = _ref3.createErrors,\n      allErrors = _ref3.allErrors;\n  if (compositeRule !== undefined) subschema.compositeRule = compositeRule;\n  if (createErrors !== undefined) subschema.createErrors = createErrors;\n  if (allErrors !== undefined) subschema.allErrors = allErrors;\n  subschema.jtdDiscriminator = jtdDiscriminator; // not inherited\n\n  subschema.jtdMetadata = jtdMetadata; // not inherited\n}\n\nexports.extendSubschemaMode = extendSubschemaMode;","map":{"version":3,"sources":["../../../lib/compile/validate/subschema.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.extendSubschemaMode = exports.extendSubschemaData = exports.getSubschema = void 0;\nconst codegen_1 = require(\"../codegen\");\nconst util_1 = require(\"../util\");\nfunction getSubschema(it, { keyword, schemaProp, schema, schemaPath, errSchemaPath, topSchemaRef }) {\n    if (keyword !== undefined && schema !== undefined) {\n        throw new Error('both \"keyword\" and \"schema\" passed, only one allowed');\n    }\n    if (keyword !== undefined) {\n        const sch = it.schema[keyword];\n        return schemaProp === undefined\n            ? {\n                schema: sch,\n                schemaPath: (0, codegen_1._) `${it.schemaPath}${(0, codegen_1.getProperty)(keyword)}`,\n                errSchemaPath: `${it.errSchemaPath}/${keyword}`,\n            }\n            : {\n                schema: sch[schemaProp],\n                schemaPath: (0, codegen_1._) `${it.schemaPath}${(0, codegen_1.getProperty)(keyword)}${(0, codegen_1.getProperty)(schemaProp)}`,\n                errSchemaPath: `${it.errSchemaPath}/${keyword}/${(0, util_1.escapeFragment)(schemaProp)}`,\n            };\n    }\n    if (schema !== undefined) {\n        if (schemaPath === undefined || errSchemaPath === undefined || topSchemaRef === undefined) {\n            throw new Error('\"schemaPath\", \"errSchemaPath\" and \"topSchemaRef\" are required with \"schema\"');\n        }\n        return {\n            schema,\n            schemaPath,\n            topSchemaRef,\n            errSchemaPath,\n        };\n    }\n    throw new Error('either \"keyword\" or \"schema\" must be passed');\n}\nexports.getSubschema = getSubschema;\nfunction extendSubschemaData(subschema, it, { dataProp, dataPropType: dpType, data, dataTypes, propertyName }) {\n    if (data !== undefined && dataProp !== undefined) {\n        throw new Error('both \"data\" and \"dataProp\" passed, only one allowed');\n    }\n    const { gen } = it;\n    if (dataProp !== undefined) {\n        const { errorPath, dataPathArr, opts } = it;\n        const nextData = gen.let(\"data\", (0, codegen_1._) `${it.data}${(0, codegen_1.getProperty)(dataProp)}`, true);\n        dataContextProps(nextData);\n        subschema.errorPath = (0, codegen_1.str) `${errorPath}${(0, util_1.getErrorPath)(dataProp, dpType, opts.jsPropertySyntax)}`;\n        subschema.parentDataProperty = (0, codegen_1._) `${dataProp}`;\n        subschema.dataPathArr = [...dataPathArr, subschema.parentDataProperty];\n    }\n    if (data !== undefined) {\n        const nextData = data instanceof codegen_1.Name ? data : gen.let(\"data\", data, true); // replaceable if used once?\n        dataContextProps(nextData);\n        if (propertyName !== undefined)\n            subschema.propertyName = propertyName;\n        // TODO something is possibly wrong here with not changing parentDataProperty and not appending dataPathArr\n    }\n    if (dataTypes)\n        subschema.dataTypes = dataTypes;\n    function dataContextProps(_nextData) {\n        subschema.data = _nextData;\n        subschema.dataLevel = it.dataLevel + 1;\n        subschema.dataTypes = [];\n        it.definedProperties = new Set();\n        subschema.parentData = it.data;\n        subschema.dataNames = [...it.dataNames, _nextData];\n    }\n}\nexports.extendSubschemaData = extendSubschemaData;\nfunction extendSubschemaMode(subschema, { jtdDiscriminator, jtdMetadata, compositeRule, createErrors, allErrors }) {\n    if (compositeRule !== undefined)\n        subschema.compositeRule = compositeRule;\n    if (createErrors !== undefined)\n        subschema.createErrors = createErrors;\n    if (allErrors !== undefined)\n        subschema.allErrors = allErrors;\n    subschema.jtdDiscriminator = jtdDiscriminator; // not inherited\n    subschema.jtdMetadata = jtdMetadata; // not inherited\n}\nexports.extendSubschemaMode = extendSubschemaMode;\n//# sourceMappingURL=subschema.js.map"]},"metadata":{},"sourceType":"script"}