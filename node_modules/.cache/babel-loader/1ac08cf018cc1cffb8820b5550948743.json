{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/home/aander-cl/Documents/jsonforms/jsonforms-react-seed/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nvar _slicedToArray = require(\"/home/aander-cl/Documents/jsonforms/jsonforms-react-seed/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _get = require(\"/home/aander-cl/Documents/jsonforms/jsonforms-react-seed/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/home/aander-cl/Documents/jsonforms/jsonforms-react-seed/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _toConsumableArray = require(\"/home/aander-cl/Documents/jsonforms/jsonforms-react-seed/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _objectSpread = require(\"/home/aander-cl/Documents/jsonforms/jsonforms-react-seed/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _inherits = require(\"/home/aander-cl/Documents/jsonforms/jsonforms-react-seed/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/home/aander-cl/Documents/jsonforms/jsonforms-react-seed/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _classCallCheck = require(\"/home/aander-cl/Documents/jsonforms/jsonforms-react-seed/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/aander-cl/Documents/jsonforms/jsonforms-react-seed/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nfunction _templateObject6() {\n  var data = _taggedTemplateLiteral([\"(\", \")\"]);\n\n  _templateObject6 = function _templateObject6() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\", \" \", \" \", \"\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"!\", \"\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"Object.keys(\", \")\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\", \"[\", \"]\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\", \".length\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.or = exports.and = exports.not = exports.CodeGen = exports.operators = exports.varKinds = exports.ValueScopeName = exports.ValueScope = exports.Scope = exports.Name = exports.regexpCode = exports.stringify = exports.getProperty = exports.nil = exports.strConcat = exports.str = exports._ = void 0;\n\nvar code_1 = require(\"./code\");\n\nvar scope_1 = require(\"./scope\");\n\nvar code_2 = require(\"./code\");\n\nObject.defineProperty(exports, \"_\", {\n  enumerable: true,\n  get: function get() {\n    return code_2._;\n  }\n});\nObject.defineProperty(exports, \"str\", {\n  enumerable: true,\n  get: function get() {\n    return code_2.str;\n  }\n});\nObject.defineProperty(exports, \"strConcat\", {\n  enumerable: true,\n  get: function get() {\n    return code_2.strConcat;\n  }\n});\nObject.defineProperty(exports, \"nil\", {\n  enumerable: true,\n  get: function get() {\n    return code_2.nil;\n  }\n});\nObject.defineProperty(exports, \"getProperty\", {\n  enumerable: true,\n  get: function get() {\n    return code_2.getProperty;\n  }\n});\nObject.defineProperty(exports, \"stringify\", {\n  enumerable: true,\n  get: function get() {\n    return code_2.stringify;\n  }\n});\nObject.defineProperty(exports, \"regexpCode\", {\n  enumerable: true,\n  get: function get() {\n    return code_2.regexpCode;\n  }\n});\nObject.defineProperty(exports, \"Name\", {\n  enumerable: true,\n  get: function get() {\n    return code_2.Name;\n  }\n});\n\nvar scope_2 = require(\"./scope\");\n\nObject.defineProperty(exports, \"Scope\", {\n  enumerable: true,\n  get: function get() {\n    return scope_2.Scope;\n  }\n});\nObject.defineProperty(exports, \"ValueScope\", {\n  enumerable: true,\n  get: function get() {\n    return scope_2.ValueScope;\n  }\n});\nObject.defineProperty(exports, \"ValueScopeName\", {\n  enumerable: true,\n  get: function get() {\n    return scope_2.ValueScopeName;\n  }\n});\nObject.defineProperty(exports, \"varKinds\", {\n  enumerable: true,\n  get: function get() {\n    return scope_2.varKinds;\n  }\n});\nexports.operators = {\n  GT: new code_1._Code(\">\"),\n  GTE: new code_1._Code(\">=\"),\n  LT: new code_1._Code(\"<\"),\n  LTE: new code_1._Code(\"<=\"),\n  EQ: new code_1._Code(\"===\"),\n  NEQ: new code_1._Code(\"!==\"),\n  NOT: new code_1._Code(\"!\"),\n  OR: new code_1._Code(\"||\"),\n  AND: new code_1._Code(\"&&\"),\n  ADD: new code_1._Code(\"+\")\n};\n\nvar Node = /*#__PURE__*/function () {\n  function Node() {\n    _classCallCheck(this, Node);\n  }\n\n  _createClass(Node, [{\n    key: \"optimizeNodes\",\n    value: function optimizeNodes() {\n      return this;\n    }\n  }, {\n    key: \"optimizeNames\",\n    value: function optimizeNames(_names, _constants) {\n      return this;\n    }\n  }]);\n\n  return Node;\n}();\n\nvar Def = /*#__PURE__*/function (_Node) {\n  _inherits(Def, _Node);\n\n  var _super = _createSuper(Def);\n\n  function Def(varKind, name, rhs) {\n    var _this;\n\n    _classCallCheck(this, Def);\n\n    _this = _super.call(this);\n    _this.varKind = varKind;\n    _this.name = name;\n    _this.rhs = rhs;\n    return _this;\n  }\n\n  _createClass(Def, [{\n    key: \"render\",\n    value: function render(_ref) {\n      var es5 = _ref.es5,\n          _n = _ref._n;\n      var varKind = es5 ? scope_1.varKinds.var : this.varKind;\n      var rhs = this.rhs === undefined ? \"\" : \" = \".concat(this.rhs);\n      return \"\".concat(varKind, \" \").concat(this.name).concat(rhs, \";\") + _n;\n    }\n  }, {\n    key: \"optimizeNames\",\n    value: function optimizeNames(names, constants) {\n      if (!names[this.name.str]) return;\n      if (this.rhs) this.rhs = optimizeExpr(this.rhs, names, constants);\n      return this;\n    }\n  }, {\n    key: \"names\",\n    get: function get() {\n      return this.rhs instanceof code_1._CodeOrName ? this.rhs.names : {};\n    }\n  }]);\n\n  return Def;\n}(Node);\n\nvar Assign = /*#__PURE__*/function (_Node2) {\n  _inherits(Assign, _Node2);\n\n  var _super2 = _createSuper(Assign);\n\n  function Assign(lhs, rhs, sideEffects) {\n    var _this2;\n\n    _classCallCheck(this, Assign);\n\n    _this2 = _super2.call(this);\n    _this2.lhs = lhs;\n    _this2.rhs = rhs;\n    _this2.sideEffects = sideEffects;\n    return _this2;\n  }\n\n  _createClass(Assign, [{\n    key: \"render\",\n    value: function render(_ref2) {\n      var _n = _ref2._n;\n      return \"\".concat(this.lhs, \" = \").concat(this.rhs, \";\") + _n;\n    }\n  }, {\n    key: \"optimizeNames\",\n    value: function optimizeNames(names, constants) {\n      if (this.lhs instanceof code_1.Name && !names[this.lhs.str] && !this.sideEffects) return;\n      this.rhs = optimizeExpr(this.rhs, names, constants);\n      return this;\n    }\n  }, {\n    key: \"names\",\n    get: function get() {\n      var names = this.lhs instanceof code_1.Name ? {} : _objectSpread({}, this.lhs.names);\n      return addExprNames(names, this.rhs);\n    }\n  }]);\n\n  return Assign;\n}(Node);\n\nvar AssignOp = /*#__PURE__*/function (_Assign) {\n  _inherits(AssignOp, _Assign);\n\n  var _super3 = _createSuper(AssignOp);\n\n  function AssignOp(lhs, op, rhs, sideEffects) {\n    var _this3;\n\n    _classCallCheck(this, AssignOp);\n\n    _this3 = _super3.call(this, lhs, rhs, sideEffects);\n    _this3.op = op;\n    return _this3;\n  }\n\n  _createClass(AssignOp, [{\n    key: \"render\",\n    value: function render(_ref3) {\n      var _n = _ref3._n;\n      return \"\".concat(this.lhs, \" \").concat(this.op, \"= \").concat(this.rhs, \";\") + _n;\n    }\n  }]);\n\n  return AssignOp;\n}(Assign);\n\nvar Label = /*#__PURE__*/function (_Node3) {\n  _inherits(Label, _Node3);\n\n  var _super4 = _createSuper(Label);\n\n  function Label(label) {\n    var _this4;\n\n    _classCallCheck(this, Label);\n\n    _this4 = _super4.call(this);\n    _this4.label = label;\n    _this4.names = {};\n    return _this4;\n  }\n\n  _createClass(Label, [{\n    key: \"render\",\n    value: function render(_ref4) {\n      var _n = _ref4._n;\n      return \"\".concat(this.label, \":\") + _n;\n    }\n  }]);\n\n  return Label;\n}(Node);\n\nvar Break = /*#__PURE__*/function (_Node4) {\n  _inherits(Break, _Node4);\n\n  var _super5 = _createSuper(Break);\n\n  function Break(label) {\n    var _this5;\n\n    _classCallCheck(this, Break);\n\n    _this5 = _super5.call(this);\n    _this5.label = label;\n    _this5.names = {};\n    return _this5;\n  }\n\n  _createClass(Break, [{\n    key: \"render\",\n    value: function render(_ref5) {\n      var _n = _ref5._n;\n      var label = this.label ? \" \".concat(this.label) : \"\";\n      return \"break\".concat(label, \";\") + _n;\n    }\n  }]);\n\n  return Break;\n}(Node);\n\nvar Throw = /*#__PURE__*/function (_Node5) {\n  _inherits(Throw, _Node5);\n\n  var _super6 = _createSuper(Throw);\n\n  function Throw(error) {\n    var _this6;\n\n    _classCallCheck(this, Throw);\n\n    _this6 = _super6.call(this);\n    _this6.error = error;\n    return _this6;\n  }\n\n  _createClass(Throw, [{\n    key: \"render\",\n    value: function render(_ref6) {\n      var _n = _ref6._n;\n      return \"throw \".concat(this.error, \";\") + _n;\n    }\n  }, {\n    key: \"names\",\n    get: function get() {\n      return this.error.names;\n    }\n  }]);\n\n  return Throw;\n}(Node);\n\nvar AnyCode = /*#__PURE__*/function (_Node6) {\n  _inherits(AnyCode, _Node6);\n\n  var _super7 = _createSuper(AnyCode);\n\n  function AnyCode(code) {\n    var _this7;\n\n    _classCallCheck(this, AnyCode);\n\n    _this7 = _super7.call(this);\n    _this7.code = code;\n    return _this7;\n  }\n\n  _createClass(AnyCode, [{\n    key: \"render\",\n    value: function render(_ref7) {\n      var _n = _ref7._n;\n      return \"\".concat(this.code, \";\") + _n;\n    }\n  }, {\n    key: \"optimizeNodes\",\n    value: function optimizeNodes() {\n      return \"\".concat(this.code) ? this : undefined;\n    }\n  }, {\n    key: \"optimizeNames\",\n    value: function optimizeNames(names, constants) {\n      this.code = optimizeExpr(this.code, names, constants);\n      return this;\n    }\n  }, {\n    key: \"names\",\n    get: function get() {\n      return this.code instanceof code_1._CodeOrName ? this.code.names : {};\n    }\n  }]);\n\n  return AnyCode;\n}(Node);\n\nvar ParentNode = /*#__PURE__*/function (_Node7) {\n  _inherits(ParentNode, _Node7);\n\n  var _super8 = _createSuper(ParentNode);\n\n  function ParentNode() {\n    var _this8;\n\n    var nodes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n    _classCallCheck(this, ParentNode);\n\n    _this8 = _super8.call(this);\n    _this8.nodes = nodes;\n    return _this8;\n  }\n\n  _createClass(ParentNode, [{\n    key: \"render\",\n    value: function render(opts) {\n      return this.nodes.reduce(function (code, n) {\n        return code + n.render(opts);\n      }, \"\");\n    }\n  }, {\n    key: \"optimizeNodes\",\n    value: function optimizeNodes() {\n      var nodes = this.nodes;\n      var i = nodes.length;\n\n      while (i--) {\n        var n = nodes[i].optimizeNodes();\n        if (Array.isArray(n)) nodes.splice.apply(nodes, [i, 1].concat(_toConsumableArray(n)));else if (n) nodes[i] = n;else nodes.splice(i, 1);\n      }\n\n      return nodes.length > 0 ? this : undefined;\n    }\n  }, {\n    key: \"optimizeNames\",\n    value: function optimizeNames(names, constants) {\n      var nodes = this.nodes;\n      var i = nodes.length;\n\n      while (i--) {\n        // iterating backwards improves 1-pass optimization\n        var n = nodes[i];\n        if (n.optimizeNames(names, constants)) continue;\n        subtractNames(names, n.names);\n        nodes.splice(i, 1);\n      }\n\n      return nodes.length > 0 ? this : undefined;\n    }\n  }, {\n    key: \"names\",\n    get: function get() {\n      return this.nodes.reduce(function (names, n) {\n        return addNames(names, n.names);\n      }, {});\n    }\n  }]);\n\n  return ParentNode;\n}(Node);\n\nvar BlockNode = /*#__PURE__*/function (_ParentNode) {\n  _inherits(BlockNode, _ParentNode);\n\n  var _super9 = _createSuper(BlockNode);\n\n  function BlockNode() {\n    _classCallCheck(this, BlockNode);\n\n    return _super9.apply(this, arguments);\n  }\n\n  _createClass(BlockNode, [{\n    key: \"render\",\n    value: function render(opts) {\n      return \"{\" + opts._n + _get(_getPrototypeOf(BlockNode.prototype), \"render\", this).call(this, opts) + \"}\" + opts._n;\n    }\n  }]);\n\n  return BlockNode;\n}(ParentNode);\n\nvar Root = /*#__PURE__*/function (_ParentNode2) {\n  _inherits(Root, _ParentNode2);\n\n  var _super10 = _createSuper(Root);\n\n  function Root() {\n    _classCallCheck(this, Root);\n\n    return _super10.apply(this, arguments);\n  }\n\n  return Root;\n}(ParentNode);\n\nvar Else = /*#__PURE__*/function (_BlockNode) {\n  _inherits(Else, _BlockNode);\n\n  var _super11 = _createSuper(Else);\n\n  function Else() {\n    _classCallCheck(this, Else);\n\n    return _super11.apply(this, arguments);\n  }\n\n  return Else;\n}(BlockNode);\n\nElse.kind = \"else\";\n\nvar If = /*#__PURE__*/function (_BlockNode2) {\n  _inherits(If, _BlockNode2);\n\n  var _super12 = _createSuper(If);\n\n  function If(condition, nodes) {\n    var _this9;\n\n    _classCallCheck(this, If);\n\n    _this9 = _super12.call(this, nodes);\n    _this9.condition = condition;\n    return _this9;\n  }\n\n  _createClass(If, [{\n    key: \"render\",\n    value: function render(opts) {\n      var code = \"if(\".concat(this.condition, \")\") + _get(_getPrototypeOf(If.prototype), \"render\", this).call(this, opts);\n\n      if (this.else) code += \"else \" + this.else.render(opts);\n      return code;\n    }\n  }, {\n    key: \"optimizeNodes\",\n    value: function optimizeNodes() {\n      _get(_getPrototypeOf(If.prototype), \"optimizeNodes\", this).call(this);\n\n      var cond = this.condition;\n      if (cond === true) return this.nodes; // else is ignored here\n\n      var e = this.else;\n\n      if (e) {\n        var ns = e.optimizeNodes();\n        e = this.else = Array.isArray(ns) ? new Else(ns) : ns;\n      }\n\n      if (e) {\n        if (cond === false) return e instanceof If ? e : e.nodes;\n        if (this.nodes.length) return this;\n        return new If(not(cond), e instanceof If ? [e] : e.nodes);\n      }\n\n      if (cond === false || !this.nodes.length) return undefined;\n      return this;\n    }\n  }, {\n    key: \"optimizeNames\",\n    value: function optimizeNames(names, constants) {\n      var _a;\n\n      this.else = (_a = this.else) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);\n      if (!(_get(_getPrototypeOf(If.prototype), \"optimizeNames\", this).call(this, names, constants) || this.else)) return;\n      this.condition = optimizeExpr(this.condition, names, constants);\n      return this;\n    }\n  }, {\n    key: \"names\",\n    get: function get() {\n      var names = _get(_getPrototypeOf(If.prototype), \"names\", this);\n\n      addExprNames(names, this.condition);\n      if (this.else) addNames(names, this.else.names);\n      return names;\n    }\n  }]);\n\n  return If;\n}(BlockNode);\n\nIf.kind = \"if\";\n\nvar For = /*#__PURE__*/function (_BlockNode3) {\n  _inherits(For, _BlockNode3);\n\n  var _super13 = _createSuper(For);\n\n  function For() {\n    _classCallCheck(this, For);\n\n    return _super13.apply(this, arguments);\n  }\n\n  return For;\n}(BlockNode);\n\nFor.kind = \"for\";\n\nvar ForLoop = /*#__PURE__*/function (_For) {\n  _inherits(ForLoop, _For);\n\n  var _super14 = _createSuper(ForLoop);\n\n  function ForLoop(iteration) {\n    var _this10;\n\n    _classCallCheck(this, ForLoop);\n\n    _this10 = _super14.call(this);\n    _this10.iteration = iteration;\n    return _this10;\n  }\n\n  _createClass(ForLoop, [{\n    key: \"render\",\n    value: function render(opts) {\n      return \"for(\".concat(this.iteration, \")\") + _get(_getPrototypeOf(ForLoop.prototype), \"render\", this).call(this, opts);\n    }\n  }, {\n    key: \"optimizeNames\",\n    value: function optimizeNames(names, constants) {\n      if (!_get(_getPrototypeOf(ForLoop.prototype), \"optimizeNames\", this).call(this, names, constants)) return;\n      this.iteration = optimizeExpr(this.iteration, names, constants);\n      return this;\n    }\n  }, {\n    key: \"names\",\n    get: function get() {\n      return addNames(_get(_getPrototypeOf(ForLoop.prototype), \"names\", this), this.iteration.names);\n    }\n  }]);\n\n  return ForLoop;\n}(For);\n\nvar ForRange = /*#__PURE__*/function (_For2) {\n  _inherits(ForRange, _For2);\n\n  var _super15 = _createSuper(ForRange);\n\n  function ForRange(varKind, name, from, to) {\n    var _this11;\n\n    _classCallCheck(this, ForRange);\n\n    _this11 = _super15.call(this);\n    _this11.varKind = varKind;\n    _this11.name = name;\n    _this11.from = from;\n    _this11.to = to;\n    return _this11;\n  }\n\n  _createClass(ForRange, [{\n    key: \"render\",\n    value: function render(opts) {\n      var varKind = opts.es5 ? scope_1.varKinds.var : this.varKind;\n      var name = this.name,\n          from = this.from,\n          to = this.to;\n      return \"for(\".concat(varKind, \" \").concat(name, \"=\").concat(from, \"; \").concat(name, \"<\").concat(to, \"; \").concat(name, \"++)\") + _get(_getPrototypeOf(ForRange.prototype), \"render\", this).call(this, opts);\n    }\n  }, {\n    key: \"names\",\n    get: function get() {\n      var names = addExprNames(_get(_getPrototypeOf(ForRange.prototype), \"names\", this), this.from);\n      return addExprNames(names, this.to);\n    }\n  }]);\n\n  return ForRange;\n}(For);\n\nvar ForIter = /*#__PURE__*/function (_For3) {\n  _inherits(ForIter, _For3);\n\n  var _super16 = _createSuper(ForIter);\n\n  function ForIter(loop, varKind, name, iterable) {\n    var _this12;\n\n    _classCallCheck(this, ForIter);\n\n    _this12 = _super16.call(this);\n    _this12.loop = loop;\n    _this12.varKind = varKind;\n    _this12.name = name;\n    _this12.iterable = iterable;\n    return _this12;\n  }\n\n  _createClass(ForIter, [{\n    key: \"render\",\n    value: function render(opts) {\n      return \"for(\".concat(this.varKind, \" \").concat(this.name, \" \").concat(this.loop, \" \").concat(this.iterable, \")\") + _get(_getPrototypeOf(ForIter.prototype), \"render\", this).call(this, opts);\n    }\n  }, {\n    key: \"optimizeNames\",\n    value: function optimizeNames(names, constants) {\n      if (!_get(_getPrototypeOf(ForIter.prototype), \"optimizeNames\", this).call(this, names, constants)) return;\n      this.iterable = optimizeExpr(this.iterable, names, constants);\n      return this;\n    }\n  }, {\n    key: \"names\",\n    get: function get() {\n      return addNames(_get(_getPrototypeOf(ForIter.prototype), \"names\", this), this.iterable.names);\n    }\n  }]);\n\n  return ForIter;\n}(For);\n\nvar Func = /*#__PURE__*/function (_BlockNode4) {\n  _inherits(Func, _BlockNode4);\n\n  var _super17 = _createSuper(Func);\n\n  function Func(name, args, async) {\n    var _this13;\n\n    _classCallCheck(this, Func);\n\n    _this13 = _super17.call(this);\n    _this13.name = name;\n    _this13.args = args;\n    _this13.async = async;\n    return _this13;\n  }\n\n  _createClass(Func, [{\n    key: \"render\",\n    value: function render(opts) {\n      var _async = this.async ? \"async \" : \"\";\n\n      return \"\".concat(_async, \"function \").concat(this.name, \"(\").concat(this.args, \")\") + _get(_getPrototypeOf(Func.prototype), \"render\", this).call(this, opts);\n    }\n  }]);\n\n  return Func;\n}(BlockNode);\n\nFunc.kind = \"func\";\n\nvar Return = /*#__PURE__*/function (_ParentNode3) {\n  _inherits(Return, _ParentNode3);\n\n  var _super18 = _createSuper(Return);\n\n  function Return() {\n    _classCallCheck(this, Return);\n\n    return _super18.apply(this, arguments);\n  }\n\n  _createClass(Return, [{\n    key: \"render\",\n    value: function render(opts) {\n      return \"return \" + _get(_getPrototypeOf(Return.prototype), \"render\", this).call(this, opts);\n    }\n  }]);\n\n  return Return;\n}(ParentNode);\n\nReturn.kind = \"return\";\n\nvar Try = /*#__PURE__*/function (_BlockNode5) {\n  _inherits(Try, _BlockNode5);\n\n  var _super19 = _createSuper(Try);\n\n  function Try() {\n    _classCallCheck(this, Try);\n\n    return _super19.apply(this, arguments);\n  }\n\n  _createClass(Try, [{\n    key: \"render\",\n    value: function render(opts) {\n      var code = \"try\" + _get(_getPrototypeOf(Try.prototype), \"render\", this).call(this, opts);\n\n      if (this.catch) code += this.catch.render(opts);\n      if (this.finally) code += this.finally.render(opts);\n      return code;\n    }\n  }, {\n    key: \"optimizeNodes\",\n    value: function optimizeNodes() {\n      var _a, _b;\n\n      _get(_getPrototypeOf(Try.prototype), \"optimizeNodes\", this).call(this);\n\n      (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNodes();\n      (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNodes();\n      return this;\n    }\n  }, {\n    key: \"optimizeNames\",\n    value: function optimizeNames(names, constants) {\n      var _a, _b;\n\n      _get(_getPrototypeOf(Try.prototype), \"optimizeNames\", this).call(this, names, constants);\n\n      (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);\n      (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNames(names, constants);\n      return this;\n    }\n  }, {\n    key: \"names\",\n    get: function get() {\n      var names = _get(_getPrototypeOf(Try.prototype), \"names\", this);\n\n      if (this.catch) addNames(names, this.catch.names);\n      if (this.finally) addNames(names, this.finally.names);\n      return names;\n    }\n  }]);\n\n  return Try;\n}(BlockNode);\n\nvar Catch = /*#__PURE__*/function (_BlockNode6) {\n  _inherits(Catch, _BlockNode6);\n\n  var _super20 = _createSuper(Catch);\n\n  function Catch(error) {\n    var _this14;\n\n    _classCallCheck(this, Catch);\n\n    _this14 = _super20.call(this);\n    _this14.error = error;\n    return _this14;\n  }\n\n  _createClass(Catch, [{\n    key: \"render\",\n    value: function render(opts) {\n      return \"catch(\".concat(this.error, \")\") + _get(_getPrototypeOf(Catch.prototype), \"render\", this).call(this, opts);\n    }\n  }]);\n\n  return Catch;\n}(BlockNode);\n\nCatch.kind = \"catch\";\n\nvar Finally = /*#__PURE__*/function (_BlockNode7) {\n  _inherits(Finally, _BlockNode7);\n\n  var _super21 = _createSuper(Finally);\n\n  function Finally() {\n    _classCallCheck(this, Finally);\n\n    return _super21.apply(this, arguments);\n  }\n\n  _createClass(Finally, [{\n    key: \"render\",\n    value: function render(opts) {\n      return \"finally\" + _get(_getPrototypeOf(Finally.prototype), \"render\", this).call(this, opts);\n    }\n  }]);\n\n  return Finally;\n}(BlockNode);\n\nFinally.kind = \"finally\";\n\nvar CodeGen = /*#__PURE__*/function () {\n  function CodeGen(extScope) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, CodeGen);\n\n    this._values = {};\n    this._blockStarts = [];\n    this._constants = {};\n    this.opts = _objectSpread(_objectSpread({}, opts), {}, {\n      _n: opts.lines ? \"\\n\" : \"\"\n    });\n    this._extScope = extScope;\n    this._scope = new scope_1.Scope({\n      parent: extScope\n    });\n    this._nodes = [new Root()];\n  }\n\n  _createClass(CodeGen, [{\n    key: \"toString\",\n    value: function toString() {\n      return this._root.render(this.opts);\n    } // returns unique name in the internal scope\n\n  }, {\n    key: \"name\",\n    value: function name(prefix) {\n      return this._scope.name(prefix);\n    } // reserves unique name in the external scope\n\n  }, {\n    key: \"scopeName\",\n    value: function scopeName(prefix) {\n      return this._extScope.name(prefix);\n    } // reserves unique name in the external scope and assigns value to it\n\n  }, {\n    key: \"scopeValue\",\n    value: function scopeValue(prefixOrName, value) {\n      var name = this._extScope.value(prefixOrName, value);\n\n      var vs = this._values[name.prefix] || (this._values[name.prefix] = new Set());\n      vs.add(name);\n      return name;\n    }\n  }, {\n    key: \"getScopeValue\",\n    value: function getScopeValue(prefix, keyOrRef) {\n      return this._extScope.getValue(prefix, keyOrRef);\n    } // return code that assigns values in the external scope to the names that are used internally\n    // (same names that were returned by gen.scopeName or gen.scopeValue)\n\n  }, {\n    key: \"scopeRefs\",\n    value: function scopeRefs(scopeName) {\n      return this._extScope.scopeRefs(scopeName, this._values);\n    }\n  }, {\n    key: \"scopeCode\",\n    value: function scopeCode() {\n      return this._extScope.scopeCode(this._values);\n    }\n  }, {\n    key: \"_def\",\n    value: function _def(varKind, nameOrPrefix, rhs, constant) {\n      var name = this._scope.toName(nameOrPrefix);\n\n      if (rhs !== undefined && constant) this._constants[name.str] = rhs;\n\n      this._leafNode(new Def(varKind, name, rhs));\n\n      return name;\n    } // `const` declaration (`var` in es5 mode)\n\n  }, {\n    key: \"const\",\n    value: function _const(nameOrPrefix, rhs, _constant) {\n      return this._def(scope_1.varKinds.const, nameOrPrefix, rhs, _constant);\n    } // `let` declaration with optional assignment (`var` in es5 mode)\n\n  }, {\n    key: \"let\",\n    value: function _let(nameOrPrefix, rhs, _constant) {\n      return this._def(scope_1.varKinds.let, nameOrPrefix, rhs, _constant);\n    } // `var` declaration with optional assignment\n\n  }, {\n    key: \"var\",\n    value: function _var(nameOrPrefix, rhs, _constant) {\n      return this._def(scope_1.varKinds.var, nameOrPrefix, rhs, _constant);\n    } // assignment code\n\n  }, {\n    key: \"assign\",\n    value: function assign(lhs, rhs, sideEffects) {\n      return this._leafNode(new Assign(lhs, rhs, sideEffects));\n    } // `+=` code\n\n  }, {\n    key: \"add\",\n    value: function add(lhs, rhs) {\n      return this._leafNode(new AssignOp(lhs, exports.operators.ADD, rhs));\n    } // appends passed SafeExpr to code or executes Block\n\n  }, {\n    key: \"code\",\n    value: function code(c) {\n      if (typeof c == \"function\") c();else if (c !== code_1.nil) this._leafNode(new AnyCode(c));\n      return this;\n    } // returns code for object literal for the passed argument list of key-value pairs\n\n  }, {\n    key: \"object\",\n    value: function object() {\n      var code = [\"{\"];\n\n      for (var _len = arguments.length, keyValues = new Array(_len), _key = 0; _key < _len; _key++) {\n        keyValues[_key] = arguments[_key];\n      }\n\n      for (var _i = 0, _keyValues = keyValues; _i < _keyValues.length; _i++) {\n        var _keyValues$_i = _slicedToArray(_keyValues[_i], 2),\n            key = _keyValues$_i[0],\n            value = _keyValues$_i[1];\n\n        if (code.length > 1) code.push(\",\");\n        code.push(key);\n\n        if (key !== value || this.opts.es5) {\n          code.push(\":\");\n          (0, code_1.addCodeArg)(code, value);\n        }\n      }\n\n      code.push(\"}\");\n      return new code_1._Code(code);\n    } // `if` clause (or statement if `thenBody` and, optionally, `elseBody` are passed)\n\n  }, {\n    key: \"if\",\n    value: function _if(condition, thenBody, elseBody) {\n      this._blockNode(new If(condition));\n\n      if (thenBody && elseBody) {\n        this.code(thenBody).else().code(elseBody).endIf();\n      } else if (thenBody) {\n        this.code(thenBody).endIf();\n      } else if (elseBody) {\n        throw new Error('CodeGen: \"else\" body without \"then\" body');\n      }\n\n      return this;\n    } // `else if` clause - invalid without `if` or after `else` clauses\n\n  }, {\n    key: \"elseIf\",\n    value: function elseIf(condition) {\n      return this._elseNode(new If(condition));\n    } // `else` clause - only valid after `if` or `else if` clauses\n\n  }, {\n    key: \"else\",\n    value: function _else() {\n      return this._elseNode(new Else());\n    } // end `if` statement (needed if gen.if was used only with condition)\n\n  }, {\n    key: \"endIf\",\n    value: function endIf() {\n      return this._endBlockNode(If, Else);\n    }\n  }, {\n    key: \"_for\",\n    value: function _for(node, forBody) {\n      this._blockNode(node);\n\n      if (forBody) this.code(forBody).endFor();\n      return this;\n    } // a generic `for` clause (or statement if `forBody` is passed)\n\n  }, {\n    key: \"for\",\n    value: function _for(iteration, forBody) {\n      return this._for(new ForLoop(iteration), forBody);\n    } // `for` statement for a range of values\n\n  }, {\n    key: \"forRange\",\n    value: function forRange(nameOrPrefix, from, to, forBody) {\n      var varKind = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.let;\n\n      var name = this._scope.toName(nameOrPrefix);\n\n      return this._for(new ForRange(varKind, name, from, to), function () {\n        return forBody(name);\n      });\n    } // `for-of` statement (in es5 mode replace with a normal for loop)\n\n  }, {\n    key: \"forOf\",\n    value: function forOf(nameOrPrefix, iterable, forBody) {\n      var _this15 = this;\n\n      var varKind = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : scope_1.varKinds.const;\n\n      var name = this._scope.toName(nameOrPrefix);\n\n      if (this.opts.es5) {\n        var arr = iterable instanceof code_1.Name ? iterable : this.var(\"_arr\", iterable);\n        return this.forRange(\"_i\", 0, (0, code_1._)(_templateObject(), arr), function (i) {\n          _this15.var(name, (0, code_1._)(_templateObject2(), arr, i));\n\n          forBody(name);\n        });\n      }\n\n      return this._for(new ForIter(\"of\", varKind, name, iterable), function () {\n        return forBody(name);\n      });\n    } // `for-in` statement.\n    // With option `ownProperties` replaced with a `for-of` loop for object keys\n\n  }, {\n    key: \"forIn\",\n    value: function forIn(nameOrPrefix, obj, forBody) {\n      var varKind = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.const;\n\n      if (this.opts.ownProperties) {\n        return this.forOf(nameOrPrefix, (0, code_1._)(_templateObject3(), obj), forBody);\n      }\n\n      var name = this._scope.toName(nameOrPrefix);\n\n      return this._for(new ForIter(\"in\", varKind, name, obj), function () {\n        return forBody(name);\n      });\n    } // end `for` loop\n\n  }, {\n    key: \"endFor\",\n    value: function endFor() {\n      return this._endBlockNode(For);\n    } // `label` statement\n\n  }, {\n    key: \"label\",\n    value: function label(_label) {\n      return this._leafNode(new Label(_label));\n    } // `break` statement\n\n  }, {\n    key: \"break\",\n    value: function _break(label) {\n      return this._leafNode(new Break(label));\n    } // `return` statement\n\n  }, {\n    key: \"return\",\n    value: function _return(value) {\n      var node = new Return();\n\n      this._blockNode(node);\n\n      this.code(value);\n      if (node.nodes.length !== 1) throw new Error('CodeGen: \"return\" should have one node');\n      return this._endBlockNode(Return);\n    } // `try` statement\n\n  }, {\n    key: \"try\",\n    value: function _try(tryBody, catchCode, finallyCode) {\n      if (!catchCode && !finallyCode) throw new Error('CodeGen: \"try\" without \"catch\" and \"finally\"');\n      var node = new Try();\n\n      this._blockNode(node);\n\n      this.code(tryBody);\n\n      if (catchCode) {\n        var error = this.name(\"e\");\n        this._currNode = node.catch = new Catch(error);\n        catchCode(error);\n      }\n\n      if (finallyCode) {\n        this._currNode = node.finally = new Finally();\n        this.code(finallyCode);\n      }\n\n      return this._endBlockNode(Catch, Finally);\n    } // `throw` statement\n\n  }, {\n    key: \"throw\",\n    value: function _throw(error) {\n      return this._leafNode(new Throw(error));\n    } // start self-balancing block\n\n  }, {\n    key: \"block\",\n    value: function block(body, nodeCount) {\n      this._blockStarts.push(this._nodes.length);\n\n      if (body) this.code(body).endBlock(nodeCount);\n      return this;\n    } // end the current self-balancing block\n\n  }, {\n    key: \"endBlock\",\n    value: function endBlock(nodeCount) {\n      var len = this._blockStarts.pop();\n\n      if (len === undefined) throw new Error(\"CodeGen: not in self-balancing block\");\n      var toClose = this._nodes.length - len;\n\n      if (toClose < 0 || nodeCount !== undefined && toClose !== nodeCount) {\n        throw new Error(\"CodeGen: wrong number of nodes: \".concat(toClose, \" vs \").concat(nodeCount, \" expected\"));\n      }\n\n      this._nodes.length = len;\n      return this;\n    } // `function` heading (or definition if funcBody is passed)\n\n  }, {\n    key: \"func\",\n    value: function func(name) {\n      var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : code_1.nil;\n      var async = arguments.length > 2 ? arguments[2] : undefined;\n      var funcBody = arguments.length > 3 ? arguments[3] : undefined;\n\n      this._blockNode(new Func(name, args, async));\n\n      if (funcBody) this.code(funcBody).endFunc();\n      return this;\n    } // end function definition\n\n  }, {\n    key: \"endFunc\",\n    value: function endFunc() {\n      return this._endBlockNode(Func);\n    }\n  }, {\n    key: \"optimize\",\n    value: function optimize() {\n      var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n\n      while (n-- > 0) {\n        this._root.optimizeNodes();\n\n        this._root.optimizeNames(this._root.names, this._constants);\n      }\n    }\n  }, {\n    key: \"_leafNode\",\n    value: function _leafNode(node) {\n      this._currNode.nodes.push(node);\n\n      return this;\n    }\n  }, {\n    key: \"_blockNode\",\n    value: function _blockNode(node) {\n      this._currNode.nodes.push(node);\n\n      this._nodes.push(node);\n    }\n  }, {\n    key: \"_endBlockNode\",\n    value: function _endBlockNode(N1, N2) {\n      var n = this._currNode;\n\n      if (n instanceof N1 || N2 && n instanceof N2) {\n        this._nodes.pop();\n\n        return this;\n      }\n\n      throw new Error(\"CodeGen: not in block \\\"\".concat(N2 ? \"\".concat(N1.kind, \"/\").concat(N2.kind) : N1.kind, \"\\\"\"));\n    }\n  }, {\n    key: \"_elseNode\",\n    value: function _elseNode(node) {\n      var n = this._currNode;\n\n      if (!(n instanceof If)) {\n        throw new Error('CodeGen: \"else\" without \"if\"');\n      }\n\n      this._currNode = n.else = node;\n      return this;\n    }\n  }, {\n    key: \"_root\",\n    get: function get() {\n      return this._nodes[0];\n    }\n  }, {\n    key: \"_currNode\",\n    get: function get() {\n      var ns = this._nodes;\n      return ns[ns.length - 1];\n    },\n    set: function set(node) {\n      var ns = this._nodes;\n      ns[ns.length - 1] = node;\n    }\n  }]);\n\n  return CodeGen;\n}();\n\nexports.CodeGen = CodeGen;\n\nfunction addNames(names, from) {\n  for (var n in from) {\n    names[n] = (names[n] || 0) + (from[n] || 0);\n  }\n\n  return names;\n}\n\nfunction addExprNames(names, from) {\n  return from instanceof code_1._CodeOrName ? addNames(names, from.names) : names;\n}\n\nfunction optimizeExpr(expr, names, constants) {\n  if (expr instanceof code_1.Name) return replaceName(expr);\n  if (!canOptimize(expr)) return expr;\n  return new code_1._Code(expr._items.reduce(function (items, c) {\n    if (c instanceof code_1.Name) c = replaceName(c);\n    if (c instanceof code_1._Code) items.push.apply(items, _toConsumableArray(c._items));else items.push(c);\n    return items;\n  }, []));\n\n  function replaceName(n) {\n    var c = constants[n.str];\n    if (c === undefined || names[n.str] !== 1) return n;\n    delete names[n.str];\n    return c;\n  }\n\n  function canOptimize(e) {\n    return e instanceof code_1._Code && e._items.some(function (c) {\n      return c instanceof code_1.Name && names[c.str] === 1 && constants[c.str] !== undefined;\n    });\n  }\n}\n\nfunction subtractNames(names, from) {\n  for (var n in from) {\n    names[n] = (names[n] || 0) - (from[n] || 0);\n  }\n}\n\nfunction not(x) {\n  return typeof x == \"boolean\" || typeof x == \"number\" || x === null ? !x : (0, code_1._)(_templateObject4(), par(x));\n}\n\nexports.not = not;\nvar andCode = mappend(exports.operators.AND); // boolean AND (&&) expression with the passed arguments\n\nfunction and() {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  return args.reduce(andCode);\n}\n\nexports.and = and;\nvar orCode = mappend(exports.operators.OR); // boolean OR (||) expression with the passed arguments\n\nfunction or() {\n  for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    args[_key3] = arguments[_key3];\n  }\n\n  return args.reduce(orCode);\n}\n\nexports.or = or;\n\nfunction mappend(op) {\n  return function (x, y) {\n    return x === code_1.nil ? y : y === code_1.nil ? x : (0, code_1._)(_templateObject5(), par(x), op, par(y));\n  };\n}\n\nfunction par(x) {\n  return x instanceof code_1.Name ? x : (0, code_1._)(_templateObject6(), x);\n}","map":{"version":3,"sources":["../../../lib/compile/codegen/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.or = exports.and = exports.not = exports.CodeGen = exports.operators = exports.varKinds = exports.ValueScopeName = exports.ValueScope = exports.Scope = exports.Name = exports.regexpCode = exports.stringify = exports.getProperty = exports.nil = exports.strConcat = exports.str = exports._ = void 0;\nconst code_1 = require(\"./code\");\nconst scope_1 = require(\"./scope\");\nvar code_2 = require(\"./code\");\nObject.defineProperty(exports, \"_\", { enumerable: true, get: function () { return code_2._; } });\nObject.defineProperty(exports, \"str\", { enumerable: true, get: function () { return code_2.str; } });\nObject.defineProperty(exports, \"strConcat\", { enumerable: true, get: function () { return code_2.strConcat; } });\nObject.defineProperty(exports, \"nil\", { enumerable: true, get: function () { return code_2.nil; } });\nObject.defineProperty(exports, \"getProperty\", { enumerable: true, get: function () { return code_2.getProperty; } });\nObject.defineProperty(exports, \"stringify\", { enumerable: true, get: function () { return code_2.stringify; } });\nObject.defineProperty(exports, \"regexpCode\", { enumerable: true, get: function () { return code_2.regexpCode; } });\nObject.defineProperty(exports, \"Name\", { enumerable: true, get: function () { return code_2.Name; } });\nvar scope_2 = require(\"./scope\");\nObject.defineProperty(exports, \"Scope\", { enumerable: true, get: function () { return scope_2.Scope; } });\nObject.defineProperty(exports, \"ValueScope\", { enumerable: true, get: function () { return scope_2.ValueScope; } });\nObject.defineProperty(exports, \"ValueScopeName\", { enumerable: true, get: function () { return scope_2.ValueScopeName; } });\nObject.defineProperty(exports, \"varKinds\", { enumerable: true, get: function () { return scope_2.varKinds; } });\nexports.operators = {\n    GT: new code_1._Code(\">\"),\n    GTE: new code_1._Code(\">=\"),\n    LT: new code_1._Code(\"<\"),\n    LTE: new code_1._Code(\"<=\"),\n    EQ: new code_1._Code(\"===\"),\n    NEQ: new code_1._Code(\"!==\"),\n    NOT: new code_1._Code(\"!\"),\n    OR: new code_1._Code(\"||\"),\n    AND: new code_1._Code(\"&&\"),\n    ADD: new code_1._Code(\"+\"),\n};\nclass Node {\n    optimizeNodes() {\n        return this;\n    }\n    optimizeNames(_names, _constants) {\n        return this;\n    }\n}\nclass Def extends Node {\n    constructor(varKind, name, rhs) {\n        super();\n        this.varKind = varKind;\n        this.name = name;\n        this.rhs = rhs;\n    }\n    render({ es5, _n }) {\n        const varKind = es5 ? scope_1.varKinds.var : this.varKind;\n        const rhs = this.rhs === undefined ? \"\" : ` = ${this.rhs}`;\n        return `${varKind} ${this.name}${rhs};` + _n;\n    }\n    optimizeNames(names, constants) {\n        if (!names[this.name.str])\n            return;\n        if (this.rhs)\n            this.rhs = optimizeExpr(this.rhs, names, constants);\n        return this;\n    }\n    get names() {\n        return this.rhs instanceof code_1._CodeOrName ? this.rhs.names : {};\n    }\n}\nclass Assign extends Node {\n    constructor(lhs, rhs, sideEffects) {\n        super();\n        this.lhs = lhs;\n        this.rhs = rhs;\n        this.sideEffects = sideEffects;\n    }\n    render({ _n }) {\n        return `${this.lhs} = ${this.rhs};` + _n;\n    }\n    optimizeNames(names, constants) {\n        if (this.lhs instanceof code_1.Name && !names[this.lhs.str] && !this.sideEffects)\n            return;\n        this.rhs = optimizeExpr(this.rhs, names, constants);\n        return this;\n    }\n    get names() {\n        const names = this.lhs instanceof code_1.Name ? {} : { ...this.lhs.names };\n        return addExprNames(names, this.rhs);\n    }\n}\nclass AssignOp extends Assign {\n    constructor(lhs, op, rhs, sideEffects) {\n        super(lhs, rhs, sideEffects);\n        this.op = op;\n    }\n    render({ _n }) {\n        return `${this.lhs} ${this.op}= ${this.rhs};` + _n;\n    }\n}\nclass Label extends Node {\n    constructor(label) {\n        super();\n        this.label = label;\n        this.names = {};\n    }\n    render({ _n }) {\n        return `${this.label}:` + _n;\n    }\n}\nclass Break extends Node {\n    constructor(label) {\n        super();\n        this.label = label;\n        this.names = {};\n    }\n    render({ _n }) {\n        const label = this.label ? ` ${this.label}` : \"\";\n        return `break${label};` + _n;\n    }\n}\nclass Throw extends Node {\n    constructor(error) {\n        super();\n        this.error = error;\n    }\n    render({ _n }) {\n        return `throw ${this.error};` + _n;\n    }\n    get names() {\n        return this.error.names;\n    }\n}\nclass AnyCode extends Node {\n    constructor(code) {\n        super();\n        this.code = code;\n    }\n    render({ _n }) {\n        return `${this.code};` + _n;\n    }\n    optimizeNodes() {\n        return `${this.code}` ? this : undefined;\n    }\n    optimizeNames(names, constants) {\n        this.code = optimizeExpr(this.code, names, constants);\n        return this;\n    }\n    get names() {\n        return this.code instanceof code_1._CodeOrName ? this.code.names : {};\n    }\n}\nclass ParentNode extends Node {\n    constructor(nodes = []) {\n        super();\n        this.nodes = nodes;\n    }\n    render(opts) {\n        return this.nodes.reduce((code, n) => code + n.render(opts), \"\");\n    }\n    optimizeNodes() {\n        const { nodes } = this;\n        let i = nodes.length;\n        while (i--) {\n            const n = nodes[i].optimizeNodes();\n            if (Array.isArray(n))\n                nodes.splice(i, 1, ...n);\n            else if (n)\n                nodes[i] = n;\n            else\n                nodes.splice(i, 1);\n        }\n        return nodes.length > 0 ? this : undefined;\n    }\n    optimizeNames(names, constants) {\n        const { nodes } = this;\n        let i = nodes.length;\n        while (i--) {\n            // iterating backwards improves 1-pass optimization\n            const n = nodes[i];\n            if (n.optimizeNames(names, constants))\n                continue;\n            subtractNames(names, n.names);\n            nodes.splice(i, 1);\n        }\n        return nodes.length > 0 ? this : undefined;\n    }\n    get names() {\n        return this.nodes.reduce((names, n) => addNames(names, n.names), {});\n    }\n}\nclass BlockNode extends ParentNode {\n    render(opts) {\n        return \"{\" + opts._n + super.render(opts) + \"}\" + opts._n;\n    }\n}\nclass Root extends ParentNode {\n}\nclass Else extends BlockNode {\n}\nElse.kind = \"else\";\nclass If extends BlockNode {\n    constructor(condition, nodes) {\n        super(nodes);\n        this.condition = condition;\n    }\n    render(opts) {\n        let code = `if(${this.condition})` + super.render(opts);\n        if (this.else)\n            code += \"else \" + this.else.render(opts);\n        return code;\n    }\n    optimizeNodes() {\n        super.optimizeNodes();\n        const cond = this.condition;\n        if (cond === true)\n            return this.nodes; // else is ignored here\n        let e = this.else;\n        if (e) {\n            const ns = e.optimizeNodes();\n            e = this.else = Array.isArray(ns) ? new Else(ns) : ns;\n        }\n        if (e) {\n            if (cond === false)\n                return e instanceof If ? e : e.nodes;\n            if (this.nodes.length)\n                return this;\n            return new If(not(cond), e instanceof If ? [e] : e.nodes);\n        }\n        if (cond === false || !this.nodes.length)\n            return undefined;\n        return this;\n    }\n    optimizeNames(names, constants) {\n        var _a;\n        this.else = (_a = this.else) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);\n        if (!(super.optimizeNames(names, constants) || this.else))\n            return;\n        this.condition = optimizeExpr(this.condition, names, constants);\n        return this;\n    }\n    get names() {\n        const names = super.names;\n        addExprNames(names, this.condition);\n        if (this.else)\n            addNames(names, this.else.names);\n        return names;\n    }\n}\nIf.kind = \"if\";\nclass For extends BlockNode {\n}\nFor.kind = \"for\";\nclass ForLoop extends For {\n    constructor(iteration) {\n        super();\n        this.iteration = iteration;\n    }\n    render(opts) {\n        return `for(${this.iteration})` + super.render(opts);\n    }\n    optimizeNames(names, constants) {\n        if (!super.optimizeNames(names, constants))\n            return;\n        this.iteration = optimizeExpr(this.iteration, names, constants);\n        return this;\n    }\n    get names() {\n        return addNames(super.names, this.iteration.names);\n    }\n}\nclass ForRange extends For {\n    constructor(varKind, name, from, to) {\n        super();\n        this.varKind = varKind;\n        this.name = name;\n        this.from = from;\n        this.to = to;\n    }\n    render(opts) {\n        const varKind = opts.es5 ? scope_1.varKinds.var : this.varKind;\n        const { name, from, to } = this;\n        return `for(${varKind} ${name}=${from}; ${name}<${to}; ${name}++)` + super.render(opts);\n    }\n    get names() {\n        const names = addExprNames(super.names, this.from);\n        return addExprNames(names, this.to);\n    }\n}\nclass ForIter extends For {\n    constructor(loop, varKind, name, iterable) {\n        super();\n        this.loop = loop;\n        this.varKind = varKind;\n        this.name = name;\n        this.iterable = iterable;\n    }\n    render(opts) {\n        return `for(${this.varKind} ${this.name} ${this.loop} ${this.iterable})` + super.render(opts);\n    }\n    optimizeNames(names, constants) {\n        if (!super.optimizeNames(names, constants))\n            return;\n        this.iterable = optimizeExpr(this.iterable, names, constants);\n        return this;\n    }\n    get names() {\n        return addNames(super.names, this.iterable.names);\n    }\n}\nclass Func extends BlockNode {\n    constructor(name, args, async) {\n        super();\n        this.name = name;\n        this.args = args;\n        this.async = async;\n    }\n    render(opts) {\n        const _async = this.async ? \"async \" : \"\";\n        return `${_async}function ${this.name}(${this.args})` + super.render(opts);\n    }\n}\nFunc.kind = \"func\";\nclass Return extends ParentNode {\n    render(opts) {\n        return \"return \" + super.render(opts);\n    }\n}\nReturn.kind = \"return\";\nclass Try extends BlockNode {\n    render(opts) {\n        let code = \"try\" + super.render(opts);\n        if (this.catch)\n            code += this.catch.render(opts);\n        if (this.finally)\n            code += this.finally.render(opts);\n        return code;\n    }\n    optimizeNodes() {\n        var _a, _b;\n        super.optimizeNodes();\n        (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNodes();\n        (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNodes();\n        return this;\n    }\n    optimizeNames(names, constants) {\n        var _a, _b;\n        super.optimizeNames(names, constants);\n        (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);\n        (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNames(names, constants);\n        return this;\n    }\n    get names() {\n        const names = super.names;\n        if (this.catch)\n            addNames(names, this.catch.names);\n        if (this.finally)\n            addNames(names, this.finally.names);\n        return names;\n    }\n}\nclass Catch extends BlockNode {\n    constructor(error) {\n        super();\n        this.error = error;\n    }\n    render(opts) {\n        return `catch(${this.error})` + super.render(opts);\n    }\n}\nCatch.kind = \"catch\";\nclass Finally extends BlockNode {\n    render(opts) {\n        return \"finally\" + super.render(opts);\n    }\n}\nFinally.kind = \"finally\";\nclass CodeGen {\n    constructor(extScope, opts = {}) {\n        this._values = {};\n        this._blockStarts = [];\n        this._constants = {};\n        this.opts = { ...opts, _n: opts.lines ? \"\\n\" : \"\" };\n        this._extScope = extScope;\n        this._scope = new scope_1.Scope({ parent: extScope });\n        this._nodes = [new Root()];\n    }\n    toString() {\n        return this._root.render(this.opts);\n    }\n    // returns unique name in the internal scope\n    name(prefix) {\n        return this._scope.name(prefix);\n    }\n    // reserves unique name in the external scope\n    scopeName(prefix) {\n        return this._extScope.name(prefix);\n    }\n    // reserves unique name in the external scope and assigns value to it\n    scopeValue(prefixOrName, value) {\n        const name = this._extScope.value(prefixOrName, value);\n        const vs = this._values[name.prefix] || (this._values[name.prefix] = new Set());\n        vs.add(name);\n        return name;\n    }\n    getScopeValue(prefix, keyOrRef) {\n        return this._extScope.getValue(prefix, keyOrRef);\n    }\n    // return code that assigns values in the external scope to the names that are used internally\n    // (same names that were returned by gen.scopeName or gen.scopeValue)\n    scopeRefs(scopeName) {\n        return this._extScope.scopeRefs(scopeName, this._values);\n    }\n    scopeCode() {\n        return this._extScope.scopeCode(this._values);\n    }\n    _def(varKind, nameOrPrefix, rhs, constant) {\n        const name = this._scope.toName(nameOrPrefix);\n        if (rhs !== undefined && constant)\n            this._constants[name.str] = rhs;\n        this._leafNode(new Def(varKind, name, rhs));\n        return name;\n    }\n    // `const` declaration (`var` in es5 mode)\n    const(nameOrPrefix, rhs, _constant) {\n        return this._def(scope_1.varKinds.const, nameOrPrefix, rhs, _constant);\n    }\n    // `let` declaration with optional assignment (`var` in es5 mode)\n    let(nameOrPrefix, rhs, _constant) {\n        return this._def(scope_1.varKinds.let, nameOrPrefix, rhs, _constant);\n    }\n    // `var` declaration with optional assignment\n    var(nameOrPrefix, rhs, _constant) {\n        return this._def(scope_1.varKinds.var, nameOrPrefix, rhs, _constant);\n    }\n    // assignment code\n    assign(lhs, rhs, sideEffects) {\n        return this._leafNode(new Assign(lhs, rhs, sideEffects));\n    }\n    // `+=` code\n    add(lhs, rhs) {\n        return this._leafNode(new AssignOp(lhs, exports.operators.ADD, rhs));\n    }\n    // appends passed SafeExpr to code or executes Block\n    code(c) {\n        if (typeof c == \"function\")\n            c();\n        else if (c !== code_1.nil)\n            this._leafNode(new AnyCode(c));\n        return this;\n    }\n    // returns code for object literal for the passed argument list of key-value pairs\n    object(...keyValues) {\n        const code = [\"{\"];\n        for (const [key, value] of keyValues) {\n            if (code.length > 1)\n                code.push(\",\");\n            code.push(key);\n            if (key !== value || this.opts.es5) {\n                code.push(\":\");\n                (0, code_1.addCodeArg)(code, value);\n            }\n        }\n        code.push(\"}\");\n        return new code_1._Code(code);\n    }\n    // `if` clause (or statement if `thenBody` and, optionally, `elseBody` are passed)\n    if(condition, thenBody, elseBody) {\n        this._blockNode(new If(condition));\n        if (thenBody && elseBody) {\n            this.code(thenBody).else().code(elseBody).endIf();\n        }\n        else if (thenBody) {\n            this.code(thenBody).endIf();\n        }\n        else if (elseBody) {\n            throw new Error('CodeGen: \"else\" body without \"then\" body');\n        }\n        return this;\n    }\n    // `else if` clause - invalid without `if` or after `else` clauses\n    elseIf(condition) {\n        return this._elseNode(new If(condition));\n    }\n    // `else` clause - only valid after `if` or `else if` clauses\n    else() {\n        return this._elseNode(new Else());\n    }\n    // end `if` statement (needed if gen.if was used only with condition)\n    endIf() {\n        return this._endBlockNode(If, Else);\n    }\n    _for(node, forBody) {\n        this._blockNode(node);\n        if (forBody)\n            this.code(forBody).endFor();\n        return this;\n    }\n    // a generic `for` clause (or statement if `forBody` is passed)\n    for(iteration, forBody) {\n        return this._for(new ForLoop(iteration), forBody);\n    }\n    // `for` statement for a range of values\n    forRange(nameOrPrefix, from, to, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.let) {\n        const name = this._scope.toName(nameOrPrefix);\n        return this._for(new ForRange(varKind, name, from, to), () => forBody(name));\n    }\n    // `for-of` statement (in es5 mode replace with a normal for loop)\n    forOf(nameOrPrefix, iterable, forBody, varKind = scope_1.varKinds.const) {\n        const name = this._scope.toName(nameOrPrefix);\n        if (this.opts.es5) {\n            const arr = iterable instanceof code_1.Name ? iterable : this.var(\"_arr\", iterable);\n            return this.forRange(\"_i\", 0, (0, code_1._) `${arr}.length`, (i) => {\n                this.var(name, (0, code_1._) `${arr}[${i}]`);\n                forBody(name);\n            });\n        }\n        return this._for(new ForIter(\"of\", varKind, name, iterable), () => forBody(name));\n    }\n    // `for-in` statement.\n    // With option `ownProperties` replaced with a `for-of` loop for object keys\n    forIn(nameOrPrefix, obj, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.const) {\n        if (this.opts.ownProperties) {\n            return this.forOf(nameOrPrefix, (0, code_1._) `Object.keys(${obj})`, forBody);\n        }\n        const name = this._scope.toName(nameOrPrefix);\n        return this._for(new ForIter(\"in\", varKind, name, obj), () => forBody(name));\n    }\n    // end `for` loop\n    endFor() {\n        return this._endBlockNode(For);\n    }\n    // `label` statement\n    label(label) {\n        return this._leafNode(new Label(label));\n    }\n    // `break` statement\n    break(label) {\n        return this._leafNode(new Break(label));\n    }\n    // `return` statement\n    return(value) {\n        const node = new Return();\n        this._blockNode(node);\n        this.code(value);\n        if (node.nodes.length !== 1)\n            throw new Error('CodeGen: \"return\" should have one node');\n        return this._endBlockNode(Return);\n    }\n    // `try` statement\n    try(tryBody, catchCode, finallyCode) {\n        if (!catchCode && !finallyCode)\n            throw new Error('CodeGen: \"try\" without \"catch\" and \"finally\"');\n        const node = new Try();\n        this._blockNode(node);\n        this.code(tryBody);\n        if (catchCode) {\n            const error = this.name(\"e\");\n            this._currNode = node.catch = new Catch(error);\n            catchCode(error);\n        }\n        if (finallyCode) {\n            this._currNode = node.finally = new Finally();\n            this.code(finallyCode);\n        }\n        return this._endBlockNode(Catch, Finally);\n    }\n    // `throw` statement\n    throw(error) {\n        return this._leafNode(new Throw(error));\n    }\n    // start self-balancing block\n    block(body, nodeCount) {\n        this._blockStarts.push(this._nodes.length);\n        if (body)\n            this.code(body).endBlock(nodeCount);\n        return this;\n    }\n    // end the current self-balancing block\n    endBlock(nodeCount) {\n        const len = this._blockStarts.pop();\n        if (len === undefined)\n            throw new Error(\"CodeGen: not in self-balancing block\");\n        const toClose = this._nodes.length - len;\n        if (toClose < 0 || (nodeCount !== undefined && toClose !== nodeCount)) {\n            throw new Error(`CodeGen: wrong number of nodes: ${toClose} vs ${nodeCount} expected`);\n        }\n        this._nodes.length = len;\n        return this;\n    }\n    // `function` heading (or definition if funcBody is passed)\n    func(name, args = code_1.nil, async, funcBody) {\n        this._blockNode(new Func(name, args, async));\n        if (funcBody)\n            this.code(funcBody).endFunc();\n        return this;\n    }\n    // end function definition\n    endFunc() {\n        return this._endBlockNode(Func);\n    }\n    optimize(n = 1) {\n        while (n-- > 0) {\n            this._root.optimizeNodes();\n            this._root.optimizeNames(this._root.names, this._constants);\n        }\n    }\n    _leafNode(node) {\n        this._currNode.nodes.push(node);\n        return this;\n    }\n    _blockNode(node) {\n        this._currNode.nodes.push(node);\n        this._nodes.push(node);\n    }\n    _endBlockNode(N1, N2) {\n        const n = this._currNode;\n        if (n instanceof N1 || (N2 && n instanceof N2)) {\n            this._nodes.pop();\n            return this;\n        }\n        throw new Error(`CodeGen: not in block \"${N2 ? `${N1.kind}/${N2.kind}` : N1.kind}\"`);\n    }\n    _elseNode(node) {\n        const n = this._currNode;\n        if (!(n instanceof If)) {\n            throw new Error('CodeGen: \"else\" without \"if\"');\n        }\n        this._currNode = n.else = node;\n        return this;\n    }\n    get _root() {\n        return this._nodes[0];\n    }\n    get _currNode() {\n        const ns = this._nodes;\n        return ns[ns.length - 1];\n    }\n    set _currNode(node) {\n        const ns = this._nodes;\n        ns[ns.length - 1] = node;\n    }\n}\nexports.CodeGen = CodeGen;\nfunction addNames(names, from) {\n    for (const n in from)\n        names[n] = (names[n] || 0) + (from[n] || 0);\n    return names;\n}\nfunction addExprNames(names, from) {\n    return from instanceof code_1._CodeOrName ? addNames(names, from.names) : names;\n}\nfunction optimizeExpr(expr, names, constants) {\n    if (expr instanceof code_1.Name)\n        return replaceName(expr);\n    if (!canOptimize(expr))\n        return expr;\n    return new code_1._Code(expr._items.reduce((items, c) => {\n        if (c instanceof code_1.Name)\n            c = replaceName(c);\n        if (c instanceof code_1._Code)\n            items.push(...c._items);\n        else\n            items.push(c);\n        return items;\n    }, []));\n    function replaceName(n) {\n        const c = constants[n.str];\n        if (c === undefined || names[n.str] !== 1)\n            return n;\n        delete names[n.str];\n        return c;\n    }\n    function canOptimize(e) {\n        return (e instanceof code_1._Code &&\n            e._items.some((c) => c instanceof code_1.Name && names[c.str] === 1 && constants[c.str] !== undefined));\n    }\n}\nfunction subtractNames(names, from) {\n    for (const n in from)\n        names[n] = (names[n] || 0) - (from[n] || 0);\n}\nfunction not(x) {\n    return typeof x == \"boolean\" || typeof x == \"number\" || x === null ? !x : (0, code_1._) `!${par(x)}`;\n}\nexports.not = not;\nconst andCode = mappend(exports.operators.AND);\n// boolean AND (&&) expression with the passed arguments\nfunction and(...args) {\n    return args.reduce(andCode);\n}\nexports.and = and;\nconst orCode = mappend(exports.operators.OR);\n// boolean OR (||) expression with the passed arguments\nfunction or(...args) {\n    return args.reduce(orCode);\n}\nexports.or = or;\nfunction mappend(op) {\n    return (x, y) => (x === code_1.nil ? y : y === code_1.nil ? x : (0, code_1._) `${par(x)} ${op} ${par(y)}`);\n}\nfunction par(x) {\n    return x instanceof code_1.Name ? x : (0, code_1._) `(${x})`;\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}