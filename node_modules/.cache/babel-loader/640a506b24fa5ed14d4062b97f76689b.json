{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/home/aander-cl/Documents/jsonforms/jsonforms-react-seed/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"!\", \".test(\", \")\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"(new RegExp(\", \", \", \"))\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"{pattern: \", \"}\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"must match pattern \\\"\", \"\\\"\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar code_1 = require(\"../code\");\n\nvar codegen_1 = require(\"../../compile/codegen\");\n\nvar error = {\n  message: function message(_ref) {\n    var schemaCode = _ref.schemaCode;\n    return (0, codegen_1.str)(_templateObject(), schemaCode);\n  },\n  params: function params(_ref2) {\n    var schemaCode = _ref2.schemaCode;\n    return (0, codegen_1._)(_templateObject2(), schemaCode);\n  }\n};\nvar def = {\n  keyword: \"pattern\",\n  type: \"string\",\n  schemaType: \"string\",\n  $data: true,\n  error,\n\n  code(cxt) {\n    var data = cxt.data,\n        $data = cxt.$data,\n        schema = cxt.schema,\n        schemaCode = cxt.schemaCode,\n        it = cxt.it; // TODO regexp should be wrapped in try/catchs\n\n    var u = it.opts.unicodeRegExp ? \"u\" : \"\";\n    var regExp = $data ? (0, codegen_1._)(_templateObject3(), schemaCode, u) : (0, code_1.usePattern)(cxt, schema);\n    cxt.fail$data((0, codegen_1._)(_templateObject4(), regExp, data));\n  }\n\n};\nexports.default = def;","map":{"version":3,"sources":["../../../lib/vocabularies/validation/pattern.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAA,MAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AACA,IAAA,SAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AAIA,IAAM,KAAK,GAA2B;AACpC,EAAA,OAAO,EAAE;AAAA,QAAE,UAAF,QAAE,UAAF;AAAA,YAAkB,GAAA,SAAA,CAAA,GAAlB,qBAA4C,UAA5C;AAAA,GAD2B;AAEpC,EAAA,MAAM,EAAE;AAAA,QAAE,UAAF,SAAE,UAAF;AAAA,YAAkB,GAAA,SAAA,CAAA,CAAlB,sBAAgC,UAAhC;AAAA;AAF4B,CAAtC;AAKA,IAAM,GAAG,GAA0B;AACjC,EAAA,OAAO,EAAE,SADwB;AAEjC,EAAA,IAAI,EAAE,QAF2B;AAGjC,EAAA,UAAU,EAAE,QAHqB;AAIjC,EAAA,KAAK,EAAE,IAJ0B;AAKjC,EAAA,KALiC;;AAMjC,EAAA,IAAI,CAAC,GAAD,EAAgB;AAAA,QACX,IADW,GAC4B,GAD5B,CACX,IADW;AAAA,QACL,KADK,GAC4B,GAD5B,CACL,KADK;AAAA,QACE,MADF,GAC4B,GAD5B,CACE,MADF;AAAA,QACU,UADV,GAC4B,GAD5B,CACU,UADV;AAAA,QACsB,EADtB,GAC4B,GAD5B,CACsB,EADtB,EAElB;;AACA,QAAM,CAAC,GAAG,EAAE,CAAC,IAAH,CAAQ,aAAR,GAAwB,GAAxB,GAA8B,EAAxC;AACA,QAAM,MAAM,GAAG,KAAK,IAAG,GAAA,SAAA,CAAA,CAAH,sBAAmB,UAAnB,EAAkC,CAAlC,IAA0C,CAAA,GAAA,MAAA,CAAA,UAAA,EAAW,GAAX,EAAgB,MAAhB,CAA9D;AACA,IAAA,GAAG,CAAC,SAAJ,EAAc,GAAA,SAAA,CAAA,CAAd,sBAAmB,MAAnB,EAAkC,IAAlC;AACD;;AAZgC,CAAnC;AAeA,OAAA,CAAA,OAAA,GAAe,GAAf","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst code_1 = require(\"../code\");\nconst codegen_1 = require(\"../../compile/codegen\");\nconst error = {\n    message: ({ schemaCode }) => (0, codegen_1.str) `must match pattern \"${schemaCode}\"`,\n    params: ({ schemaCode }) => (0, codegen_1._) `{pattern: ${schemaCode}}`,\n};\nconst def = {\n    keyword: \"pattern\",\n    type: \"string\",\n    schemaType: \"string\",\n    $data: true,\n    error,\n    code(cxt) {\n        const { data, $data, schema, schemaCode, it } = cxt;\n        // TODO regexp should be wrapped in try/catchs\n        const u = it.opts.unicodeRegExp ? \"u\" : \"\";\n        const regExp = $data ? (0, codegen_1._) `(new RegExp(${schemaCode}, ${u}))` : (0, code_1.usePattern)(cxt, schema);\n        cxt.fail$data((0, codegen_1._) `!${regExp}.test(${data})`);\n    },\n};\nexports.default = def;\n//# sourceMappingURL=pattern.js.map"]},"metadata":{},"sourceType":"script"}