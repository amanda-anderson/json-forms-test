{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar geocodeByAddress = exports.geocodeByAddress = function geocodeByAddress(address, callback) {\n  var geocoder = new google.maps.Geocoder();\n  var OK = google.maps.GeocoderStatus.OK;\n  return new Promise(function (resolve, reject) {\n    geocoder.geocode({\n      address: address\n    }, function (results, status) {\n      if (status !== OK) {\n        // TODO: Remove callback support in the next major version.\n        if (callback) {\n          console.warn('Deprecated: Passing a callback to geocodeByAddress is deprecated. Please see \"https://github.com/kenny-hibino/react-places-autocomplete#geocodebyaddress-api\"');\n          callback({\n            status: status\n          }, null, results);\n          return;\n        }\n\n        reject(status);\n      } // TODO: Remove callback support in the next major version.\n\n\n      if (callback) {\n        var latLng = {\n          lat: results[0].geometry.location.lat(),\n          lng: results[0].geometry.location.lng()\n        };\n        console.warn('Deprecated: Passing a callback to geocodeByAddress is deprecated. Please see \"https://github.com/kenny-hibino/react-places-autocomplete#geocodebyaddress-api\"');\n        callback(null, latLng, results);\n      }\n\n      resolve(results);\n    });\n  });\n};\n\nvar getLatLng = exports.getLatLng = function getLatLng(result) {\n  return new Promise(function (resolve, reject) {\n    try {\n      var latLng = {\n        lat: result.geometry.location.lat(),\n        lng: result.geometry.location.lng()\n      };\n      resolve(latLng);\n    } catch (e) {\n      reject(e);\n    }\n  });\n};\n\nvar geocodeByPlaceId = exports.geocodeByPlaceId = function geocodeByPlaceId(placeId, callback) {\n  var geocoder = new google.maps.Geocoder();\n  var OK = google.maps.GeocoderStatus.OK;\n  return new Promise(function (resolve, reject) {\n    geocoder.geocode({\n      placeId: placeId\n    }, function (results, status) {\n      if (status !== OK) {\n        // TODO: Remove callback support in the next major version.\n        if (callback) {\n          console.warn('Deprecated: Passing a callback to geocodeByAddress is deprecated. Please see \"https://github.com/kenny-hibino/react-places-autocomplete#geocodebyplaceid-api\"');\n          callback({\n            status: status\n          }, null, results);\n          return;\n        }\n\n        reject(status);\n      } // TODO: Remove callback support in the next major version.\n\n\n      if (callback) {\n        var latLng = {\n          lat: results[0].geometry.location.lat(),\n          lng: results[0].geometry.location.lng()\n        };\n        console.warn('Deprecated: Passing a callback to geocodeByPlaceId is deprecated. Please see \"https://github.com/kenny-hibino/react-places-autocomplete#geocodebyplaceid-api\"');\n        callback(null, latLng, results);\n      }\n\n      resolve(results);\n    });\n  });\n};","map":{"version":3,"sources":["/home/aander-cl/Documents/jsonforms/jsonforms-react-seed/node_modules/react-places-autocomplete/dist/utils.js"],"names":["Object","defineProperty","exports","value","geocodeByAddress","address","callback","geocoder","google","maps","Geocoder","OK","GeocoderStatus","Promise","resolve","reject","geocode","results","status","console","warn","latLng","lat","geometry","location","lng","getLatLng","result","e","geocodeByPlaceId","placeId"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar geocodeByAddress = exports.geocodeByAddress = function geocodeByAddress(address, callback) {\n  var geocoder = new google.maps.Geocoder();\n  var OK = google.maps.GeocoderStatus.OK;\n\n  return new Promise(function (resolve, reject) {\n    geocoder.geocode({ address: address }, function (results, status) {\n      if (status !== OK) {\n        // TODO: Remove callback support in the next major version.\n        if (callback) {\n          console.warn('Deprecated: Passing a callback to geocodeByAddress is deprecated. Please see \"https://github.com/kenny-hibino/react-places-autocomplete#geocodebyaddress-api\"');\n          callback({ status: status }, null, results);\n          return;\n        }\n\n        reject(status);\n      }\n\n      // TODO: Remove callback support in the next major version.\n      if (callback) {\n        var latLng = {\n          lat: results[0].geometry.location.lat(),\n          lng: results[0].geometry.location.lng()\n        };\n        console.warn('Deprecated: Passing a callback to geocodeByAddress is deprecated. Please see \"https://github.com/kenny-hibino/react-places-autocomplete#geocodebyaddress-api\"');\n        callback(null, latLng, results);\n      }\n\n      resolve(results);\n    });\n  });\n};\n\nvar getLatLng = exports.getLatLng = function getLatLng(result) {\n  return new Promise(function (resolve, reject) {\n    try {\n      var latLng = {\n        lat: result.geometry.location.lat(),\n        lng: result.geometry.location.lng()\n      };\n      resolve(latLng);\n    } catch (e) {\n      reject(e);\n    }\n  });\n};\n\nvar geocodeByPlaceId = exports.geocodeByPlaceId = function geocodeByPlaceId(placeId, callback) {\n  var geocoder = new google.maps.Geocoder();\n  var OK = google.maps.GeocoderStatus.OK;\n\n  return new Promise(function (resolve, reject) {\n    geocoder.geocode({ placeId: placeId }, function (results, status) {\n      if (status !== OK) {\n        // TODO: Remove callback support in the next major version.\n        if (callback) {\n          console.warn('Deprecated: Passing a callback to geocodeByAddress is deprecated. Please see \"https://github.com/kenny-hibino/react-places-autocomplete#geocodebyplaceid-api\"');\n          callback({ status: status }, null, results);\n          return;\n        }\n\n        reject(status);\n      }\n\n      // TODO: Remove callback support in the next major version.\n      if (callback) {\n        var latLng = {\n          lat: results[0].geometry.location.lat(),\n          lng: results[0].geometry.location.lng()\n        };\n        console.warn('Deprecated: Passing a callback to geocodeByPlaceId is deprecated. Please see \"https://github.com/kenny-hibino/react-places-autocomplete#geocodebyplaceid-api\"');\n        callback(null, latLng, results);\n      }\n\n      resolve(results);\n    });\n  });\n};"]},"metadata":{},"sourceType":"script"}