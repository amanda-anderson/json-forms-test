{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/home/aander-cl/Documents/jsonforms/jsonforms-react-seed/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _slicedToArray = require(\"/home/aander-cl/Documents/jsonforms/jsonforms-react-seed/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _taggedTemplateLiteral = require(\"/home/aander-cl/Documents/jsonforms/jsonforms-react-seed/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\", \" && (\", \")\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"{property: \", \",\\n    missingProperty: \", \",\\n    depsCount: \", \",\\n    deps: \", \"}\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"must have \", \" \", \" when property \", \" is present\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateSchemaDeps = exports.validatePropertyDeps = exports.error = void 0;\n\nvar codegen_1 = require(\"../../compile/codegen\");\n\nvar util_1 = require(\"../../compile/util\");\n\nvar code_1 = require(\"../code\");\n\nexports.error = {\n  message: function message(_ref) {\n    var _ref$params = _ref.params,\n        property = _ref$params.property,\n        depsCount = _ref$params.depsCount,\n        deps = _ref$params.deps;\n    var property_ies = depsCount === 1 ? \"property\" : \"properties\";\n    return (0, codegen_1.str)(_templateObject(), property_ies, deps, property);\n  },\n  params: function params(_ref2) {\n    var _ref2$params = _ref2.params,\n        property = _ref2$params.property,\n        depsCount = _ref2$params.depsCount,\n        deps = _ref2$params.deps,\n        missingProperty = _ref2$params.missingProperty;\n    return (0, codegen_1._)(_templateObject2(), property, missingProperty, depsCount, deps);\n  } // TODO change to reference\n\n};\nvar def = {\n  keyword: \"dependencies\",\n  type: \"object\",\n  schemaType: \"object\",\n  error: exports.error,\n\n  code(cxt) {\n    var _splitDependencies = splitDependencies(cxt),\n        _splitDependencies2 = _slicedToArray(_splitDependencies, 2),\n        propDeps = _splitDependencies2[0],\n        schDeps = _splitDependencies2[1];\n\n    validatePropertyDeps(cxt, propDeps);\n    validateSchemaDeps(cxt, schDeps);\n  }\n\n};\n\nfunction splitDependencies(_ref3) {\n  var schema = _ref3.schema;\n  var propertyDeps = {};\n  var schemaDeps = {};\n\n  for (var key in schema) {\n    if (key === \"__proto__\") continue;\n    var deps = Array.isArray(schema[key]) ? propertyDeps : schemaDeps;\n    deps[key] = schema[key];\n  }\n\n  return [propertyDeps, schemaDeps];\n}\n\nfunction validatePropertyDeps(cxt) {\n  var propertyDeps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : cxt.schema;\n  var gen = cxt.gen,\n      data = cxt.data,\n      it = cxt.it;\n  if (Object.keys(propertyDeps).length === 0) return;\n  var missing = gen.let(\"missing\");\n\n  var _loop = function _loop(prop) {\n    var deps = propertyDeps[prop];\n    if (deps.length === 0) return \"continue\";\n    var hasProperty = (0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties);\n    cxt.setParams({\n      property: prop,\n      depsCount: deps.length,\n      deps: deps.join(\", \")\n    });\n\n    if (it.allErrors) {\n      gen.if(hasProperty, function () {\n        var _iterator = _createForOfIteratorHelper(deps),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var depProp = _step.value;\n            (0, code_1.checkReportMissingProp)(cxt, depProp);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      });\n    } else {\n      gen.if((0, codegen_1._)(_templateObject3(), hasProperty, (0, code_1.checkMissingProp)(cxt, deps, missing)));\n      (0, code_1.reportMissingProp)(cxt, missing);\n      gen.else();\n    }\n  };\n\n  for (var prop in propertyDeps) {\n    var _ret = _loop(prop);\n\n    if (_ret === \"continue\") continue;\n  }\n}\n\nexports.validatePropertyDeps = validatePropertyDeps;\n\nfunction validateSchemaDeps(cxt) {\n  var schemaDeps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : cxt.schema;\n  var gen = cxt.gen,\n      data = cxt.data,\n      keyword = cxt.keyword,\n      it = cxt.it;\n  var valid = gen.name(\"valid\");\n\n  var _loop2 = function _loop2(prop) {\n    if ((0, util_1.alwaysValidSchema)(it, schemaDeps[prop])) return \"continue\";\n    gen.if((0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties), function () {\n      var schCxt = cxt.subschema({\n        keyword,\n        schemaProp: prop\n      }, valid);\n      cxt.mergeValidEvaluated(schCxt, valid);\n    }, function () {\n      return gen.var(valid, true);\n    } // TODO var\n    );\n    cxt.ok(valid);\n  };\n\n  for (var prop in schemaDeps) {\n    var _ret2 = _loop2(prop);\n\n    if (_ret2 === \"continue\") continue;\n  }\n}\n\nexports.validateSchemaDeps = validateSchemaDeps;\nexports.default = def;","map":{"version":3,"sources":["../../../lib/vocabularies/applicator/dependencies.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA,IAAA,SAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAmBa,OAAA,CAAA,KAAA,GAAgC;AAC3C,EAAA,OAAO,EAAE,uBAA0C;AAAA,2BAAxC,MAAwC;AAAA,QAA/B,QAA+B,eAA/B,QAA+B;AAAA,QAArB,SAAqB,eAArB,SAAqB;AAAA,QAAV,IAAU,eAAV,IAAU;AACjD,QAAM,YAAY,GAAG,SAAS,KAAK,CAAd,GAAkB,UAAlB,GAA+B,YAApD;AACA,YAAO,GAAA,SAAA,CAAA,GAAP,qBAAuB,YAAvB,EAAuC,IAAvC,EAA6D,QAA7D;AACD,GAJ0C;AAK3C,EAAA,MAAM,EAAE;AAAA,6BAAE,MAAF;AAAA,QAAW,QAAX,gBAAW,QAAX;AAAA,QAAqB,SAArB,gBAAqB,SAArB;AAAA,QAAgC,IAAhC,gBAAgC,IAAhC;AAAA,QAAsC,eAAtC,gBAAsC,eAAtC;AAAA,YACN,GAAA,SAAA,CAAA,CADM,sBACS,QADT,EAEa,eAFb,EAGO,SAHP,EAIE,IAJF;AAAA,GALmC,CASxB;;AATwB,CAAhC;AAYb,IAAM,GAAG,GAA0B;AACjC,EAAA,OAAO,EAAE,cADwB;AAEjC,EAAA,IAAI,EAAE,QAF2B;AAGjC,EAAA,UAAU,EAAE,QAHqB;AAIjC,EAAA,KAAK,EAAL,OAAA,CAAA,KAJiC;;AAKjC,EAAA,IAAI,CAAC,GAAD,EAAgB;AAAA,6BACU,iBAAiB,CAAC,GAAD,CAD3B;AAAA;AAAA,QACX,QADW;AAAA,QACD,OADC;;AAElB,IAAA,oBAAoB,CAAC,GAAD,EAAM,QAAN,CAApB;AACA,IAAA,kBAAkB,CAAC,GAAD,EAAM,OAAN,CAAlB;AACD;;AATgC,CAAnC;;AAYA,SAAS,iBAAT,QAA+C;AAAA,MAAnB,MAAmB,SAAnB,MAAmB;AAC7C,MAAM,YAAY,GAAyB,EAA3C;AACA,MAAM,UAAU,GAAuB,EAAvC;;AACA,OAAK,IAAM,GAAX,IAAkB,MAAlB,EAA0B;AACxB,QAAI,GAAG,KAAK,WAAZ,EAAyB;AACzB,QAAM,IAAI,GAAG,KAAK,CAAC,OAAN,CAAc,MAAM,CAAC,GAAD,CAApB,IAA6B,YAA7B,GAA4C,UAAzD;AACA,IAAA,IAAI,CAAC,GAAD,CAAJ,GAAY,MAAM,CAAC,GAAD,CAAlB;AACD;;AACD,SAAO,CAAC,YAAD,EAAe,UAAf,CAAP;AACD;;AAED,SAAgB,oBAAhB,CACE,GADF,EAEuD;AAAA,MAArD,YAAqD,uEAAV,GAAG,CAAC,MAAM;AAAA,MAE9C,GAF8C,GAE7B,GAF6B,CAE9C,GAF8C;AAAA,MAEzC,IAFyC,GAE7B,GAF6B,CAEzC,IAFyC;AAAA,MAEnC,EAFmC,GAE7B,GAF6B,CAEnC,EAFmC;AAGrD,MAAI,MAAM,CAAC,IAAP,CAAY,YAAZ,EAA0B,MAA1B,KAAqC,CAAzC,EAA4C;AAC5C,MAAM,OAAO,GAAG,GAAG,CAAC,GAAJ,CAAQ,SAAR,CAAhB;;AAJqD,6BAK1C,IAL0C;AAMnD,QAAM,IAAI,GAAG,YAAY,CAAC,IAAD,CAAzB;AACA,QAAI,IAAI,CAAC,MAAL,KAAgB,CAApB,EAAuB;AACvB,QAAM,WAAW,GAAG,CAAA,GAAA,MAAA,CAAA,cAAA,EAAe,GAAf,EAAoB,IAApB,EAA0B,IAA1B,EAAgC,EAAE,CAAC,IAAH,CAAQ,aAAxC,CAApB;AACA,IAAA,GAAG,CAAC,SAAJ,CAAc;AACZ,MAAA,QAAQ,EAAE,IADE;AAEZ,MAAA,SAAS,EAAE,IAAI,CAAC,MAFJ;AAGZ,MAAA,IAAI,EAAE,IAAI,CAAC,IAAL,CAAU,IAAV;AAHM,KAAd;;AAKA,QAAI,EAAE,CAAC,SAAP,EAAkB;AAChB,MAAA,GAAG,CAAC,EAAJ,CAAO,WAAP,EAAoB,YAAK;AAAA,mDACD,IADC;AAAA;;AAAA;AACvB,8DAA4B;AAAA,gBAAjB,OAAiB;AAC1B,aAAA,GAAA,MAAA,CAAA,sBAAA,EAAuB,GAAvB,EAA4B,OAA5B;AACD;AAHsB;AAAA;AAAA;AAAA;AAAA;AAIxB,OAJD;AAKD,KAND,MAMO;AACL,MAAA,GAAG,CAAC,EAAJ,EAAO,GAAA,SAAA,CAAA,CAAP,sBAAW,WAAX,EAA8B,CAAA,GAAA,MAAA,CAAA,gBAAA,EAAiB,GAAjB,EAAsB,IAAtB,EAA4B,OAA5B,CAA9B;AACA,OAAA,GAAA,MAAA,CAAA,iBAAA,EAAkB,GAAlB,EAAuB,OAAvB;AACA,MAAA,GAAG,CAAC,IAAJ;AACD;AAxBkD;;AAKrD,OAAK,IAAM,IAAX,IAAmB,YAAnB,EAAiC;AAAA,qBAAtB,IAAsB;;AAAA,6BAER;AAkBxB;AACF;;AA5BD,OAAA,CAAA,oBAAA,GAAA,oBAAA;;AA8BA,SAAgB,kBAAhB,CAAmC,GAAnC,EAAsF;AAAA,MAAlC,UAAkC,uEAAV,GAAG,CAAC,MAAM;AAAA,MAC7E,GAD6E,GACnD,GADmD,CAC7E,GAD6E;AAAA,MACxE,IADwE,GACnD,GADmD,CACxE,IADwE;AAAA,MAClE,OADkE,GACnD,GADmD,CAClE,OADkE;AAAA,MACzD,EADyD,GACnD,GADmD,CACzD,EADyD;AAEpF,MAAM,KAAK,GAAG,GAAG,CAAC,IAAJ,CAAS,OAAT,CAAd;;AAFoF,+BAGzE,IAHyE;AAIlF,QAAI,CAAA,GAAA,MAAA,CAAA,iBAAA,EAAkB,EAAlB,EAAsB,UAAU,CAAC,IAAD,CAAhC,CAAJ,EAA0D;AAC1D,IAAA,GAAG,CAAC,EAAJ,CACE,CAAA,GAAA,MAAA,CAAA,cAAA,EAAe,GAAf,EAAoB,IAApB,EAA0B,IAA1B,EAAgC,EAAE,CAAC,IAAH,CAAQ,aAAxC,CADF,EAEE,YAAK;AACH,UAAM,MAAM,GAAG,GAAG,CAAC,SAAJ,CAAc;AAAC,QAAA,OAAD;AAAU,QAAA,UAAU,EAAE;AAAtB,OAAd,EAA2C,KAA3C,CAAf;AACA,MAAA,GAAG,CAAC,mBAAJ,CAAwB,MAAxB,EAAgC,KAAhC;AACD,KALH,EAME;AAAA,aAAM,GAAG,CAAC,GAAJ,CAAQ,KAAR,EAAe,IAAf,CAAN;AAAA,KANF,CAM6B;AAN7B;AAQA,IAAA,GAAG,CAAC,EAAJ,CAAO,KAAP;AAbkF;;AAGpF,OAAK,IAAM,IAAX,IAAmB,UAAnB,EAA+B;AAAA,uBAApB,IAAoB;;AAAA,8BAC6B;AAU3D;AACF;;AAfD,OAAA,CAAA,kBAAA,GAAA,kBAAA;AAiBA,OAAA,CAAA,OAAA,GAAe,GAAf","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateSchemaDeps = exports.validatePropertyDeps = exports.error = void 0;\nconst codegen_1 = require(\"../../compile/codegen\");\nconst util_1 = require(\"../../compile/util\");\nconst code_1 = require(\"../code\");\nexports.error = {\n    message: ({ params: { property, depsCount, deps } }) => {\n        const property_ies = depsCount === 1 ? \"property\" : \"properties\";\n        return (0, codegen_1.str) `must have ${property_ies} ${deps} when property ${property} is present`;\n    },\n    params: ({ params: { property, depsCount, deps, missingProperty } }) => (0, codegen_1._) `{property: ${property},\n    missingProperty: ${missingProperty},\n    depsCount: ${depsCount},\n    deps: ${deps}}`, // TODO change to reference\n};\nconst def = {\n    keyword: \"dependencies\",\n    type: \"object\",\n    schemaType: \"object\",\n    error: exports.error,\n    code(cxt) {\n        const [propDeps, schDeps] = splitDependencies(cxt);\n        validatePropertyDeps(cxt, propDeps);\n        validateSchemaDeps(cxt, schDeps);\n    },\n};\nfunction splitDependencies({ schema }) {\n    const propertyDeps = {};\n    const schemaDeps = {};\n    for (const key in schema) {\n        if (key === \"__proto__\")\n            continue;\n        const deps = Array.isArray(schema[key]) ? propertyDeps : schemaDeps;\n        deps[key] = schema[key];\n    }\n    return [propertyDeps, schemaDeps];\n}\nfunction validatePropertyDeps(cxt, propertyDeps = cxt.schema) {\n    const { gen, data, it } = cxt;\n    if (Object.keys(propertyDeps).length === 0)\n        return;\n    const missing = gen.let(\"missing\");\n    for (const prop in propertyDeps) {\n        const deps = propertyDeps[prop];\n        if (deps.length === 0)\n            continue;\n        const hasProperty = (0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties);\n        cxt.setParams({\n            property: prop,\n            depsCount: deps.length,\n            deps: deps.join(\", \"),\n        });\n        if (it.allErrors) {\n            gen.if(hasProperty, () => {\n                for (const depProp of deps) {\n                    (0, code_1.checkReportMissingProp)(cxt, depProp);\n                }\n            });\n        }\n        else {\n            gen.if((0, codegen_1._) `${hasProperty} && (${(0, code_1.checkMissingProp)(cxt, deps, missing)})`);\n            (0, code_1.reportMissingProp)(cxt, missing);\n            gen.else();\n        }\n    }\n}\nexports.validatePropertyDeps = validatePropertyDeps;\nfunction validateSchemaDeps(cxt, schemaDeps = cxt.schema) {\n    const { gen, data, keyword, it } = cxt;\n    const valid = gen.name(\"valid\");\n    for (const prop in schemaDeps) {\n        if ((0, util_1.alwaysValidSchema)(it, schemaDeps[prop]))\n            continue;\n        gen.if((0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties), () => {\n            const schCxt = cxt.subschema({ keyword, schemaProp: prop }, valid);\n            cxt.mergeValidEvaluated(schCxt, valid);\n        }, () => gen.var(valid, true) // TODO var\n        );\n        cxt.ok(valid);\n    }\n}\nexports.validateSchemaDeps = validateSchemaDeps;\nexports.default = def;\n//# sourceMappingURL=dependencies.js.map"]},"metadata":{},"sourceType":"script"}