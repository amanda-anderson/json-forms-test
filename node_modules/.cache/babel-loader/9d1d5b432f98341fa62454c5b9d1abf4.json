{"ast":null,"code":"\"use strict\";\n/*\n  The MIT License\n\n  Copyright (c) 2017-2019 EclipseSource Munich\n  https://github.com/eclipsesource/jsonforms\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in\n  all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  THE SOFTWARE.\n*/\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.generateDefaultUISchema = exports.createControlElement = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar isEmpty_1 = tslib_1.__importDefault(require(\"lodash/isEmpty\"));\n\nvar startCase_1 = tslib_1.__importDefault(require(\"lodash/startCase\"));\n\nvar keys_1 = tslib_1.__importDefault(require(\"lodash/keys\"));\n\nvar models_1 = require(\"../models\");\n\nvar util_1 = require(\"../util\");\n/**\n * Creates a new ILayout.\n * @param layoutType The type of the laoyut\n * @returns the new ILayout\n */\n\n\nvar createLayout = function createLayout(layoutType) {\n  return {\n    type: layoutType,\n    elements: []\n  };\n};\n/**\n * Creates a IControlObject with the given label referencing the given ref\n */\n\n\nvar createControlElement = function createControlElement(ref) {\n  return {\n    type: 'Control',\n    scope: ref\n  };\n};\n\nexports.createControlElement = createControlElement;\n/**\n * Wraps the given {@code uiSchema} in a Layout if there is none already.\n * @param uischema The ui schema to wrap in a layout.\n * @param layoutType The type of the layout to create.\n * @returns the wrapped uiSchema.\n */\n\nvar wrapInLayoutIfNecessary = function wrapInLayoutIfNecessary(uischema, layoutType) {\n  if (!isEmpty_1.default(uischema) && !models_1.isLayout(uischema)) {\n    var verticalLayout = createLayout(layoutType);\n    verticalLayout.elements.push(uischema);\n    return verticalLayout;\n  }\n\n  return uischema;\n};\n/**\n * Adds the given {@code labelName} to the {@code layout} if it exists\n * @param layout\n *      The layout which is to receive the label\n * @param labelName\n *      The name of the schema\n */\n\n\nvar addLabel = function addLabel(layout, labelName) {\n  if (!isEmpty_1.default(labelName)) {\n    var fixedLabel = startCase_1.default(labelName);\n\n    if (models_1.isGroup(layout)) {\n      layout.label = fixedLabel;\n    } else {\n      // add label with name\n      var label = {\n        type: 'Label',\n        text: fixedLabel\n      };\n      layout.elements.push(label);\n    }\n  }\n};\n/**\n * Returns whether the given {@code jsonSchema} is a combinator ({@code oneOf}, {@code anyOf}, {@code allOf}) at the root level\n * @param jsonSchema\n *      the schema to check\n */\n\n\nvar isCombinator = function isCombinator(jsonSchema) {\n  return !isEmpty_1.default(jsonSchema) && (!isEmpty_1.default(jsonSchema.oneOf) || !isEmpty_1.default(jsonSchema.anyOf) || !isEmpty_1.default(jsonSchema.allOf));\n};\n\nvar generateUISchema = function generateUISchema(jsonSchema, schemaElements, currentRef, schemaName, layoutType, rootSchema) {\n  if (!isEmpty_1.default(jsonSchema) && jsonSchema.$ref !== undefined) {\n    return generateUISchema(util_1.resolveSchema(rootSchema, jsonSchema.$ref), schemaElements, currentRef, schemaName, layoutType, rootSchema);\n  }\n\n  if (isCombinator(jsonSchema)) {\n    var controlObject = exports.createControlElement(currentRef);\n    schemaElements.push(controlObject);\n    return controlObject;\n  }\n\n  var types = util_1.deriveTypes(jsonSchema);\n\n  if (types.length === 0) {\n    return null;\n  }\n\n  if (types.length > 1) {\n    var controlObject = exports.createControlElement(currentRef);\n    schemaElements.push(controlObject);\n    return controlObject;\n  }\n\n  if (currentRef === '#' && types[0] === 'object') {\n    var layout_1 = createLayout(layoutType);\n    schemaElements.push(layout_1);\n\n    if (jsonSchema.properties && keys_1.default(jsonSchema.properties).length > 1) {\n      addLabel(layout_1, schemaName);\n    }\n\n    if (!isEmpty_1.default(jsonSchema.properties)) {\n      // traverse properties\n      var nextRef_1 = currentRef + '/properties';\n      Object.keys(jsonSchema.properties).map(function (propName) {\n        var value = jsonSchema.properties[propName];\n        var ref = nextRef_1 + \"/\" + propName;\n\n        if (value.$ref !== undefined) {\n          value = util_1.resolveSchema(rootSchema, value.$ref);\n        }\n\n        generateUISchema(value, layout_1.elements, ref, propName, layoutType, rootSchema);\n      });\n    }\n\n    return layout_1;\n  }\n\n  switch (types[0]) {\n    case 'object': // object items will be handled by the object control itself\n\n    /* falls through */\n\n    case 'array': // array items will be handled by the array control itself\n\n    /* falls through */\n\n    case 'string':\n    /* falls through */\n\n    case 'number':\n    /* falls through */\n\n    case 'integer':\n    /* falls through */\n\n    case 'boolean':\n      var controlObject = exports.createControlElement(currentRef);\n      schemaElements.push(controlObject);\n      return controlObject;\n\n    default:\n      throw new Error('Unknown type: ' + JSON.stringify(jsonSchema));\n  }\n};\n/**\n * Generate a default UI schema.\n * @param {JsonSchema} jsonSchema the JSON schema to generated a UI schema for\n * @param {string} layoutType the desired layout type for the root layout\n *        of the generated UI schema\n */\n\n\nvar generateDefaultUISchema = function generateDefaultUISchema(jsonSchema, layoutType, prefix, rootSchema) {\n  if (layoutType === void 0) {\n    layoutType = 'VerticalLayout';\n  }\n\n  if (prefix === void 0) {\n    prefix = '#';\n  }\n\n  if (rootSchema === void 0) {\n    rootSchema = jsonSchema;\n  }\n\n  return wrapInLayoutIfNecessary(generateUISchema(jsonSchema, [], prefix, '', layoutType, rootSchema), layoutType);\n};\n\nexports.generateDefaultUISchema = generateDefaultUISchema;","map":{"version":3,"sources":["../../src/generators/uischema.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n  The MIT License\n\n  Copyright (c) 2017-2019 EclipseSource Munich\n  https://github.com/eclipsesource/jsonforms\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in\n  all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  THE SOFTWARE.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.generateDefaultUISchema = exports.createControlElement = void 0;\nvar tslib_1 = require(\"tslib\");\nvar isEmpty_1 = tslib_1.__importDefault(require(\"lodash/isEmpty\"));\nvar startCase_1 = tslib_1.__importDefault(require(\"lodash/startCase\"));\nvar keys_1 = tslib_1.__importDefault(require(\"lodash/keys\"));\nvar models_1 = require(\"../models\");\nvar util_1 = require(\"../util\");\n/**\n * Creates a new ILayout.\n * @param layoutType The type of the laoyut\n * @returns the new ILayout\n */\nvar createLayout = function (layoutType) { return ({\n    type: layoutType,\n    elements: []\n}); };\n/**\n * Creates a IControlObject with the given label referencing the given ref\n */\nvar createControlElement = function (ref) { return ({\n    type: 'Control',\n    scope: ref\n}); };\nexports.createControlElement = createControlElement;\n/**\n * Wraps the given {@code uiSchema} in a Layout if there is none already.\n * @param uischema The ui schema to wrap in a layout.\n * @param layoutType The type of the layout to create.\n * @returns the wrapped uiSchema.\n */\nvar wrapInLayoutIfNecessary = function (uischema, layoutType) {\n    if (!isEmpty_1.default(uischema) && !models_1.isLayout(uischema)) {\n        var verticalLayout = createLayout(layoutType);\n        verticalLayout.elements.push(uischema);\n        return verticalLayout;\n    }\n    return uischema;\n};\n/**\n * Adds the given {@code labelName} to the {@code layout} if it exists\n * @param layout\n *      The layout which is to receive the label\n * @param labelName\n *      The name of the schema\n */\nvar addLabel = function (layout, labelName) {\n    if (!isEmpty_1.default(labelName)) {\n        var fixedLabel = startCase_1.default(labelName);\n        if (models_1.isGroup(layout)) {\n            layout.label = fixedLabel;\n        }\n        else {\n            // add label with name\n            var label = {\n                type: 'Label',\n                text: fixedLabel\n            };\n            layout.elements.push(label);\n        }\n    }\n};\n/**\n * Returns whether the given {@code jsonSchema} is a combinator ({@code oneOf}, {@code anyOf}, {@code allOf}) at the root level\n * @param jsonSchema\n *      the schema to check\n */\nvar isCombinator = function (jsonSchema) {\n    return (!isEmpty_1.default(jsonSchema) &&\n        (!isEmpty_1.default(jsonSchema.oneOf) ||\n            !isEmpty_1.default(jsonSchema.anyOf) ||\n            !isEmpty_1.default(jsonSchema.allOf)));\n};\nvar generateUISchema = function (jsonSchema, schemaElements, currentRef, schemaName, layoutType, rootSchema) {\n    if (!isEmpty_1.default(jsonSchema) && jsonSchema.$ref !== undefined) {\n        return generateUISchema(util_1.resolveSchema(rootSchema, jsonSchema.$ref), schemaElements, currentRef, schemaName, layoutType, rootSchema);\n    }\n    if (isCombinator(jsonSchema)) {\n        var controlObject = exports.createControlElement(currentRef);\n        schemaElements.push(controlObject);\n        return controlObject;\n    }\n    var types = util_1.deriveTypes(jsonSchema);\n    if (types.length === 0) {\n        return null;\n    }\n    if (types.length > 1) {\n        var controlObject = exports.createControlElement(currentRef);\n        schemaElements.push(controlObject);\n        return controlObject;\n    }\n    if (currentRef === '#' && types[0] === 'object') {\n        var layout_1 = createLayout(layoutType);\n        schemaElements.push(layout_1);\n        if (jsonSchema.properties && keys_1.default(jsonSchema.properties).length > 1) {\n            addLabel(layout_1, schemaName);\n        }\n        if (!isEmpty_1.default(jsonSchema.properties)) {\n            // traverse properties\n            var nextRef_1 = currentRef + '/properties';\n            Object.keys(jsonSchema.properties).map(function (propName) {\n                var value = jsonSchema.properties[propName];\n                var ref = nextRef_1 + \"/\" + propName;\n                if (value.$ref !== undefined) {\n                    value = util_1.resolveSchema(rootSchema, value.$ref);\n                }\n                generateUISchema(value, layout_1.elements, ref, propName, layoutType, rootSchema);\n            });\n        }\n        return layout_1;\n    }\n    switch (types[0]) {\n        case 'object': // object items will be handled by the object control itself\n        /* falls through */\n        case 'array': // array items will be handled by the array control itself\n        /* falls through */\n        case 'string':\n        /* falls through */\n        case 'number':\n        /* falls through */\n        case 'integer':\n        /* falls through */\n        case 'boolean':\n            var controlObject = exports.createControlElement(currentRef);\n            schemaElements.push(controlObject);\n            return controlObject;\n        default:\n            throw new Error('Unknown type: ' + JSON.stringify(jsonSchema));\n    }\n};\n/**\n * Generate a default UI schema.\n * @param {JsonSchema} jsonSchema the JSON schema to generated a UI schema for\n * @param {string} layoutType the desired layout type for the root layout\n *        of the generated UI schema\n */\nvar generateDefaultUISchema = function (jsonSchema, layoutType, prefix, rootSchema) {\n    if (layoutType === void 0) { layoutType = 'VerticalLayout'; }\n    if (prefix === void 0) { prefix = '#'; }\n    if (rootSchema === void 0) { rootSchema = jsonSchema; }\n    return wrapInLayoutIfNecessary(generateUISchema(jsonSchema, [], prefix, '', layoutType, rootSchema), layoutType);\n};\nexports.generateDefaultUISchema = generateDefaultUISchema;\n//# sourceMappingURL=uischema.js.map"]},"metadata":{},"sourceType":"script"}