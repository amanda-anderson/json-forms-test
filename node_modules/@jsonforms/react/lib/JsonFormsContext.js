"use strict";
/*
  The MIT License

  Copyright (c) 2017-2019 EclipseSource Munich
  https://github.com/eclipsesource/jsonforms

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.withJsonFormsMultiEnumProps = exports.withJsonFormsOneOfEnumProps = exports.withJsonFormsOneOfEnumCellProps = exports.withJsonFormsEnumProps = exports.withJsonFormsEnumCellProps = exports.withJsonFormsDispatchCellProps = exports.withJsonFormsCellProps = exports.withJsonFormsMasterListItemProps = exports.withJsonFormsArrayControlProps = exports.withJsonFormsArrayLayoutProps = exports.withJsonFormsDetailProps = exports.withJsonFormsAllOfProps = exports.withJsonFormsAnyOfProps = exports.withJsonFormsOneOfProps = exports.withJsonFormsLayoutProps = exports.withJsonFormsControlProps = exports.withJsonFormsContext = exports.ctxDispatchToMultiEnumProps = exports.ctxToDispatchCellProps = exports.ctxToOneOfEnumCellProps = exports.ctxToEnumCellProps = exports.ctxToCellProps = exports.ctxToMasterListItemProps = exports.ctxDispatchToArrayControlProps = exports.ctxToJsonFormsDispatchProps = exports.ctxToOneOfProps = exports.ctxToAnyOfProps = exports.ctxDispatchToControlProps = exports.ctxToAllOfProps = exports.ctxToControlWithDetailProps = exports.ctxToMultiEnumControlProps = exports.ctxToOneOfEnumControlProps = exports.ctxToEnumControlProps = exports.ctxToControlProps = exports.ctxToLayoutProps = exports.ctxToArrayControlProps = exports.ctxToArrayLayoutProps = exports.useJsonForms = exports.JsonFormsStateProvider = exports.JsonFormsContext = void 0;
var tslib_1 = require("tslib");
var core_1 = require("@jsonforms/core");
var react_1 = tslib_1.__importStar(require("react"));
var initialCoreState = {
    data: {},
    schema: {},
    uischema: undefined,
    errors: [],
    validator: undefined,
    ajv: undefined,
};
exports.JsonFormsContext = react_1.default.createContext({
    core: initialCoreState,
    renderers: []
});
/**
 * Hook similar to `useEffect` with the difference that the effect
 * is only executed from the second call onwards.
 */
var useEffectAfterFirstRender = function (effect, dependencies) {
    var firstExecution = react_1.useRef(true);
    react_1.useEffect(function () {
        if (firstExecution.current) {
            firstExecution.current = false;
            return;
        }
        effect();
    }, dependencies);
};
var JsonFormsStateProvider = function (_a) {
    var _b, _c, _d;
    var children = _a.children, initState = _a.initState, onChange = _a.onChange;
    var _e = initState.core, data = _e.data, schema = _e.schema, uischema = _e.uischema, ajv = _e.ajv, validationMode = _e.validationMode;
    // Initialize core immediately
    var _f = react_1.useReducer(core_1.coreReducer, undefined, function () { return core_1.coreReducer(initState.core, core_1.Actions.init(data, schema, uischema, { ajv: ajv, validationMode: validationMode })); }), core = _f[0], coreDispatch = _f[1];
    react_1.useEffect(function () {
        coreDispatch(core_1.Actions.updateCore(data, schema, uischema, { ajv: ajv, validationMode: validationMode }));
    }, [data, schema, uischema, ajv, validationMode]);
    var _g = react_1.useReducer(core_1.configReducer, undefined, function () { return core_1.configReducer(undefined, core_1.Actions.setConfig(initState.config)); }), config = _g[0], configDispatch = _g[1];
    useEffectAfterFirstRender(function () {
        configDispatch(core_1.Actions.setConfig(initState.config));
    }, [initState.config]);
    var _h = react_1.useReducer(core_1.i18nReducer, undefined, function () {
        var _a, _b, _c;
        return core_1.i18nReducer(initState.i18n, core_1.Actions.updateI18n((_a = initState.i18n) === null || _a === void 0 ? void 0 : _a.locale, (_b = initState.i18n) === null || _b === void 0 ? void 0 : _b.translate, (_c = initState.i18n) === null || _c === void 0 ? void 0 : _c.translateError));
    }), i18n = _h[0], i18nDispatch = _h[1];
    react_1.useEffect(function () {
        var _a, _b, _c;
        i18nDispatch(core_1.Actions.updateI18n((_a = initState.i18n) === null || _a === void 0 ? void 0 : _a.locale, (_b = initState.i18n) === null || _b === void 0 ? void 0 : _b.translate, (_c = initState.i18n) === null || _c === void 0 ? void 0 : _c.translateError));
    }, [(_b = initState.i18n) === null || _b === void 0 ? void 0 : _b.locale, (_c = initState.i18n) === null || _c === void 0 ? void 0 : _c.translate, (_d = initState.i18n) === null || _d === void 0 ? void 0 : _d.translateError]);
    var contextValue = react_1.useMemo(function () { return ({
        core: core,
        renderers: initState.renderers,
        cells: initState.cells,
        config: config,
        uischemas: initState.uischemas,
        readonly: initState.readonly,
        i18n: i18n,
        // only core dispatch available
        dispatch: coreDispatch,
    }); }, [core, initState.renderers, initState.cells, config, initState.uischemas, initState.readonly, i18n]);
    var onChangeRef = react_1.useRef(onChange);
    react_1.useEffect(function () {
        onChangeRef.current = onChange;
    }, [onChange]);
    react_1.useEffect(function () {
        var _a;
        (_a = onChangeRef.current) === null || _a === void 0 ? void 0 : _a.call(onChangeRef, { data: core.data, errors: core.errors });
    }, [core.data, core.errors]);
    return (react_1.default.createElement(exports.JsonFormsContext.Provider, { value: contextValue }, children));
};
exports.JsonFormsStateProvider = JsonFormsStateProvider;
var useJsonForms = function () {
    return react_1.useContext(exports.JsonFormsContext);
};
exports.useJsonForms = useJsonForms;
var ctxToArrayLayoutProps = function (ctx, props) {
    return core_1.mapStateToArrayLayoutProps({ jsonforms: tslib_1.__assign({}, ctx) }, props);
};
exports.ctxToArrayLayoutProps = ctxToArrayLayoutProps;
var ctxToArrayControlProps = function (ctx, props) {
    return core_1.mapStateToArrayControlProps({ jsonforms: tslib_1.__assign({}, ctx) }, props);
};
exports.ctxToArrayControlProps = ctxToArrayControlProps;
var ctxToLayoutProps = function (ctx, props) {
    return core_1.mapStateToLayoutProps({ jsonforms: tslib_1.__assign({}, ctx) }, props);
};
exports.ctxToLayoutProps = ctxToLayoutProps;
var ctxToControlProps = function (ctx, props) {
    return core_1.mapStateToControlProps({ jsonforms: tslib_1.__assign({}, ctx) }, props);
};
exports.ctxToControlProps = ctxToControlProps;
var ctxToEnumControlProps = function (ctx, props) {
    var enumProps = core_1.mapStateToEnumControlProps({ jsonforms: tslib_1.__assign({}, ctx) }, props);
    /**
     * Make sure, that options are memoized as otherwise the component will rerender for every change,
     * as the options array is recreated every time.
     */
    var options = react_1.useMemo(function () { return enumProps.options; }, [props.options, enumProps.schema]);
    return tslib_1.__assign(tslib_1.__assign({}, enumProps), { options: options });
};
exports.ctxToEnumControlProps = ctxToEnumControlProps;
var ctxToOneOfEnumControlProps = function (ctx, props) {
    var enumProps = core_1.mapStateToOneOfEnumControlProps({ jsonforms: tslib_1.__assign({}, ctx) }, props);
    /**
     * Make sure, that options are memoized as otherwise the component will rerender for every change,
     * as the options array is recreated every time.
     */
    var options = react_1.useMemo(function () { return enumProps.options; }, [props.options, enumProps.schema]);
    return tslib_1.__assign(tslib_1.__assign({}, enumProps), { options: options });
};
exports.ctxToOneOfEnumControlProps = ctxToOneOfEnumControlProps;
var ctxToMultiEnumControlProps = function (ctx, props) {
    return core_1.mapStateToMultiEnumControlProps({ jsonforms: tslib_1.__assign({}, ctx) }, props);
};
exports.ctxToMultiEnumControlProps = ctxToMultiEnumControlProps;
var ctxToControlWithDetailProps = function (ctx, props) {
    return core_1.mapStateToControlWithDetailProps({ jsonforms: tslib_1.__assign({}, ctx) }, props);
};
exports.ctxToControlWithDetailProps = ctxToControlWithDetailProps;
var ctxToAllOfProps = function (ctx, ownProps) {
    var props = core_1.mapStateToAllOfProps({ jsonforms: tslib_1.__assign({}, ctx) }, ownProps);
    return tslib_1.__assign({}, props);
};
exports.ctxToAllOfProps = ctxToAllOfProps;
var ctxDispatchToControlProps = function (dispatch) {
    return react_1.useMemo(function () { return core_1.mapDispatchToControlProps(dispatch); }, [dispatch]);
};
exports.ctxDispatchToControlProps = ctxDispatchToControlProps;
// context mappers
var ctxToAnyOfProps = function (ctx, ownProps) {
    var props = core_1.mapStateToAnyOfProps({ jsonforms: tslib_1.__assign({}, ctx) }, ownProps);
    var dispatchProps = exports.ctxDispatchToControlProps(ctx.dispatch);
    return tslib_1.__assign(tslib_1.__assign({}, props), dispatchProps);
};
exports.ctxToAnyOfProps = ctxToAnyOfProps;
var ctxToOneOfProps = function (ctx, ownProps) {
    var props = core_1.mapStateToOneOfProps({ jsonforms: tslib_1.__assign({}, ctx) }, ownProps);
    var dispatchProps = exports.ctxDispatchToControlProps(ctx.dispatch);
    return tslib_1.__assign(tslib_1.__assign({}, props), dispatchProps);
};
exports.ctxToOneOfProps = ctxToOneOfProps;
var ctxToJsonFormsDispatchProps = function (ctx, ownProps) { return core_1.mapStateToJsonFormsRendererProps({ jsonforms: tslib_1.__assign({}, ctx) }, ownProps); };
exports.ctxToJsonFormsDispatchProps = ctxToJsonFormsDispatchProps;
var ctxDispatchToArrayControlProps = function (dispatch) { return (tslib_1.__assign(tslib_1.__assign({}, exports.ctxDispatchToControlProps(dispatch)), react_1.useMemo(function () { return core_1.mapDispatchToArrayControlProps(dispatch); }, [dispatch]))); };
exports.ctxDispatchToArrayControlProps = ctxDispatchToArrayControlProps;
var ctxToMasterListItemProps = function (ctx, ownProps) { return core_1.mapStateToMasterListItemProps({ jsonforms: tslib_1.__assign({}, ctx) }, ownProps); };
exports.ctxToMasterListItemProps = ctxToMasterListItemProps;
var ctxToCellProps = function (ctx, ownProps) {
    return core_1.mapStateToCellProps({ jsonforms: tslib_1.__assign({}, ctx) }, ownProps);
};
exports.ctxToCellProps = ctxToCellProps;
var ctxToEnumCellProps = function (ctx, ownProps) {
    var cellProps = core_1.defaultMapStateToEnumCellProps({ jsonforms: tslib_1.__assign({}, ctx) }, ownProps);
    /**
     * Make sure, that options are memoized as otherwise the cell will rerender for every change,
     * as the options array is recreated every time.
     */
    var options = react_1.useMemo(function () { return cellProps.options; }, [ownProps.options, cellProps.schema]);
    return tslib_1.__assign(tslib_1.__assign({}, cellProps), { options: options });
};
exports.ctxToEnumCellProps = ctxToEnumCellProps;
var ctxToOneOfEnumCellProps = function (ctx, props) {
    var enumCellProps = core_1.mapStateToOneOfEnumCellProps({ jsonforms: tslib_1.__assign({}, ctx) }, props);
    /**
     * Make sure, that options are memoized as otherwise the cell will rerender for every change,
     * as the options array is recreated every time.
     */
    var options = react_1.useMemo(function () { return enumCellProps.options; }, [props.options, enumCellProps.schema]);
    return tslib_1.__assign(tslib_1.__assign({}, enumCellProps), { options: options });
};
exports.ctxToOneOfEnumCellProps = ctxToOneOfEnumCellProps;
var ctxToDispatchCellProps = function (ctx, ownProps) {
    return core_1.mapStateToDispatchCellProps({ jsonforms: tslib_1.__assign({}, ctx) }, ownProps);
};
exports.ctxToDispatchCellProps = ctxToDispatchCellProps;
var ctxDispatchToMultiEnumProps = function (dispatch) { return (tslib_1.__assign(tslib_1.__assign({}, exports.ctxDispatchToControlProps(dispatch)), react_1.useMemo(function () { return core_1.mapDispatchToMultiEnumProps(dispatch); }, [dispatch]))); };
exports.ctxDispatchToMultiEnumProps = ctxDispatchToMultiEnumProps;
var withJsonFormsContext = function (Component) { return function (props) {
    var ctx = exports.useJsonForms();
    return react_1.default.createElement(Component, { ctx: ctx, props: props });
}; };
exports.withJsonFormsContext = withJsonFormsContext;
var withContextToControlProps = function (Component) {
    return function (_a) {
        var ctx = _a.ctx, props = _a.props;
        var controlProps = exports.ctxToControlProps(ctx, props);
        var dispatchProps = exports.ctxDispatchToControlProps(ctx.dispatch);
        return (react_1.default.createElement(Component, tslib_1.__assign({}, props, controlProps, dispatchProps)));
    };
};
var withContextToLayoutProps = function (Component) {
    return function (_a) {
        var ctx = _a.ctx, props = _a.props;
        var layoutProps = exports.ctxToLayoutProps(ctx, props);
        return (react_1.default.createElement(Component, tslib_1.__assign({}, props, layoutProps)));
    };
};
var withContextToOneOfProps = function (Component) {
    return function (_a) {
        var ctx = _a.ctx, props = _a.props;
        var oneOfProps = exports.ctxToOneOfProps(ctx, props);
        var dispatchProps = exports.ctxDispatchToControlProps(ctx.dispatch);
        return (react_1.default.createElement(Component, tslib_1.__assign({}, props, oneOfProps, dispatchProps)));
    };
};
var withContextToAnyOfProps = function (Component) {
    return function (_a) {
        var ctx = _a.ctx, props = _a.props;
        var oneOfProps = exports.ctxToAnyOfProps(ctx, props);
        var dispatchProps = exports.ctxDispatchToControlProps(ctx.dispatch);
        return (react_1.default.createElement(Component, tslib_1.__assign({}, props, oneOfProps, dispatchProps)));
    };
};
var withContextToAllOfProps = function (Component) {
    return function (_a) {
        var ctx = _a.ctx, props = _a.props;
        var allOfProps = exports.ctxToAllOfProps(ctx, props);
        var dispatchProps = exports.ctxDispatchToControlProps(ctx.dispatch);
        return (react_1.default.createElement(Component, tslib_1.__assign({}, props, allOfProps, dispatchProps)));
    };
};
var withContextToDetailProps = function (Component) {
    return function (_a) {
        var ctx = _a.ctx, props = _a.props;
        var detailProps = exports.ctxToControlWithDetailProps(ctx, props);
        return (react_1.default.createElement(Component, tslib_1.__assign({}, detailProps)));
    };
};
var withContextToArrayLayoutProps = function (Component) {
    return function (_a) {
        var ctx = _a.ctx, props = _a.props;
        var arrayLayoutProps = exports.ctxToArrayLayoutProps(ctx, props);
        var dispatchProps = exports.ctxDispatchToArrayControlProps(ctx.dispatch);
        return (react_1.default.createElement(Component, tslib_1.__assign({}, arrayLayoutProps, dispatchProps)));
    };
};
var withContextToArrayControlProps = function (Component) {
    return function (_a) {
        var ctx = _a.ctx, props = _a.props;
        var stateProps = exports.ctxToArrayControlProps(ctx, props);
        var dispatchProps = exports.ctxDispatchToArrayControlProps(ctx.dispatch);
        return (react_1.default.createElement(Component, tslib_1.__assign({}, props, stateProps, dispatchProps)));
    };
};
var withContextToMasterListItemProps = function (Component) {
    return function (_a) {
        var ctx = _a.ctx, props = _a.props;
        var stateProps = exports.ctxToMasterListItemProps(ctx, props);
        return (react_1.default.createElement(Component, tslib_1.__assign({}, stateProps)));
    };
};
var withContextToCellProps = function (Component) {
    return function (_a) {
        var ctx = _a.ctx, props = _a.props;
        var cellProps = exports.ctxToCellProps(ctx, props);
        var dispatchProps = exports.ctxDispatchToControlProps(ctx.dispatch);
        return (react_1.default.createElement(Component, tslib_1.__assign({}, props, dispatchProps, cellProps)));
    };
};
var withContextToDispatchCellProps = function (Component) { return function (_a) {
    var ctx = _a.ctx, props = _a.props;
    var cellProps = exports.ctxToDispatchCellProps(ctx, props);
    var dispatchProps = exports.ctxDispatchToControlProps(ctx.dispatch);
    return react_1.default.createElement(Component, tslib_1.__assign({}, props, dispatchProps, cellProps));
}; };
var withContextToEnumCellProps = function (Component) {
    return function (_a) {
        var ctx = _a.ctx, props = _a.props;
        var cellProps = exports.ctxToEnumCellProps(ctx, props);
        var dispatchProps = exports.ctxDispatchToControlProps(ctx.dispatch);
        return (react_1.default.createElement(Component, tslib_1.__assign({}, props, dispatchProps, cellProps)));
    };
};
var withContextToEnumProps = function (Component) {
    return function (_a) {
        var ctx = _a.ctx, props = _a.props;
        var stateProps = exports.ctxToEnumControlProps(ctx, props);
        var dispatchProps = exports.ctxDispatchToControlProps(ctx.dispatch);
        return (react_1.default.createElement(Component, tslib_1.__assign({}, props, dispatchProps, stateProps)));
    };
};
var withContextToOneOfEnumCellProps = function (Component) {
    return function (_a) {
        var ctx = _a.ctx, props = _a.props;
        var cellProps = exports.ctxToOneOfEnumCellProps(ctx, props);
        var dispatchProps = exports.ctxDispatchToControlProps(ctx.dispatch);
        return (react_1.default.createElement(Component, tslib_1.__assign({}, props, dispatchProps, cellProps)));
    };
};
var withContextToOneOfEnumProps = function (Component) {
    return function (_a) {
        var ctx = _a.ctx, props = _a.props;
        var stateProps = exports.ctxToOneOfEnumControlProps(ctx, props);
        var dispatchProps = exports.ctxDispatchToControlProps(ctx.dispatch);
        return (react_1.default.createElement(Component, tslib_1.__assign({}, props, dispatchProps, stateProps)));
    };
};
var withContextToMultiEnumProps = function (Component) {
    return function (_a) {
        var ctx = _a.ctx, props = _a.props;
        var stateProps = exports.ctxToMultiEnumControlProps(ctx, props);
        var dispatchProps = exports.ctxDispatchToMultiEnumProps(ctx.dispatch);
        return (react_1.default.createElement(Component, tslib_1.__assign({}, props, dispatchProps, stateProps)));
    };
};
// --
// top level HOCs --
var withJsonFormsControlProps = function (Component, memoize) {
    if (memoize === void 0) { memoize = true; }
    return exports.withJsonFormsContext(withContextToControlProps(memoize ? react_1.default.memo(Component) : Component));
};
exports.withJsonFormsControlProps = withJsonFormsControlProps;
var withJsonFormsLayoutProps = function (Component, memoize) {
    if (memoize === void 0) { memoize = true; }
    return exports.withJsonFormsContext(withContextToLayoutProps(memoize ? react_1.default.memo(Component) : Component));
};
exports.withJsonFormsLayoutProps = withJsonFormsLayoutProps;
var withJsonFormsOneOfProps = function (Component, memoize) {
    if (memoize === void 0) { memoize = true; }
    return exports.withJsonFormsContext(withContextToOneOfProps(memoize ? react_1.default.memo(Component) : Component));
};
exports.withJsonFormsOneOfProps = withJsonFormsOneOfProps;
var withJsonFormsAnyOfProps = function (Component, memoize) {
    if (memoize === void 0) { memoize = true; }
    return exports.withJsonFormsContext(withContextToAnyOfProps(memoize ? react_1.default.memo(Component) : Component));
};
exports.withJsonFormsAnyOfProps = withJsonFormsAnyOfProps;
var withJsonFormsAllOfProps = function (Component, memoize) {
    if (memoize === void 0) { memoize = true; }
    return exports.withJsonFormsContext(withContextToAllOfProps(memoize ? react_1.default.memo(Component) : Component));
};
exports.withJsonFormsAllOfProps = withJsonFormsAllOfProps;
var withJsonFormsDetailProps = function (Component, memoize) {
    if (memoize === void 0) { memoize = true; }
    return exports.withJsonFormsContext(withContextToDetailProps(memoize ? react_1.default.memo(Component) : Component));
};
exports.withJsonFormsDetailProps = withJsonFormsDetailProps;
var withJsonFormsArrayLayoutProps = function (Component, memoize) {
    if (memoize === void 0) { memoize = true; }
    return exports.withJsonFormsContext(withContextToArrayLayoutProps(memoize ? react_1.default.memo(Component) : Component));
};
exports.withJsonFormsArrayLayoutProps = withJsonFormsArrayLayoutProps;
var withJsonFormsArrayControlProps = function (Component, memoize) {
    if (memoize === void 0) { memoize = true; }
    return exports.withJsonFormsContext(withContextToArrayControlProps(memoize ? react_1.default.memo(Component) : Component));
};
exports.withJsonFormsArrayControlProps = withJsonFormsArrayControlProps;
var withJsonFormsMasterListItemProps = function (Component, memoize) {
    if (memoize === void 0) { memoize = true; }
    return exports.withJsonFormsContext(withContextToMasterListItemProps(memoize ? react_1.default.memo(Component) : Component));
};
exports.withJsonFormsMasterListItemProps = withJsonFormsMasterListItemProps;
var withJsonFormsCellProps = function (Component, memoize) {
    if (memoize === void 0) { memoize = true; }
    return exports.withJsonFormsContext(withContextToCellProps(memoize ? react_1.default.memo(Component) : Component));
};
exports.withJsonFormsCellProps = withJsonFormsCellProps;
var withJsonFormsDispatchCellProps = function (Component, memoize) {
    if (memoize === void 0) { memoize = true; }
    return exports.withJsonFormsContext(withContextToDispatchCellProps(memoize ? react_1.default.memo(Component) : Component));
};
exports.withJsonFormsDispatchCellProps = withJsonFormsDispatchCellProps;
var withJsonFormsEnumCellProps = function (Component, memoize) {
    if (memoize === void 0) { memoize = true; }
    return exports.withJsonFormsContext(withContextToEnumCellProps(memoize ? react_1.default.memo(Component) : Component));
};
exports.withJsonFormsEnumCellProps = withJsonFormsEnumCellProps;
var withJsonFormsEnumProps = function (Component, memoize) {
    if (memoize === void 0) { memoize = true; }
    return exports.withJsonFormsContext(withContextToEnumProps(memoize ? react_1.default.memo(Component) : Component));
};
exports.withJsonFormsEnumProps = withJsonFormsEnumProps;
var withJsonFormsOneOfEnumCellProps = function (Component, memoize) {
    if (memoize === void 0) { memoize = true; }
    return exports.withJsonFormsContext(withContextToOneOfEnumCellProps(memoize ? react_1.default.memo(Component) : Component));
};
exports.withJsonFormsOneOfEnumCellProps = withJsonFormsOneOfEnumCellProps;
var withJsonFormsOneOfEnumProps = function (Component, memoize) {
    if (memoize === void 0) { memoize = true; }
    return exports.withJsonFormsContext(withContextToOneOfEnumProps(memoize ? react_1.default.memo(Component) : Component));
};
exports.withJsonFormsOneOfEnumProps = withJsonFormsOneOfEnumProps;
var withJsonFormsMultiEnumProps = function (Component, memoize) {
    if (memoize === void 0) { memoize = true; }
    return exports.withJsonFormsContext(withContextToMultiEnumProps(memoize ? react_1.default.memo(Component) : Component));
};
exports.withJsonFormsMultiEnumProps = withJsonFormsMultiEnumProps;
// --
//# sourceMappingURL=JsonFormsContext.js.map